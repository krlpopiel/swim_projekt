
projekt_milestone1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003758  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003818  08003818  00004818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800385c  0800385c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800385c  0800385c  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800385c  0800385c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800385c  0800385c  0000485c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003860  08003860  00004860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003864  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08003870  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08003870  0000506c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066dc  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001391  00000000  00000000  0000b710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0000caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d0  00000000  00000000  0000d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010122  00000000  00000000  0000d820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000088a3  00000000  00000000  0001d942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064964  00000000  00000000  000261e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008ab49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c68  00000000  00000000  0008ab8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0008c7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003800 	.word	0x08003800

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003800 	.word	0x08003800

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 ff9b 	bl	8001164 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 ff01 	bl	800103c <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 faf0 	bl	8000828 <__aeabi_dsub>
 8000248:	f000 fef8 	bl	800103c <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dmul>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	46de      	mov	lr, fp
 8000264:	4645      	mov	r5, r8
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	001f      	movs	r7, r3
 800026a:	030b      	lsls	r3, r1, #12
 800026c:	0b1b      	lsrs	r3, r3, #12
 800026e:	0016      	movs	r6, r2
 8000270:	469a      	mov	sl, r3
 8000272:	0fca      	lsrs	r2, r1, #31
 8000274:	004b      	lsls	r3, r1, #1
 8000276:	0004      	movs	r4, r0
 8000278:	4691      	mov	r9, r2
 800027a:	b085      	sub	sp, #20
 800027c:	0d5b      	lsrs	r3, r3, #21
 800027e:	d100      	bne.n	8000282 <__aeabi_dmul+0x26>
 8000280:	e1cf      	b.n	8000622 <__aeabi_dmul+0x3c6>
 8000282:	4acd      	ldr	r2, [pc, #820]	@ (80005b8 <__aeabi_dmul+0x35c>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d055      	beq.n	8000334 <__aeabi_dmul+0xd8>
 8000288:	4651      	mov	r1, sl
 800028a:	0f42      	lsrs	r2, r0, #29
 800028c:	00c9      	lsls	r1, r1, #3
 800028e:	430a      	orrs	r2, r1
 8000290:	2180      	movs	r1, #128	@ 0x80
 8000292:	0409      	lsls	r1, r1, #16
 8000294:	4311      	orrs	r1, r2
 8000296:	00c2      	lsls	r2, r0, #3
 8000298:	4690      	mov	r8, r2
 800029a:	4ac8      	ldr	r2, [pc, #800]	@ (80005bc <__aeabi_dmul+0x360>)
 800029c:	468a      	mov	sl, r1
 800029e:	4693      	mov	fp, r2
 80002a0:	449b      	add	fp, r3
 80002a2:	2300      	movs	r3, #0
 80002a4:	2500      	movs	r5, #0
 80002a6:	9302      	str	r3, [sp, #8]
 80002a8:	033c      	lsls	r4, r7, #12
 80002aa:	007b      	lsls	r3, r7, #1
 80002ac:	0ffa      	lsrs	r2, r7, #31
 80002ae:	9601      	str	r6, [sp, #4]
 80002b0:	0b24      	lsrs	r4, r4, #12
 80002b2:	0d5b      	lsrs	r3, r3, #21
 80002b4:	9200      	str	r2, [sp, #0]
 80002b6:	d100      	bne.n	80002ba <__aeabi_dmul+0x5e>
 80002b8:	e188      	b.n	80005cc <__aeabi_dmul+0x370>
 80002ba:	4abf      	ldr	r2, [pc, #764]	@ (80005b8 <__aeabi_dmul+0x35c>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d100      	bne.n	80002c2 <__aeabi_dmul+0x66>
 80002c0:	e092      	b.n	80003e8 <__aeabi_dmul+0x18c>
 80002c2:	4abe      	ldr	r2, [pc, #760]	@ (80005bc <__aeabi_dmul+0x360>)
 80002c4:	4694      	mov	ip, r2
 80002c6:	4463      	add	r3, ip
 80002c8:	449b      	add	fp, r3
 80002ca:	2d0a      	cmp	r5, #10
 80002cc:	dc42      	bgt.n	8000354 <__aeabi_dmul+0xf8>
 80002ce:	00e4      	lsls	r4, r4, #3
 80002d0:	0f73      	lsrs	r3, r6, #29
 80002d2:	4323      	orrs	r3, r4
 80002d4:	2480      	movs	r4, #128	@ 0x80
 80002d6:	4649      	mov	r1, r9
 80002d8:	0424      	lsls	r4, r4, #16
 80002da:	431c      	orrs	r4, r3
 80002dc:	00f3      	lsls	r3, r6, #3
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b00      	ldr	r3, [sp, #0]
 80002e2:	2000      	movs	r0, #0
 80002e4:	4059      	eors	r1, r3
 80002e6:	b2cb      	uxtb	r3, r1
 80002e8:	9303      	str	r3, [sp, #12]
 80002ea:	2d02      	cmp	r5, #2
 80002ec:	dc00      	bgt.n	80002f0 <__aeabi_dmul+0x94>
 80002ee:	e094      	b.n	800041a <__aeabi_dmul+0x1be>
 80002f0:	2301      	movs	r3, #1
 80002f2:	40ab      	lsls	r3, r5
 80002f4:	001d      	movs	r5, r3
 80002f6:	23a6      	movs	r3, #166	@ 0xa6
 80002f8:	002a      	movs	r2, r5
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	401a      	ands	r2, r3
 80002fe:	421d      	tst	r5, r3
 8000300:	d000      	beq.n	8000304 <__aeabi_dmul+0xa8>
 8000302:	e229      	b.n	8000758 <__aeabi_dmul+0x4fc>
 8000304:	2390      	movs	r3, #144	@ 0x90
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	421d      	tst	r5, r3
 800030a:	d100      	bne.n	800030e <__aeabi_dmul+0xb2>
 800030c:	e24d      	b.n	80007aa <__aeabi_dmul+0x54e>
 800030e:	2300      	movs	r3, #0
 8000310:	2480      	movs	r4, #128	@ 0x80
 8000312:	4699      	mov	r9, r3
 8000314:	0324      	lsls	r4, r4, #12
 8000316:	4ba8      	ldr	r3, [pc, #672]	@ (80005b8 <__aeabi_dmul+0x35c>)
 8000318:	0010      	movs	r0, r2
 800031a:	464a      	mov	r2, r9
 800031c:	051b      	lsls	r3, r3, #20
 800031e:	4323      	orrs	r3, r4
 8000320:	07d2      	lsls	r2, r2, #31
 8000322:	4313      	orrs	r3, r2
 8000324:	0019      	movs	r1, r3
 8000326:	b005      	add	sp, #20
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	46bb      	mov	fp, r7
 800032c:	46b2      	mov	sl, r6
 800032e:	46a9      	mov	r9, r5
 8000330:	46a0      	mov	r8, r4
 8000332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000334:	4652      	mov	r2, sl
 8000336:	4302      	orrs	r2, r0
 8000338:	4690      	mov	r8, r2
 800033a:	d000      	beq.n	800033e <__aeabi_dmul+0xe2>
 800033c:	e1ac      	b.n	8000698 <__aeabi_dmul+0x43c>
 800033e:	469b      	mov	fp, r3
 8000340:	2302      	movs	r3, #2
 8000342:	4692      	mov	sl, r2
 8000344:	2508      	movs	r5, #8
 8000346:	9302      	str	r3, [sp, #8]
 8000348:	e7ae      	b.n	80002a8 <__aeabi_dmul+0x4c>
 800034a:	9b00      	ldr	r3, [sp, #0]
 800034c:	46a2      	mov	sl, r4
 800034e:	4699      	mov	r9, r3
 8000350:	9b01      	ldr	r3, [sp, #4]
 8000352:	4698      	mov	r8, r3
 8000354:	9b02      	ldr	r3, [sp, #8]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d100      	bne.n	800035c <__aeabi_dmul+0x100>
 800035a:	e1ca      	b.n	80006f2 <__aeabi_dmul+0x496>
 800035c:	2b03      	cmp	r3, #3
 800035e:	d100      	bne.n	8000362 <__aeabi_dmul+0x106>
 8000360:	e192      	b.n	8000688 <__aeabi_dmul+0x42c>
 8000362:	2b01      	cmp	r3, #1
 8000364:	d110      	bne.n	8000388 <__aeabi_dmul+0x12c>
 8000366:	2300      	movs	r3, #0
 8000368:	2400      	movs	r4, #0
 800036a:	2200      	movs	r2, #0
 800036c:	e7d4      	b.n	8000318 <__aeabi_dmul+0xbc>
 800036e:	2201      	movs	r2, #1
 8000370:	087b      	lsrs	r3, r7, #1
 8000372:	403a      	ands	r2, r7
 8000374:	4313      	orrs	r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	07d2      	lsls	r2, r2, #31
 800037a:	4313      	orrs	r3, r2
 800037c:	4698      	mov	r8, r3
 800037e:	4653      	mov	r3, sl
 8000380:	085b      	lsrs	r3, r3, #1
 8000382:	469a      	mov	sl, r3
 8000384:	9b03      	ldr	r3, [sp, #12]
 8000386:	4699      	mov	r9, r3
 8000388:	465b      	mov	r3, fp
 800038a:	1c58      	adds	r0, r3, #1
 800038c:	2380      	movs	r3, #128	@ 0x80
 800038e:	00db      	lsls	r3, r3, #3
 8000390:	445b      	add	r3, fp
 8000392:	2b00      	cmp	r3, #0
 8000394:	dc00      	bgt.n	8000398 <__aeabi_dmul+0x13c>
 8000396:	e1b1      	b.n	80006fc <__aeabi_dmul+0x4a0>
 8000398:	4642      	mov	r2, r8
 800039a:	0752      	lsls	r2, r2, #29
 800039c:	d00b      	beq.n	80003b6 <__aeabi_dmul+0x15a>
 800039e:	220f      	movs	r2, #15
 80003a0:	4641      	mov	r1, r8
 80003a2:	400a      	ands	r2, r1
 80003a4:	2a04      	cmp	r2, #4
 80003a6:	d006      	beq.n	80003b6 <__aeabi_dmul+0x15a>
 80003a8:	4642      	mov	r2, r8
 80003aa:	1d11      	adds	r1, r2, #4
 80003ac:	4541      	cmp	r1, r8
 80003ae:	4192      	sbcs	r2, r2
 80003b0:	4688      	mov	r8, r1
 80003b2:	4252      	negs	r2, r2
 80003b4:	4492      	add	sl, r2
 80003b6:	4652      	mov	r2, sl
 80003b8:	01d2      	lsls	r2, r2, #7
 80003ba:	d506      	bpl.n	80003ca <__aeabi_dmul+0x16e>
 80003bc:	4652      	mov	r2, sl
 80003be:	4b80      	ldr	r3, [pc, #512]	@ (80005c0 <__aeabi_dmul+0x364>)
 80003c0:	401a      	ands	r2, r3
 80003c2:	2380      	movs	r3, #128	@ 0x80
 80003c4:	4692      	mov	sl, r2
 80003c6:	00db      	lsls	r3, r3, #3
 80003c8:	18c3      	adds	r3, r0, r3
 80003ca:	4a7e      	ldr	r2, [pc, #504]	@ (80005c4 <__aeabi_dmul+0x368>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	dd00      	ble.n	80003d2 <__aeabi_dmul+0x176>
 80003d0:	e18f      	b.n	80006f2 <__aeabi_dmul+0x496>
 80003d2:	4642      	mov	r2, r8
 80003d4:	08d1      	lsrs	r1, r2, #3
 80003d6:	4652      	mov	r2, sl
 80003d8:	0752      	lsls	r2, r2, #29
 80003da:	430a      	orrs	r2, r1
 80003dc:	4651      	mov	r1, sl
 80003de:	055b      	lsls	r3, r3, #21
 80003e0:	024c      	lsls	r4, r1, #9
 80003e2:	0b24      	lsrs	r4, r4, #12
 80003e4:	0d5b      	lsrs	r3, r3, #21
 80003e6:	e797      	b.n	8000318 <__aeabi_dmul+0xbc>
 80003e8:	4b73      	ldr	r3, [pc, #460]	@ (80005b8 <__aeabi_dmul+0x35c>)
 80003ea:	4326      	orrs	r6, r4
 80003ec:	469c      	mov	ip, r3
 80003ee:	44e3      	add	fp, ip
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d100      	bne.n	80003f6 <__aeabi_dmul+0x19a>
 80003f4:	e16f      	b.n	80006d6 <__aeabi_dmul+0x47a>
 80003f6:	2303      	movs	r3, #3
 80003f8:	4649      	mov	r1, r9
 80003fa:	431d      	orrs	r5, r3
 80003fc:	9b00      	ldr	r3, [sp, #0]
 80003fe:	4059      	eors	r1, r3
 8000400:	b2cb      	uxtb	r3, r1
 8000402:	9303      	str	r3, [sp, #12]
 8000404:	2d0a      	cmp	r5, #10
 8000406:	dd00      	ble.n	800040a <__aeabi_dmul+0x1ae>
 8000408:	e133      	b.n	8000672 <__aeabi_dmul+0x416>
 800040a:	2301      	movs	r3, #1
 800040c:	40ab      	lsls	r3, r5
 800040e:	001d      	movs	r5, r3
 8000410:	2303      	movs	r3, #3
 8000412:	9302      	str	r3, [sp, #8]
 8000414:	2288      	movs	r2, #136	@ 0x88
 8000416:	422a      	tst	r2, r5
 8000418:	d197      	bne.n	800034a <__aeabi_dmul+0xee>
 800041a:	4642      	mov	r2, r8
 800041c:	4643      	mov	r3, r8
 800041e:	0412      	lsls	r2, r2, #16
 8000420:	0c12      	lsrs	r2, r2, #16
 8000422:	0016      	movs	r6, r2
 8000424:	9801      	ldr	r0, [sp, #4]
 8000426:	0c1d      	lsrs	r5, r3, #16
 8000428:	0c03      	lsrs	r3, r0, #16
 800042a:	0400      	lsls	r0, r0, #16
 800042c:	0c00      	lsrs	r0, r0, #16
 800042e:	4346      	muls	r6, r0
 8000430:	46b4      	mov	ip, r6
 8000432:	001e      	movs	r6, r3
 8000434:	436e      	muls	r6, r5
 8000436:	9600      	str	r6, [sp, #0]
 8000438:	0016      	movs	r6, r2
 800043a:	0007      	movs	r7, r0
 800043c:	435e      	muls	r6, r3
 800043e:	4661      	mov	r1, ip
 8000440:	46b0      	mov	r8, r6
 8000442:	436f      	muls	r7, r5
 8000444:	0c0e      	lsrs	r6, r1, #16
 8000446:	44b8      	add	r8, r7
 8000448:	4446      	add	r6, r8
 800044a:	42b7      	cmp	r7, r6
 800044c:	d905      	bls.n	800045a <__aeabi_dmul+0x1fe>
 800044e:	2180      	movs	r1, #128	@ 0x80
 8000450:	0249      	lsls	r1, r1, #9
 8000452:	4688      	mov	r8, r1
 8000454:	9f00      	ldr	r7, [sp, #0]
 8000456:	4447      	add	r7, r8
 8000458:	9700      	str	r7, [sp, #0]
 800045a:	4661      	mov	r1, ip
 800045c:	0409      	lsls	r1, r1, #16
 800045e:	0c09      	lsrs	r1, r1, #16
 8000460:	0c37      	lsrs	r7, r6, #16
 8000462:	0436      	lsls	r6, r6, #16
 8000464:	468c      	mov	ip, r1
 8000466:	0031      	movs	r1, r6
 8000468:	4461      	add	r1, ip
 800046a:	9101      	str	r1, [sp, #4]
 800046c:	0011      	movs	r1, r2
 800046e:	0c26      	lsrs	r6, r4, #16
 8000470:	0424      	lsls	r4, r4, #16
 8000472:	0c24      	lsrs	r4, r4, #16
 8000474:	4361      	muls	r1, r4
 8000476:	468c      	mov	ip, r1
 8000478:	0021      	movs	r1, r4
 800047a:	4369      	muls	r1, r5
 800047c:	4689      	mov	r9, r1
 800047e:	4661      	mov	r1, ip
 8000480:	0c09      	lsrs	r1, r1, #16
 8000482:	4688      	mov	r8, r1
 8000484:	4372      	muls	r2, r6
 8000486:	444a      	add	r2, r9
 8000488:	4442      	add	r2, r8
 800048a:	4375      	muls	r5, r6
 800048c:	4591      	cmp	r9, r2
 800048e:	d903      	bls.n	8000498 <__aeabi_dmul+0x23c>
 8000490:	2180      	movs	r1, #128	@ 0x80
 8000492:	0249      	lsls	r1, r1, #9
 8000494:	4688      	mov	r8, r1
 8000496:	4445      	add	r5, r8
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	4688      	mov	r8, r1
 800049c:	4661      	mov	r1, ip
 800049e:	0409      	lsls	r1, r1, #16
 80004a0:	0c09      	lsrs	r1, r1, #16
 80004a2:	468c      	mov	ip, r1
 80004a4:	0412      	lsls	r2, r2, #16
 80004a6:	4462      	add	r2, ip
 80004a8:	18b9      	adds	r1, r7, r2
 80004aa:	9102      	str	r1, [sp, #8]
 80004ac:	4651      	mov	r1, sl
 80004ae:	0c09      	lsrs	r1, r1, #16
 80004b0:	468c      	mov	ip, r1
 80004b2:	4651      	mov	r1, sl
 80004b4:	040f      	lsls	r7, r1, #16
 80004b6:	0c3f      	lsrs	r7, r7, #16
 80004b8:	0039      	movs	r1, r7
 80004ba:	4341      	muls	r1, r0
 80004bc:	4445      	add	r5, r8
 80004be:	4688      	mov	r8, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	4341      	muls	r1, r0
 80004c4:	468a      	mov	sl, r1
 80004c6:	4641      	mov	r1, r8
 80004c8:	4660      	mov	r0, ip
 80004ca:	0c09      	lsrs	r1, r1, #16
 80004cc:	4689      	mov	r9, r1
 80004ce:	4358      	muls	r0, r3
 80004d0:	437b      	muls	r3, r7
 80004d2:	4453      	add	r3, sl
 80004d4:	444b      	add	r3, r9
 80004d6:	459a      	cmp	sl, r3
 80004d8:	d903      	bls.n	80004e2 <__aeabi_dmul+0x286>
 80004da:	2180      	movs	r1, #128	@ 0x80
 80004dc:	0249      	lsls	r1, r1, #9
 80004de:	4689      	mov	r9, r1
 80004e0:	4448      	add	r0, r9
 80004e2:	0c19      	lsrs	r1, r3, #16
 80004e4:	4689      	mov	r9, r1
 80004e6:	4641      	mov	r1, r8
 80004e8:	0409      	lsls	r1, r1, #16
 80004ea:	0c09      	lsrs	r1, r1, #16
 80004ec:	4688      	mov	r8, r1
 80004ee:	0039      	movs	r1, r7
 80004f0:	4361      	muls	r1, r4
 80004f2:	041b      	lsls	r3, r3, #16
 80004f4:	4443      	add	r3, r8
 80004f6:	4688      	mov	r8, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	434c      	muls	r4, r1
 80004fc:	4371      	muls	r1, r6
 80004fe:	468c      	mov	ip, r1
 8000500:	4641      	mov	r1, r8
 8000502:	4377      	muls	r7, r6
 8000504:	0c0e      	lsrs	r6, r1, #16
 8000506:	193f      	adds	r7, r7, r4
 8000508:	19f6      	adds	r6, r6, r7
 800050a:	4448      	add	r0, r9
 800050c:	42b4      	cmp	r4, r6
 800050e:	d903      	bls.n	8000518 <__aeabi_dmul+0x2bc>
 8000510:	2180      	movs	r1, #128	@ 0x80
 8000512:	0249      	lsls	r1, r1, #9
 8000514:	4689      	mov	r9, r1
 8000516:	44cc      	add	ip, r9
 8000518:	9902      	ldr	r1, [sp, #8]
 800051a:	9f00      	ldr	r7, [sp, #0]
 800051c:	4689      	mov	r9, r1
 800051e:	0431      	lsls	r1, r6, #16
 8000520:	444f      	add	r7, r9
 8000522:	4689      	mov	r9, r1
 8000524:	4641      	mov	r1, r8
 8000526:	4297      	cmp	r7, r2
 8000528:	4192      	sbcs	r2, r2
 800052a:	040c      	lsls	r4, r1, #16
 800052c:	0c24      	lsrs	r4, r4, #16
 800052e:	444c      	add	r4, r9
 8000530:	18ff      	adds	r7, r7, r3
 8000532:	4252      	negs	r2, r2
 8000534:	1964      	adds	r4, r4, r5
 8000536:	18a1      	adds	r1, r4, r2
 8000538:	429f      	cmp	r7, r3
 800053a:	419b      	sbcs	r3, r3
 800053c:	4688      	mov	r8, r1
 800053e:	4682      	mov	sl, r0
 8000540:	425b      	negs	r3, r3
 8000542:	4699      	mov	r9, r3
 8000544:	4590      	cmp	r8, r2
 8000546:	4192      	sbcs	r2, r2
 8000548:	42ac      	cmp	r4, r5
 800054a:	41a4      	sbcs	r4, r4
 800054c:	44c2      	add	sl, r8
 800054e:	44d1      	add	r9, sl
 8000550:	4252      	negs	r2, r2
 8000552:	4264      	negs	r4, r4
 8000554:	4314      	orrs	r4, r2
 8000556:	4599      	cmp	r9, r3
 8000558:	419b      	sbcs	r3, r3
 800055a:	4582      	cmp	sl, r0
 800055c:	4192      	sbcs	r2, r2
 800055e:	425b      	negs	r3, r3
 8000560:	4252      	negs	r2, r2
 8000562:	4313      	orrs	r3, r2
 8000564:	464a      	mov	r2, r9
 8000566:	0c36      	lsrs	r6, r6, #16
 8000568:	19a4      	adds	r4, r4, r6
 800056a:	18e3      	adds	r3, r4, r3
 800056c:	4463      	add	r3, ip
 800056e:	025b      	lsls	r3, r3, #9
 8000570:	0dd2      	lsrs	r2, r2, #23
 8000572:	431a      	orrs	r2, r3
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	4692      	mov	sl, r2
 8000578:	027a      	lsls	r2, r7, #9
 800057a:	430a      	orrs	r2, r1
 800057c:	1e50      	subs	r0, r2, #1
 800057e:	4182      	sbcs	r2, r0
 8000580:	0dff      	lsrs	r7, r7, #23
 8000582:	4317      	orrs	r7, r2
 8000584:	464a      	mov	r2, r9
 8000586:	0252      	lsls	r2, r2, #9
 8000588:	4317      	orrs	r7, r2
 800058a:	46b8      	mov	r8, r7
 800058c:	01db      	lsls	r3, r3, #7
 800058e:	d500      	bpl.n	8000592 <__aeabi_dmul+0x336>
 8000590:	e6ed      	b.n	800036e <__aeabi_dmul+0x112>
 8000592:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <__aeabi_dmul+0x36c>)
 8000594:	9a03      	ldr	r2, [sp, #12]
 8000596:	445b      	add	r3, fp
 8000598:	4691      	mov	r9, r2
 800059a:	2b00      	cmp	r3, #0
 800059c:	dc00      	bgt.n	80005a0 <__aeabi_dmul+0x344>
 800059e:	e0ac      	b.n	80006fa <__aeabi_dmul+0x49e>
 80005a0:	003a      	movs	r2, r7
 80005a2:	0752      	lsls	r2, r2, #29
 80005a4:	d100      	bne.n	80005a8 <__aeabi_dmul+0x34c>
 80005a6:	e710      	b.n	80003ca <__aeabi_dmul+0x16e>
 80005a8:	220f      	movs	r2, #15
 80005aa:	4658      	mov	r0, fp
 80005ac:	403a      	ands	r2, r7
 80005ae:	2a04      	cmp	r2, #4
 80005b0:	d000      	beq.n	80005b4 <__aeabi_dmul+0x358>
 80005b2:	e6f9      	b.n	80003a8 <__aeabi_dmul+0x14c>
 80005b4:	e709      	b.n	80003ca <__aeabi_dmul+0x16e>
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	000007ff 	.word	0x000007ff
 80005bc:	fffffc01 	.word	0xfffffc01
 80005c0:	feffffff 	.word	0xfeffffff
 80005c4:	000007fe 	.word	0x000007fe
 80005c8:	000003ff 	.word	0x000003ff
 80005cc:	0022      	movs	r2, r4
 80005ce:	4332      	orrs	r2, r6
 80005d0:	d06f      	beq.n	80006b2 <__aeabi_dmul+0x456>
 80005d2:	2c00      	cmp	r4, #0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_dmul+0x37c>
 80005d6:	e0c2      	b.n	800075e <__aeabi_dmul+0x502>
 80005d8:	0020      	movs	r0, r4
 80005da:	f000 fdcd 	bl	8001178 <__clzsi2>
 80005de:	0002      	movs	r2, r0
 80005e0:	0003      	movs	r3, r0
 80005e2:	3a0b      	subs	r2, #11
 80005e4:	201d      	movs	r0, #29
 80005e6:	1a82      	subs	r2, r0, r2
 80005e8:	0030      	movs	r0, r6
 80005ea:	0019      	movs	r1, r3
 80005ec:	40d0      	lsrs	r0, r2
 80005ee:	3908      	subs	r1, #8
 80005f0:	408c      	lsls	r4, r1
 80005f2:	0002      	movs	r2, r0
 80005f4:	4322      	orrs	r2, r4
 80005f6:	0034      	movs	r4, r6
 80005f8:	408c      	lsls	r4, r1
 80005fa:	4659      	mov	r1, fp
 80005fc:	1acb      	subs	r3, r1, r3
 80005fe:	4986      	ldr	r1, [pc, #536]	@ (8000818 <__aeabi_dmul+0x5bc>)
 8000600:	468b      	mov	fp, r1
 8000602:	449b      	add	fp, r3
 8000604:	2d0a      	cmp	r5, #10
 8000606:	dd00      	ble.n	800060a <__aeabi_dmul+0x3ae>
 8000608:	e6a4      	b.n	8000354 <__aeabi_dmul+0xf8>
 800060a:	4649      	mov	r1, r9
 800060c:	9b00      	ldr	r3, [sp, #0]
 800060e:	9401      	str	r4, [sp, #4]
 8000610:	4059      	eors	r1, r3
 8000612:	b2cb      	uxtb	r3, r1
 8000614:	0014      	movs	r4, r2
 8000616:	2000      	movs	r0, #0
 8000618:	9303      	str	r3, [sp, #12]
 800061a:	2d02      	cmp	r5, #2
 800061c:	dd00      	ble.n	8000620 <__aeabi_dmul+0x3c4>
 800061e:	e667      	b.n	80002f0 <__aeabi_dmul+0x94>
 8000620:	e6fb      	b.n	800041a <__aeabi_dmul+0x1be>
 8000622:	4653      	mov	r3, sl
 8000624:	4303      	orrs	r3, r0
 8000626:	4698      	mov	r8, r3
 8000628:	d03c      	beq.n	80006a4 <__aeabi_dmul+0x448>
 800062a:	4653      	mov	r3, sl
 800062c:	2b00      	cmp	r3, #0
 800062e:	d100      	bne.n	8000632 <__aeabi_dmul+0x3d6>
 8000630:	e0a3      	b.n	800077a <__aeabi_dmul+0x51e>
 8000632:	4650      	mov	r0, sl
 8000634:	f000 fda0 	bl	8001178 <__clzsi2>
 8000638:	230b      	movs	r3, #11
 800063a:	425b      	negs	r3, r3
 800063c:	469c      	mov	ip, r3
 800063e:	0002      	movs	r2, r0
 8000640:	4484      	add	ip, r0
 8000642:	0011      	movs	r1, r2
 8000644:	4650      	mov	r0, sl
 8000646:	3908      	subs	r1, #8
 8000648:	4088      	lsls	r0, r1
 800064a:	231d      	movs	r3, #29
 800064c:	4680      	mov	r8, r0
 800064e:	4660      	mov	r0, ip
 8000650:	1a1b      	subs	r3, r3, r0
 8000652:	0020      	movs	r0, r4
 8000654:	40d8      	lsrs	r0, r3
 8000656:	0003      	movs	r3, r0
 8000658:	4640      	mov	r0, r8
 800065a:	4303      	orrs	r3, r0
 800065c:	469a      	mov	sl, r3
 800065e:	0023      	movs	r3, r4
 8000660:	408b      	lsls	r3, r1
 8000662:	4698      	mov	r8, r3
 8000664:	4b6c      	ldr	r3, [pc, #432]	@ (8000818 <__aeabi_dmul+0x5bc>)
 8000666:	2500      	movs	r5, #0
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	469b      	mov	fp, r3
 800066c:	2300      	movs	r3, #0
 800066e:	9302      	str	r3, [sp, #8]
 8000670:	e61a      	b.n	80002a8 <__aeabi_dmul+0x4c>
 8000672:	2d0f      	cmp	r5, #15
 8000674:	d000      	beq.n	8000678 <__aeabi_dmul+0x41c>
 8000676:	e0c9      	b.n	800080c <__aeabi_dmul+0x5b0>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	4652      	mov	r2, sl
 800067c:	031b      	lsls	r3, r3, #12
 800067e:	421a      	tst	r2, r3
 8000680:	d002      	beq.n	8000688 <__aeabi_dmul+0x42c>
 8000682:	421c      	tst	r4, r3
 8000684:	d100      	bne.n	8000688 <__aeabi_dmul+0x42c>
 8000686:	e092      	b.n	80007ae <__aeabi_dmul+0x552>
 8000688:	2480      	movs	r4, #128	@ 0x80
 800068a:	4653      	mov	r3, sl
 800068c:	0324      	lsls	r4, r4, #12
 800068e:	431c      	orrs	r4, r3
 8000690:	0324      	lsls	r4, r4, #12
 8000692:	4642      	mov	r2, r8
 8000694:	0b24      	lsrs	r4, r4, #12
 8000696:	e63e      	b.n	8000316 <__aeabi_dmul+0xba>
 8000698:	469b      	mov	fp, r3
 800069a:	2303      	movs	r3, #3
 800069c:	4680      	mov	r8, r0
 800069e:	250c      	movs	r5, #12
 80006a0:	9302      	str	r3, [sp, #8]
 80006a2:	e601      	b.n	80002a8 <__aeabi_dmul+0x4c>
 80006a4:	2300      	movs	r3, #0
 80006a6:	469a      	mov	sl, r3
 80006a8:	469b      	mov	fp, r3
 80006aa:	3301      	adds	r3, #1
 80006ac:	2504      	movs	r5, #4
 80006ae:	9302      	str	r3, [sp, #8]
 80006b0:	e5fa      	b.n	80002a8 <__aeabi_dmul+0x4c>
 80006b2:	2101      	movs	r1, #1
 80006b4:	430d      	orrs	r5, r1
 80006b6:	2d0a      	cmp	r5, #10
 80006b8:	dd00      	ble.n	80006bc <__aeabi_dmul+0x460>
 80006ba:	e64b      	b.n	8000354 <__aeabi_dmul+0xf8>
 80006bc:	4649      	mov	r1, r9
 80006be:	9800      	ldr	r0, [sp, #0]
 80006c0:	4041      	eors	r1, r0
 80006c2:	b2c9      	uxtb	r1, r1
 80006c4:	9103      	str	r1, [sp, #12]
 80006c6:	2d02      	cmp	r5, #2
 80006c8:	dc00      	bgt.n	80006cc <__aeabi_dmul+0x470>
 80006ca:	e096      	b.n	80007fa <__aeabi_dmul+0x59e>
 80006cc:	2300      	movs	r3, #0
 80006ce:	2400      	movs	r4, #0
 80006d0:	2001      	movs	r0, #1
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	e60c      	b.n	80002f0 <__aeabi_dmul+0x94>
 80006d6:	4649      	mov	r1, r9
 80006d8:	2302      	movs	r3, #2
 80006da:	9a00      	ldr	r2, [sp, #0]
 80006dc:	432b      	orrs	r3, r5
 80006de:	4051      	eors	r1, r2
 80006e0:	b2ca      	uxtb	r2, r1
 80006e2:	9203      	str	r2, [sp, #12]
 80006e4:	2b0a      	cmp	r3, #10
 80006e6:	dd00      	ble.n	80006ea <__aeabi_dmul+0x48e>
 80006e8:	e634      	b.n	8000354 <__aeabi_dmul+0xf8>
 80006ea:	2d00      	cmp	r5, #0
 80006ec:	d157      	bne.n	800079e <__aeabi_dmul+0x542>
 80006ee:	9b03      	ldr	r3, [sp, #12]
 80006f0:	4699      	mov	r9, r3
 80006f2:	2400      	movs	r4, #0
 80006f4:	2200      	movs	r2, #0
 80006f6:	4b49      	ldr	r3, [pc, #292]	@ (800081c <__aeabi_dmul+0x5c0>)
 80006f8:	e60e      	b.n	8000318 <__aeabi_dmul+0xbc>
 80006fa:	4658      	mov	r0, fp
 80006fc:	2101      	movs	r1, #1
 80006fe:	1ac9      	subs	r1, r1, r3
 8000700:	2938      	cmp	r1, #56	@ 0x38
 8000702:	dd00      	ble.n	8000706 <__aeabi_dmul+0x4aa>
 8000704:	e62f      	b.n	8000366 <__aeabi_dmul+0x10a>
 8000706:	291f      	cmp	r1, #31
 8000708:	dd56      	ble.n	80007b8 <__aeabi_dmul+0x55c>
 800070a:	221f      	movs	r2, #31
 800070c:	4654      	mov	r4, sl
 800070e:	4252      	negs	r2, r2
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	40dc      	lsrs	r4, r3
 8000714:	2920      	cmp	r1, #32
 8000716:	d007      	beq.n	8000728 <__aeabi_dmul+0x4cc>
 8000718:	4b41      	ldr	r3, [pc, #260]	@ (8000820 <__aeabi_dmul+0x5c4>)
 800071a:	4642      	mov	r2, r8
 800071c:	469c      	mov	ip, r3
 800071e:	4653      	mov	r3, sl
 8000720:	4460      	add	r0, ip
 8000722:	4083      	lsls	r3, r0
 8000724:	431a      	orrs	r2, r3
 8000726:	4690      	mov	r8, r2
 8000728:	4642      	mov	r2, r8
 800072a:	2107      	movs	r1, #7
 800072c:	1e53      	subs	r3, r2, #1
 800072e:	419a      	sbcs	r2, r3
 8000730:	000b      	movs	r3, r1
 8000732:	4322      	orrs	r2, r4
 8000734:	4013      	ands	r3, r2
 8000736:	2400      	movs	r4, #0
 8000738:	4211      	tst	r1, r2
 800073a:	d009      	beq.n	8000750 <__aeabi_dmul+0x4f4>
 800073c:	230f      	movs	r3, #15
 800073e:	4013      	ands	r3, r2
 8000740:	2b04      	cmp	r3, #4
 8000742:	d05d      	beq.n	8000800 <__aeabi_dmul+0x5a4>
 8000744:	1d11      	adds	r1, r2, #4
 8000746:	4291      	cmp	r1, r2
 8000748:	419b      	sbcs	r3, r3
 800074a:	000a      	movs	r2, r1
 800074c:	425b      	negs	r3, r3
 800074e:	075b      	lsls	r3, r3, #29
 8000750:	08d2      	lsrs	r2, r2, #3
 8000752:	431a      	orrs	r2, r3
 8000754:	2300      	movs	r3, #0
 8000756:	e5df      	b.n	8000318 <__aeabi_dmul+0xbc>
 8000758:	9b03      	ldr	r3, [sp, #12]
 800075a:	4699      	mov	r9, r3
 800075c:	e5fa      	b.n	8000354 <__aeabi_dmul+0xf8>
 800075e:	9801      	ldr	r0, [sp, #4]
 8000760:	f000 fd0a 	bl	8001178 <__clzsi2>
 8000764:	0002      	movs	r2, r0
 8000766:	0003      	movs	r3, r0
 8000768:	3215      	adds	r2, #21
 800076a:	3320      	adds	r3, #32
 800076c:	2a1c      	cmp	r2, #28
 800076e:	dc00      	bgt.n	8000772 <__aeabi_dmul+0x516>
 8000770:	e738      	b.n	80005e4 <__aeabi_dmul+0x388>
 8000772:	9a01      	ldr	r2, [sp, #4]
 8000774:	3808      	subs	r0, #8
 8000776:	4082      	lsls	r2, r0
 8000778:	e73f      	b.n	80005fa <__aeabi_dmul+0x39e>
 800077a:	f000 fcfd 	bl	8001178 <__clzsi2>
 800077e:	2315      	movs	r3, #21
 8000780:	469c      	mov	ip, r3
 8000782:	4484      	add	ip, r0
 8000784:	0002      	movs	r2, r0
 8000786:	4663      	mov	r3, ip
 8000788:	3220      	adds	r2, #32
 800078a:	2b1c      	cmp	r3, #28
 800078c:	dc00      	bgt.n	8000790 <__aeabi_dmul+0x534>
 800078e:	e758      	b.n	8000642 <__aeabi_dmul+0x3e6>
 8000790:	2300      	movs	r3, #0
 8000792:	4698      	mov	r8, r3
 8000794:	0023      	movs	r3, r4
 8000796:	3808      	subs	r0, #8
 8000798:	4083      	lsls	r3, r0
 800079a:	469a      	mov	sl, r3
 800079c:	e762      	b.n	8000664 <__aeabi_dmul+0x408>
 800079e:	001d      	movs	r5, r3
 80007a0:	2300      	movs	r3, #0
 80007a2:	2400      	movs	r4, #0
 80007a4:	2002      	movs	r0, #2
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	e5a2      	b.n	80002f0 <__aeabi_dmul+0x94>
 80007aa:	9002      	str	r0, [sp, #8]
 80007ac:	e632      	b.n	8000414 <__aeabi_dmul+0x1b8>
 80007ae:	431c      	orrs	r4, r3
 80007b0:	9b00      	ldr	r3, [sp, #0]
 80007b2:	9a01      	ldr	r2, [sp, #4]
 80007b4:	4699      	mov	r9, r3
 80007b6:	e5ae      	b.n	8000316 <__aeabi_dmul+0xba>
 80007b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <__aeabi_dmul+0x5c8>)
 80007ba:	4652      	mov	r2, sl
 80007bc:	18c3      	adds	r3, r0, r3
 80007be:	4640      	mov	r0, r8
 80007c0:	409a      	lsls	r2, r3
 80007c2:	40c8      	lsrs	r0, r1
 80007c4:	4302      	orrs	r2, r0
 80007c6:	4640      	mov	r0, r8
 80007c8:	4098      	lsls	r0, r3
 80007ca:	0003      	movs	r3, r0
 80007cc:	1e58      	subs	r0, r3, #1
 80007ce:	4183      	sbcs	r3, r0
 80007d0:	4654      	mov	r4, sl
 80007d2:	431a      	orrs	r2, r3
 80007d4:	40cc      	lsrs	r4, r1
 80007d6:	0753      	lsls	r3, r2, #29
 80007d8:	d009      	beq.n	80007ee <__aeabi_dmul+0x592>
 80007da:	230f      	movs	r3, #15
 80007dc:	4013      	ands	r3, r2
 80007de:	2b04      	cmp	r3, #4
 80007e0:	d005      	beq.n	80007ee <__aeabi_dmul+0x592>
 80007e2:	1d13      	adds	r3, r2, #4
 80007e4:	4293      	cmp	r3, r2
 80007e6:	4192      	sbcs	r2, r2
 80007e8:	4252      	negs	r2, r2
 80007ea:	18a4      	adds	r4, r4, r2
 80007ec:	001a      	movs	r2, r3
 80007ee:	0223      	lsls	r3, r4, #8
 80007f0:	d508      	bpl.n	8000804 <__aeabi_dmul+0x5a8>
 80007f2:	2301      	movs	r3, #1
 80007f4:	2400      	movs	r4, #0
 80007f6:	2200      	movs	r2, #0
 80007f8:	e58e      	b.n	8000318 <__aeabi_dmul+0xbc>
 80007fa:	4689      	mov	r9, r1
 80007fc:	2400      	movs	r4, #0
 80007fe:	e58b      	b.n	8000318 <__aeabi_dmul+0xbc>
 8000800:	2300      	movs	r3, #0
 8000802:	e7a5      	b.n	8000750 <__aeabi_dmul+0x4f4>
 8000804:	0763      	lsls	r3, r4, #29
 8000806:	0264      	lsls	r4, r4, #9
 8000808:	0b24      	lsrs	r4, r4, #12
 800080a:	e7a1      	b.n	8000750 <__aeabi_dmul+0x4f4>
 800080c:	9b00      	ldr	r3, [sp, #0]
 800080e:	46a2      	mov	sl, r4
 8000810:	4699      	mov	r9, r3
 8000812:	9b01      	ldr	r3, [sp, #4]
 8000814:	4698      	mov	r8, r3
 8000816:	e737      	b.n	8000688 <__aeabi_dmul+0x42c>
 8000818:	fffffc0d 	.word	0xfffffc0d
 800081c:	000007ff 	.word	0x000007ff
 8000820:	0000043e 	.word	0x0000043e
 8000824:	0000041e 	.word	0x0000041e

08000828 <__aeabi_dsub>:
 8000828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082a:	4657      	mov	r7, sl
 800082c:	464e      	mov	r6, r9
 800082e:	4645      	mov	r5, r8
 8000830:	46de      	mov	lr, fp
 8000832:	b5e0      	push	{r5, r6, r7, lr}
 8000834:	b083      	sub	sp, #12
 8000836:	9000      	str	r0, [sp, #0]
 8000838:	9101      	str	r1, [sp, #4]
 800083a:	030c      	lsls	r4, r1, #12
 800083c:	004d      	lsls	r5, r1, #1
 800083e:	0fce      	lsrs	r6, r1, #31
 8000840:	0a61      	lsrs	r1, r4, #9
 8000842:	9c00      	ldr	r4, [sp, #0]
 8000844:	005f      	lsls	r7, r3, #1
 8000846:	0f64      	lsrs	r4, r4, #29
 8000848:	430c      	orrs	r4, r1
 800084a:	9900      	ldr	r1, [sp, #0]
 800084c:	9200      	str	r2, [sp, #0]
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	00c8      	lsls	r0, r1, #3
 8000852:	0319      	lsls	r1, r3, #12
 8000854:	0d7b      	lsrs	r3, r7, #21
 8000856:	4699      	mov	r9, r3
 8000858:	9b01      	ldr	r3, [sp, #4]
 800085a:	4fcc      	ldr	r7, [pc, #816]	@ (8000b8c <__aeabi_dsub+0x364>)
 800085c:	0fdb      	lsrs	r3, r3, #31
 800085e:	469c      	mov	ip, r3
 8000860:	0a4b      	lsrs	r3, r1, #9
 8000862:	9900      	ldr	r1, [sp, #0]
 8000864:	4680      	mov	r8, r0
 8000866:	0f49      	lsrs	r1, r1, #29
 8000868:	4319      	orrs	r1, r3
 800086a:	9b00      	ldr	r3, [sp, #0]
 800086c:	468b      	mov	fp, r1
 800086e:	00da      	lsls	r2, r3, #3
 8000870:	4692      	mov	sl, r2
 8000872:	0d6d      	lsrs	r5, r5, #21
 8000874:	45b9      	cmp	r9, r7
 8000876:	d100      	bne.n	800087a <__aeabi_dsub+0x52>
 8000878:	e0bf      	b.n	80009fa <__aeabi_dsub+0x1d2>
 800087a:	2301      	movs	r3, #1
 800087c:	4661      	mov	r1, ip
 800087e:	4059      	eors	r1, r3
 8000880:	464b      	mov	r3, r9
 8000882:	468c      	mov	ip, r1
 8000884:	1aeb      	subs	r3, r5, r3
 8000886:	428e      	cmp	r6, r1
 8000888:	d075      	beq.n	8000976 <__aeabi_dsub+0x14e>
 800088a:	2b00      	cmp	r3, #0
 800088c:	dc00      	bgt.n	8000890 <__aeabi_dsub+0x68>
 800088e:	e2a3      	b.n	8000dd8 <__aeabi_dsub+0x5b0>
 8000890:	4649      	mov	r1, r9
 8000892:	2900      	cmp	r1, #0
 8000894:	d100      	bne.n	8000898 <__aeabi_dsub+0x70>
 8000896:	e0ce      	b.n	8000a36 <__aeabi_dsub+0x20e>
 8000898:	42bd      	cmp	r5, r7
 800089a:	d100      	bne.n	800089e <__aeabi_dsub+0x76>
 800089c:	e200      	b.n	8000ca0 <__aeabi_dsub+0x478>
 800089e:	2701      	movs	r7, #1
 80008a0:	2b38      	cmp	r3, #56	@ 0x38
 80008a2:	dc19      	bgt.n	80008d8 <__aeabi_dsub+0xb0>
 80008a4:	2780      	movs	r7, #128	@ 0x80
 80008a6:	4659      	mov	r1, fp
 80008a8:	043f      	lsls	r7, r7, #16
 80008aa:	4339      	orrs	r1, r7
 80008ac:	468b      	mov	fp, r1
 80008ae:	2b1f      	cmp	r3, #31
 80008b0:	dd00      	ble.n	80008b4 <__aeabi_dsub+0x8c>
 80008b2:	e1fa      	b.n	8000caa <__aeabi_dsub+0x482>
 80008b4:	2720      	movs	r7, #32
 80008b6:	1af9      	subs	r1, r7, r3
 80008b8:	468c      	mov	ip, r1
 80008ba:	4659      	mov	r1, fp
 80008bc:	4667      	mov	r7, ip
 80008be:	40b9      	lsls	r1, r7
 80008c0:	000f      	movs	r7, r1
 80008c2:	0011      	movs	r1, r2
 80008c4:	40d9      	lsrs	r1, r3
 80008c6:	430f      	orrs	r7, r1
 80008c8:	4661      	mov	r1, ip
 80008ca:	408a      	lsls	r2, r1
 80008cc:	1e51      	subs	r1, r2, #1
 80008ce:	418a      	sbcs	r2, r1
 80008d0:	4659      	mov	r1, fp
 80008d2:	40d9      	lsrs	r1, r3
 80008d4:	4317      	orrs	r7, r2
 80008d6:	1a64      	subs	r4, r4, r1
 80008d8:	1bc7      	subs	r7, r0, r7
 80008da:	42b8      	cmp	r0, r7
 80008dc:	4180      	sbcs	r0, r0
 80008de:	4240      	negs	r0, r0
 80008e0:	1a24      	subs	r4, r4, r0
 80008e2:	0223      	lsls	r3, r4, #8
 80008e4:	d400      	bmi.n	80008e8 <__aeabi_dsub+0xc0>
 80008e6:	e140      	b.n	8000b6a <__aeabi_dsub+0x342>
 80008e8:	0264      	lsls	r4, r4, #9
 80008ea:	0a64      	lsrs	r4, r4, #9
 80008ec:	2c00      	cmp	r4, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dsub+0xca>
 80008f0:	e154      	b.n	8000b9c <__aeabi_dsub+0x374>
 80008f2:	0020      	movs	r0, r4
 80008f4:	f000 fc40 	bl	8001178 <__clzsi2>
 80008f8:	0003      	movs	r3, r0
 80008fa:	3b08      	subs	r3, #8
 80008fc:	2120      	movs	r1, #32
 80008fe:	0038      	movs	r0, r7
 8000900:	1aca      	subs	r2, r1, r3
 8000902:	40d0      	lsrs	r0, r2
 8000904:	409c      	lsls	r4, r3
 8000906:	0002      	movs	r2, r0
 8000908:	409f      	lsls	r7, r3
 800090a:	4322      	orrs	r2, r4
 800090c:	429d      	cmp	r5, r3
 800090e:	dd00      	ble.n	8000912 <__aeabi_dsub+0xea>
 8000910:	e1a6      	b.n	8000c60 <__aeabi_dsub+0x438>
 8000912:	1b58      	subs	r0, r3, r5
 8000914:	3001      	adds	r0, #1
 8000916:	1a09      	subs	r1, r1, r0
 8000918:	003c      	movs	r4, r7
 800091a:	408f      	lsls	r7, r1
 800091c:	40c4      	lsrs	r4, r0
 800091e:	1e7b      	subs	r3, r7, #1
 8000920:	419f      	sbcs	r7, r3
 8000922:	0013      	movs	r3, r2
 8000924:	408b      	lsls	r3, r1
 8000926:	4327      	orrs	r7, r4
 8000928:	431f      	orrs	r7, r3
 800092a:	40c2      	lsrs	r2, r0
 800092c:	003b      	movs	r3, r7
 800092e:	0014      	movs	r4, r2
 8000930:	2500      	movs	r5, #0
 8000932:	4313      	orrs	r3, r2
 8000934:	d100      	bne.n	8000938 <__aeabi_dsub+0x110>
 8000936:	e1f7      	b.n	8000d28 <__aeabi_dsub+0x500>
 8000938:	077b      	lsls	r3, r7, #29
 800093a:	d100      	bne.n	800093e <__aeabi_dsub+0x116>
 800093c:	e377      	b.n	800102e <__aeabi_dsub+0x806>
 800093e:	230f      	movs	r3, #15
 8000940:	0038      	movs	r0, r7
 8000942:	403b      	ands	r3, r7
 8000944:	2b04      	cmp	r3, #4
 8000946:	d004      	beq.n	8000952 <__aeabi_dsub+0x12a>
 8000948:	1d38      	adds	r0, r7, #4
 800094a:	42b8      	cmp	r0, r7
 800094c:	41bf      	sbcs	r7, r7
 800094e:	427f      	negs	r7, r7
 8000950:	19e4      	adds	r4, r4, r7
 8000952:	0223      	lsls	r3, r4, #8
 8000954:	d400      	bmi.n	8000958 <__aeabi_dsub+0x130>
 8000956:	e368      	b.n	800102a <__aeabi_dsub+0x802>
 8000958:	4b8c      	ldr	r3, [pc, #560]	@ (8000b8c <__aeabi_dsub+0x364>)
 800095a:	3501      	adds	r5, #1
 800095c:	429d      	cmp	r5, r3
 800095e:	d100      	bne.n	8000962 <__aeabi_dsub+0x13a>
 8000960:	e0f4      	b.n	8000b4c <__aeabi_dsub+0x324>
 8000962:	4b8b      	ldr	r3, [pc, #556]	@ (8000b90 <__aeabi_dsub+0x368>)
 8000964:	056d      	lsls	r5, r5, #21
 8000966:	401c      	ands	r4, r3
 8000968:	0d6d      	lsrs	r5, r5, #21
 800096a:	0767      	lsls	r7, r4, #29
 800096c:	08c0      	lsrs	r0, r0, #3
 800096e:	0264      	lsls	r4, r4, #9
 8000970:	4307      	orrs	r7, r0
 8000972:	0b24      	lsrs	r4, r4, #12
 8000974:	e0ec      	b.n	8000b50 <__aeabi_dsub+0x328>
 8000976:	2b00      	cmp	r3, #0
 8000978:	dc00      	bgt.n	800097c <__aeabi_dsub+0x154>
 800097a:	e329      	b.n	8000fd0 <__aeabi_dsub+0x7a8>
 800097c:	4649      	mov	r1, r9
 800097e:	2900      	cmp	r1, #0
 8000980:	d000      	beq.n	8000984 <__aeabi_dsub+0x15c>
 8000982:	e0d6      	b.n	8000b32 <__aeabi_dsub+0x30a>
 8000984:	4659      	mov	r1, fp
 8000986:	4311      	orrs	r1, r2
 8000988:	d100      	bne.n	800098c <__aeabi_dsub+0x164>
 800098a:	e12e      	b.n	8000bea <__aeabi_dsub+0x3c2>
 800098c:	1e59      	subs	r1, r3, #1
 800098e:	2b01      	cmp	r3, #1
 8000990:	d100      	bne.n	8000994 <__aeabi_dsub+0x16c>
 8000992:	e1e6      	b.n	8000d62 <__aeabi_dsub+0x53a>
 8000994:	42bb      	cmp	r3, r7
 8000996:	d100      	bne.n	800099a <__aeabi_dsub+0x172>
 8000998:	e182      	b.n	8000ca0 <__aeabi_dsub+0x478>
 800099a:	2701      	movs	r7, #1
 800099c:	000b      	movs	r3, r1
 800099e:	2938      	cmp	r1, #56	@ 0x38
 80009a0:	dc14      	bgt.n	80009cc <__aeabi_dsub+0x1a4>
 80009a2:	2b1f      	cmp	r3, #31
 80009a4:	dd00      	ble.n	80009a8 <__aeabi_dsub+0x180>
 80009a6:	e23c      	b.n	8000e22 <__aeabi_dsub+0x5fa>
 80009a8:	2720      	movs	r7, #32
 80009aa:	1af9      	subs	r1, r7, r3
 80009ac:	468c      	mov	ip, r1
 80009ae:	4659      	mov	r1, fp
 80009b0:	4667      	mov	r7, ip
 80009b2:	40b9      	lsls	r1, r7
 80009b4:	000f      	movs	r7, r1
 80009b6:	0011      	movs	r1, r2
 80009b8:	40d9      	lsrs	r1, r3
 80009ba:	430f      	orrs	r7, r1
 80009bc:	4661      	mov	r1, ip
 80009be:	408a      	lsls	r2, r1
 80009c0:	1e51      	subs	r1, r2, #1
 80009c2:	418a      	sbcs	r2, r1
 80009c4:	4659      	mov	r1, fp
 80009c6:	40d9      	lsrs	r1, r3
 80009c8:	4317      	orrs	r7, r2
 80009ca:	1864      	adds	r4, r4, r1
 80009cc:	183f      	adds	r7, r7, r0
 80009ce:	4287      	cmp	r7, r0
 80009d0:	4180      	sbcs	r0, r0
 80009d2:	4240      	negs	r0, r0
 80009d4:	1824      	adds	r4, r4, r0
 80009d6:	0223      	lsls	r3, r4, #8
 80009d8:	d400      	bmi.n	80009dc <__aeabi_dsub+0x1b4>
 80009da:	e0c6      	b.n	8000b6a <__aeabi_dsub+0x342>
 80009dc:	4b6b      	ldr	r3, [pc, #428]	@ (8000b8c <__aeabi_dsub+0x364>)
 80009de:	3501      	adds	r5, #1
 80009e0:	429d      	cmp	r5, r3
 80009e2:	d100      	bne.n	80009e6 <__aeabi_dsub+0x1be>
 80009e4:	e0b2      	b.n	8000b4c <__aeabi_dsub+0x324>
 80009e6:	2101      	movs	r1, #1
 80009e8:	4b69      	ldr	r3, [pc, #420]	@ (8000b90 <__aeabi_dsub+0x368>)
 80009ea:	087a      	lsrs	r2, r7, #1
 80009ec:	401c      	ands	r4, r3
 80009ee:	4039      	ands	r1, r7
 80009f0:	430a      	orrs	r2, r1
 80009f2:	07e7      	lsls	r7, r4, #31
 80009f4:	4317      	orrs	r7, r2
 80009f6:	0864      	lsrs	r4, r4, #1
 80009f8:	e79e      	b.n	8000938 <__aeabi_dsub+0x110>
 80009fa:	4b66      	ldr	r3, [pc, #408]	@ (8000b94 <__aeabi_dsub+0x36c>)
 80009fc:	4311      	orrs	r1, r2
 80009fe:	468a      	mov	sl, r1
 8000a00:	18eb      	adds	r3, r5, r3
 8000a02:	2900      	cmp	r1, #0
 8000a04:	d028      	beq.n	8000a58 <__aeabi_dsub+0x230>
 8000a06:	4566      	cmp	r6, ip
 8000a08:	d02c      	beq.n	8000a64 <__aeabi_dsub+0x23c>
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d05b      	beq.n	8000ac6 <__aeabi_dsub+0x29e>
 8000a0e:	2d00      	cmp	r5, #0
 8000a10:	d100      	bne.n	8000a14 <__aeabi_dsub+0x1ec>
 8000a12:	e12c      	b.n	8000c6e <__aeabi_dsub+0x446>
 8000a14:	465b      	mov	r3, fp
 8000a16:	4666      	mov	r6, ip
 8000a18:	075f      	lsls	r7, r3, #29
 8000a1a:	08d2      	lsrs	r2, r2, #3
 8000a1c:	4317      	orrs	r7, r2
 8000a1e:	08dd      	lsrs	r5, r3, #3
 8000a20:	003b      	movs	r3, r7
 8000a22:	432b      	orrs	r3, r5
 8000a24:	d100      	bne.n	8000a28 <__aeabi_dsub+0x200>
 8000a26:	e0e2      	b.n	8000bee <__aeabi_dsub+0x3c6>
 8000a28:	2480      	movs	r4, #128	@ 0x80
 8000a2a:	0324      	lsls	r4, r4, #12
 8000a2c:	432c      	orrs	r4, r5
 8000a2e:	0324      	lsls	r4, r4, #12
 8000a30:	4d56      	ldr	r5, [pc, #344]	@ (8000b8c <__aeabi_dsub+0x364>)
 8000a32:	0b24      	lsrs	r4, r4, #12
 8000a34:	e08c      	b.n	8000b50 <__aeabi_dsub+0x328>
 8000a36:	4659      	mov	r1, fp
 8000a38:	4311      	orrs	r1, r2
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dsub+0x216>
 8000a3c:	e0d5      	b.n	8000bea <__aeabi_dsub+0x3c2>
 8000a3e:	1e59      	subs	r1, r3, #1
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d100      	bne.n	8000a46 <__aeabi_dsub+0x21e>
 8000a44:	e1b9      	b.n	8000dba <__aeabi_dsub+0x592>
 8000a46:	42bb      	cmp	r3, r7
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dsub+0x224>
 8000a4a:	e1b1      	b.n	8000db0 <__aeabi_dsub+0x588>
 8000a4c:	2701      	movs	r7, #1
 8000a4e:	000b      	movs	r3, r1
 8000a50:	2938      	cmp	r1, #56	@ 0x38
 8000a52:	dd00      	ble.n	8000a56 <__aeabi_dsub+0x22e>
 8000a54:	e740      	b.n	80008d8 <__aeabi_dsub+0xb0>
 8000a56:	e72a      	b.n	80008ae <__aeabi_dsub+0x86>
 8000a58:	4661      	mov	r1, ip
 8000a5a:	2701      	movs	r7, #1
 8000a5c:	4079      	eors	r1, r7
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4566      	cmp	r6, ip
 8000a62:	d1d2      	bne.n	8000a0a <__aeabi_dsub+0x1e2>
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dsub+0x242>
 8000a68:	e0c5      	b.n	8000bf6 <__aeabi_dsub+0x3ce>
 8000a6a:	2d00      	cmp	r5, #0
 8000a6c:	d000      	beq.n	8000a70 <__aeabi_dsub+0x248>
 8000a6e:	e155      	b.n	8000d1c <__aeabi_dsub+0x4f4>
 8000a70:	464b      	mov	r3, r9
 8000a72:	0025      	movs	r5, r4
 8000a74:	4305      	orrs	r5, r0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dsub+0x252>
 8000a78:	e212      	b.n	8000ea0 <__aeabi_dsub+0x678>
 8000a7a:	1e59      	subs	r1, r3, #1
 8000a7c:	468c      	mov	ip, r1
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dsub+0x25c>
 8000a82:	e249      	b.n	8000f18 <__aeabi_dsub+0x6f0>
 8000a84:	4d41      	ldr	r5, [pc, #260]	@ (8000b8c <__aeabi_dsub+0x364>)
 8000a86:	42ab      	cmp	r3, r5
 8000a88:	d100      	bne.n	8000a8c <__aeabi_dsub+0x264>
 8000a8a:	e28f      	b.n	8000fac <__aeabi_dsub+0x784>
 8000a8c:	2701      	movs	r7, #1
 8000a8e:	2938      	cmp	r1, #56	@ 0x38
 8000a90:	dc11      	bgt.n	8000ab6 <__aeabi_dsub+0x28e>
 8000a92:	4663      	mov	r3, ip
 8000a94:	2b1f      	cmp	r3, #31
 8000a96:	dd00      	ble.n	8000a9a <__aeabi_dsub+0x272>
 8000a98:	e25b      	b.n	8000f52 <__aeabi_dsub+0x72a>
 8000a9a:	4661      	mov	r1, ip
 8000a9c:	2320      	movs	r3, #32
 8000a9e:	0027      	movs	r7, r4
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	0005      	movs	r5, r0
 8000aa4:	4098      	lsls	r0, r3
 8000aa6:	409f      	lsls	r7, r3
 8000aa8:	40cd      	lsrs	r5, r1
 8000aaa:	1e43      	subs	r3, r0, #1
 8000aac:	4198      	sbcs	r0, r3
 8000aae:	40cc      	lsrs	r4, r1
 8000ab0:	432f      	orrs	r7, r5
 8000ab2:	4307      	orrs	r7, r0
 8000ab4:	44a3      	add	fp, r4
 8000ab6:	18bf      	adds	r7, r7, r2
 8000ab8:	4297      	cmp	r7, r2
 8000aba:	4192      	sbcs	r2, r2
 8000abc:	4252      	negs	r2, r2
 8000abe:	445a      	add	r2, fp
 8000ac0:	0014      	movs	r4, r2
 8000ac2:	464d      	mov	r5, r9
 8000ac4:	e787      	b.n	80009d6 <__aeabi_dsub+0x1ae>
 8000ac6:	4f34      	ldr	r7, [pc, #208]	@ (8000b98 <__aeabi_dsub+0x370>)
 8000ac8:	1c6b      	adds	r3, r5, #1
 8000aca:	423b      	tst	r3, r7
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dsub+0x2a8>
 8000ace:	e0b6      	b.n	8000c3e <__aeabi_dsub+0x416>
 8000ad0:	4659      	mov	r1, fp
 8000ad2:	0023      	movs	r3, r4
 8000ad4:	4311      	orrs	r1, r2
 8000ad6:	000f      	movs	r7, r1
 8000ad8:	4303      	orrs	r3, r0
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d000      	beq.n	8000ae0 <__aeabi_dsub+0x2b8>
 8000ade:	e126      	b.n	8000d2e <__aeabi_dsub+0x506>
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_dsub+0x2be>
 8000ae4:	e1c0      	b.n	8000e68 <__aeabi_dsub+0x640>
 8000ae6:	2900      	cmp	r1, #0
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dsub+0x2c4>
 8000aea:	e0a1      	b.n	8000c30 <__aeabi_dsub+0x408>
 8000aec:	1a83      	subs	r3, r0, r2
 8000aee:	4698      	mov	r8, r3
 8000af0:	465b      	mov	r3, fp
 8000af2:	4540      	cmp	r0, r8
 8000af4:	41ad      	sbcs	r5, r5
 8000af6:	1ae3      	subs	r3, r4, r3
 8000af8:	426d      	negs	r5, r5
 8000afa:	1b5b      	subs	r3, r3, r5
 8000afc:	2580      	movs	r5, #128	@ 0x80
 8000afe:	042d      	lsls	r5, r5, #16
 8000b00:	422b      	tst	r3, r5
 8000b02:	d100      	bne.n	8000b06 <__aeabi_dsub+0x2de>
 8000b04:	e14b      	b.n	8000d9e <__aeabi_dsub+0x576>
 8000b06:	465b      	mov	r3, fp
 8000b08:	1a10      	subs	r0, r2, r0
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	4192      	sbcs	r2, r2
 8000b0e:	1b1c      	subs	r4, r3, r4
 8000b10:	0007      	movs	r7, r0
 8000b12:	2601      	movs	r6, #1
 8000b14:	4663      	mov	r3, ip
 8000b16:	4252      	negs	r2, r2
 8000b18:	1aa4      	subs	r4, r4, r2
 8000b1a:	4327      	orrs	r7, r4
 8000b1c:	401e      	ands	r6, r3
 8000b1e:	2f00      	cmp	r7, #0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_dsub+0x2fc>
 8000b22:	e142      	b.n	8000daa <__aeabi_dsub+0x582>
 8000b24:	422c      	tst	r4, r5
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dsub+0x302>
 8000b28:	e26d      	b.n	8001006 <__aeabi_dsub+0x7de>
 8000b2a:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <__aeabi_dsub+0x368>)
 8000b2c:	2501      	movs	r5, #1
 8000b2e:	401c      	ands	r4, r3
 8000b30:	e71b      	b.n	800096a <__aeabi_dsub+0x142>
 8000b32:	42bd      	cmp	r5, r7
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dsub+0x310>
 8000b36:	e13b      	b.n	8000db0 <__aeabi_dsub+0x588>
 8000b38:	2701      	movs	r7, #1
 8000b3a:	2b38      	cmp	r3, #56	@ 0x38
 8000b3c:	dd00      	ble.n	8000b40 <__aeabi_dsub+0x318>
 8000b3e:	e745      	b.n	80009cc <__aeabi_dsub+0x1a4>
 8000b40:	2780      	movs	r7, #128	@ 0x80
 8000b42:	4659      	mov	r1, fp
 8000b44:	043f      	lsls	r7, r7, #16
 8000b46:	4339      	orrs	r1, r7
 8000b48:	468b      	mov	fp, r1
 8000b4a:	e72a      	b.n	80009a2 <__aeabi_dsub+0x17a>
 8000b4c:	2400      	movs	r4, #0
 8000b4e:	2700      	movs	r7, #0
 8000b50:	052d      	lsls	r5, r5, #20
 8000b52:	4325      	orrs	r5, r4
 8000b54:	07f6      	lsls	r6, r6, #31
 8000b56:	4335      	orrs	r5, r6
 8000b58:	0038      	movs	r0, r7
 8000b5a:	0029      	movs	r1, r5
 8000b5c:	b003      	add	sp, #12
 8000b5e:	bcf0      	pop	{r4, r5, r6, r7}
 8000b60:	46bb      	mov	fp, r7
 8000b62:	46b2      	mov	sl, r6
 8000b64:	46a9      	mov	r9, r5
 8000b66:	46a0      	mov	r8, r4
 8000b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b6a:	077b      	lsls	r3, r7, #29
 8000b6c:	d004      	beq.n	8000b78 <__aeabi_dsub+0x350>
 8000b6e:	230f      	movs	r3, #15
 8000b70:	403b      	ands	r3, r7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	d000      	beq.n	8000b78 <__aeabi_dsub+0x350>
 8000b76:	e6e7      	b.n	8000948 <__aeabi_dsub+0x120>
 8000b78:	002b      	movs	r3, r5
 8000b7a:	08f8      	lsrs	r0, r7, #3
 8000b7c:	4a03      	ldr	r2, [pc, #12]	@ (8000b8c <__aeabi_dsub+0x364>)
 8000b7e:	0767      	lsls	r7, r4, #29
 8000b80:	4307      	orrs	r7, r0
 8000b82:	08e5      	lsrs	r5, r4, #3
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d100      	bne.n	8000b8a <__aeabi_dsub+0x362>
 8000b88:	e74a      	b.n	8000a20 <__aeabi_dsub+0x1f8>
 8000b8a:	e0a5      	b.n	8000cd8 <__aeabi_dsub+0x4b0>
 8000b8c:	000007ff 	.word	0x000007ff
 8000b90:	ff7fffff 	.word	0xff7fffff
 8000b94:	fffff801 	.word	0xfffff801
 8000b98:	000007fe 	.word	0x000007fe
 8000b9c:	0038      	movs	r0, r7
 8000b9e:	f000 faeb 	bl	8001178 <__clzsi2>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	3318      	adds	r3, #24
 8000ba6:	2b1f      	cmp	r3, #31
 8000ba8:	dc00      	bgt.n	8000bac <__aeabi_dsub+0x384>
 8000baa:	e6a7      	b.n	80008fc <__aeabi_dsub+0xd4>
 8000bac:	003a      	movs	r2, r7
 8000bae:	3808      	subs	r0, #8
 8000bb0:	4082      	lsls	r2, r0
 8000bb2:	429d      	cmp	r5, r3
 8000bb4:	dd00      	ble.n	8000bb8 <__aeabi_dsub+0x390>
 8000bb6:	e08a      	b.n	8000cce <__aeabi_dsub+0x4a6>
 8000bb8:	1b5b      	subs	r3, r3, r5
 8000bba:	1c58      	adds	r0, r3, #1
 8000bbc:	281f      	cmp	r0, #31
 8000bbe:	dc00      	bgt.n	8000bc2 <__aeabi_dsub+0x39a>
 8000bc0:	e1d8      	b.n	8000f74 <__aeabi_dsub+0x74c>
 8000bc2:	0017      	movs	r7, r2
 8000bc4:	3b1f      	subs	r3, #31
 8000bc6:	40df      	lsrs	r7, r3
 8000bc8:	2820      	cmp	r0, #32
 8000bca:	d005      	beq.n	8000bd8 <__aeabi_dsub+0x3b0>
 8000bcc:	2340      	movs	r3, #64	@ 0x40
 8000bce:	1a1b      	subs	r3, r3, r0
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	1e53      	subs	r3, r2, #1
 8000bd4:	419a      	sbcs	r2, r3
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	2500      	movs	r5, #0
 8000bda:	2f00      	cmp	r7, #0
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dsub+0x3b8>
 8000bde:	e0e5      	b.n	8000dac <__aeabi_dsub+0x584>
 8000be0:	077b      	lsls	r3, r7, #29
 8000be2:	d000      	beq.n	8000be6 <__aeabi_dsub+0x3be>
 8000be4:	e6ab      	b.n	800093e <__aeabi_dsub+0x116>
 8000be6:	002c      	movs	r4, r5
 8000be8:	e7c6      	b.n	8000b78 <__aeabi_dsub+0x350>
 8000bea:	08c0      	lsrs	r0, r0, #3
 8000bec:	e7c6      	b.n	8000b7c <__aeabi_dsub+0x354>
 8000bee:	2700      	movs	r7, #0
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	4dd1      	ldr	r5, [pc, #836]	@ (8000f38 <__aeabi_dsub+0x710>)
 8000bf4:	e7ac      	b.n	8000b50 <__aeabi_dsub+0x328>
 8000bf6:	4fd1      	ldr	r7, [pc, #836]	@ (8000f3c <__aeabi_dsub+0x714>)
 8000bf8:	1c6b      	adds	r3, r5, #1
 8000bfa:	423b      	tst	r3, r7
 8000bfc:	d171      	bne.n	8000ce2 <__aeabi_dsub+0x4ba>
 8000bfe:	0023      	movs	r3, r4
 8000c00:	4303      	orrs	r3, r0
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	d000      	beq.n	8000c08 <__aeabi_dsub+0x3e0>
 8000c06:	e14e      	b.n	8000ea6 <__aeabi_dsub+0x67e>
 8000c08:	4657      	mov	r7, sl
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_dsub+0x3e8>
 8000c0e:	e1b5      	b.n	8000f7c <__aeabi_dsub+0x754>
 8000c10:	2f00      	cmp	r7, #0
 8000c12:	d00d      	beq.n	8000c30 <__aeabi_dsub+0x408>
 8000c14:	1883      	adds	r3, r0, r2
 8000c16:	4283      	cmp	r3, r0
 8000c18:	4180      	sbcs	r0, r0
 8000c1a:	445c      	add	r4, fp
 8000c1c:	4240      	negs	r0, r0
 8000c1e:	1824      	adds	r4, r4, r0
 8000c20:	0222      	lsls	r2, r4, #8
 8000c22:	d500      	bpl.n	8000c26 <__aeabi_dsub+0x3fe>
 8000c24:	e1c8      	b.n	8000fb8 <__aeabi_dsub+0x790>
 8000c26:	001f      	movs	r7, r3
 8000c28:	4698      	mov	r8, r3
 8000c2a:	4327      	orrs	r7, r4
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dsub+0x408>
 8000c2e:	e0bc      	b.n	8000daa <__aeabi_dsub+0x582>
 8000c30:	4643      	mov	r3, r8
 8000c32:	0767      	lsls	r7, r4, #29
 8000c34:	08db      	lsrs	r3, r3, #3
 8000c36:	431f      	orrs	r7, r3
 8000c38:	08e5      	lsrs	r5, r4, #3
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e04c      	b.n	8000cd8 <__aeabi_dsub+0x4b0>
 8000c3e:	1a83      	subs	r3, r0, r2
 8000c40:	4698      	mov	r8, r3
 8000c42:	465b      	mov	r3, fp
 8000c44:	4540      	cmp	r0, r8
 8000c46:	41bf      	sbcs	r7, r7
 8000c48:	1ae3      	subs	r3, r4, r3
 8000c4a:	427f      	negs	r7, r7
 8000c4c:	1bdb      	subs	r3, r3, r7
 8000c4e:	021f      	lsls	r7, r3, #8
 8000c50:	d47c      	bmi.n	8000d4c <__aeabi_dsub+0x524>
 8000c52:	4647      	mov	r7, r8
 8000c54:	431f      	orrs	r7, r3
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dsub+0x432>
 8000c58:	e0a6      	b.n	8000da8 <__aeabi_dsub+0x580>
 8000c5a:	001c      	movs	r4, r3
 8000c5c:	4647      	mov	r7, r8
 8000c5e:	e645      	b.n	80008ec <__aeabi_dsub+0xc4>
 8000c60:	4cb7      	ldr	r4, [pc, #732]	@ (8000f40 <__aeabi_dsub+0x718>)
 8000c62:	1aed      	subs	r5, r5, r3
 8000c64:	4014      	ands	r4, r2
 8000c66:	077b      	lsls	r3, r7, #29
 8000c68:	d000      	beq.n	8000c6c <__aeabi_dsub+0x444>
 8000c6a:	e780      	b.n	8000b6e <__aeabi_dsub+0x346>
 8000c6c:	e784      	b.n	8000b78 <__aeabi_dsub+0x350>
 8000c6e:	464b      	mov	r3, r9
 8000c70:	0025      	movs	r5, r4
 8000c72:	4305      	orrs	r5, r0
 8000c74:	d066      	beq.n	8000d44 <__aeabi_dsub+0x51c>
 8000c76:	1e5f      	subs	r7, r3, #1
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_dsub+0x456>
 8000c7c:	e0fc      	b.n	8000e78 <__aeabi_dsub+0x650>
 8000c7e:	4dae      	ldr	r5, [pc, #696]	@ (8000f38 <__aeabi_dsub+0x710>)
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dsub+0x45e>
 8000c84:	e15e      	b.n	8000f44 <__aeabi_dsub+0x71c>
 8000c86:	4666      	mov	r6, ip
 8000c88:	2f38      	cmp	r7, #56	@ 0x38
 8000c8a:	dc00      	bgt.n	8000c8e <__aeabi_dsub+0x466>
 8000c8c:	e0b4      	b.n	8000df8 <__aeabi_dsub+0x5d0>
 8000c8e:	2001      	movs	r0, #1
 8000c90:	1a17      	subs	r7, r2, r0
 8000c92:	42ba      	cmp	r2, r7
 8000c94:	4192      	sbcs	r2, r2
 8000c96:	465b      	mov	r3, fp
 8000c98:	4252      	negs	r2, r2
 8000c9a:	464d      	mov	r5, r9
 8000c9c:	1a9c      	subs	r4, r3, r2
 8000c9e:	e620      	b.n	80008e2 <__aeabi_dsub+0xba>
 8000ca0:	0767      	lsls	r7, r4, #29
 8000ca2:	08c0      	lsrs	r0, r0, #3
 8000ca4:	4307      	orrs	r7, r0
 8000ca6:	08e5      	lsrs	r5, r4, #3
 8000ca8:	e6ba      	b.n	8000a20 <__aeabi_dsub+0x1f8>
 8000caa:	001f      	movs	r7, r3
 8000cac:	4659      	mov	r1, fp
 8000cae:	3f20      	subs	r7, #32
 8000cb0:	40f9      	lsrs	r1, r7
 8000cb2:	000f      	movs	r7, r1
 8000cb4:	2b20      	cmp	r3, #32
 8000cb6:	d005      	beq.n	8000cc4 <__aeabi_dsub+0x49c>
 8000cb8:	2140      	movs	r1, #64	@ 0x40
 8000cba:	1acb      	subs	r3, r1, r3
 8000cbc:	4659      	mov	r1, fp
 8000cbe:	4099      	lsls	r1, r3
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	4692      	mov	sl, r2
 8000cc4:	4653      	mov	r3, sl
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	4193      	sbcs	r3, r2
 8000cca:	431f      	orrs	r7, r3
 8000ccc:	e604      	b.n	80008d8 <__aeabi_dsub+0xb0>
 8000cce:	1aeb      	subs	r3, r5, r3
 8000cd0:	4d9b      	ldr	r5, [pc, #620]	@ (8000f40 <__aeabi_dsub+0x718>)
 8000cd2:	4015      	ands	r5, r2
 8000cd4:	076f      	lsls	r7, r5, #29
 8000cd6:	08ed      	lsrs	r5, r5, #3
 8000cd8:	032c      	lsls	r4, r5, #12
 8000cda:	055d      	lsls	r5, r3, #21
 8000cdc:	0b24      	lsrs	r4, r4, #12
 8000cde:	0d6d      	lsrs	r5, r5, #21
 8000ce0:	e736      	b.n	8000b50 <__aeabi_dsub+0x328>
 8000ce2:	4d95      	ldr	r5, [pc, #596]	@ (8000f38 <__aeabi_dsub+0x710>)
 8000ce4:	42ab      	cmp	r3, r5
 8000ce6:	d100      	bne.n	8000cea <__aeabi_dsub+0x4c2>
 8000ce8:	e0d6      	b.n	8000e98 <__aeabi_dsub+0x670>
 8000cea:	1882      	adds	r2, r0, r2
 8000cec:	0021      	movs	r1, r4
 8000cee:	4282      	cmp	r2, r0
 8000cf0:	4180      	sbcs	r0, r0
 8000cf2:	4459      	add	r1, fp
 8000cf4:	4240      	negs	r0, r0
 8000cf6:	1808      	adds	r0, r1, r0
 8000cf8:	07c7      	lsls	r7, r0, #31
 8000cfa:	0852      	lsrs	r2, r2, #1
 8000cfc:	4317      	orrs	r7, r2
 8000cfe:	0844      	lsrs	r4, r0, #1
 8000d00:	0752      	lsls	r2, r2, #29
 8000d02:	d400      	bmi.n	8000d06 <__aeabi_dsub+0x4de>
 8000d04:	e185      	b.n	8001012 <__aeabi_dsub+0x7ea>
 8000d06:	220f      	movs	r2, #15
 8000d08:	001d      	movs	r5, r3
 8000d0a:	403a      	ands	r2, r7
 8000d0c:	2a04      	cmp	r2, #4
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_dsub+0x4ea>
 8000d10:	e61a      	b.n	8000948 <__aeabi_dsub+0x120>
 8000d12:	08ff      	lsrs	r7, r7, #3
 8000d14:	0764      	lsls	r4, r4, #29
 8000d16:	4327      	orrs	r7, r4
 8000d18:	0905      	lsrs	r5, r0, #4
 8000d1a:	e7dd      	b.n	8000cd8 <__aeabi_dsub+0x4b0>
 8000d1c:	465b      	mov	r3, fp
 8000d1e:	08d2      	lsrs	r2, r2, #3
 8000d20:	075f      	lsls	r7, r3, #29
 8000d22:	4317      	orrs	r7, r2
 8000d24:	08dd      	lsrs	r5, r3, #3
 8000d26:	e67b      	b.n	8000a20 <__aeabi_dsub+0x1f8>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	2400      	movs	r4, #0
 8000d2c:	e710      	b.n	8000b50 <__aeabi_dsub+0x328>
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d000      	beq.n	8000d34 <__aeabi_dsub+0x50c>
 8000d32:	e0d6      	b.n	8000ee2 <__aeabi_dsub+0x6ba>
 8000d34:	2900      	cmp	r1, #0
 8000d36:	d000      	beq.n	8000d3a <__aeabi_dsub+0x512>
 8000d38:	e12f      	b.n	8000f9a <__aeabi_dsub+0x772>
 8000d3a:	2480      	movs	r4, #128	@ 0x80
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	4d7e      	ldr	r5, [pc, #504]	@ (8000f38 <__aeabi_dsub+0x710>)
 8000d40:	0324      	lsls	r4, r4, #12
 8000d42:	e705      	b.n	8000b50 <__aeabi_dsub+0x328>
 8000d44:	4666      	mov	r6, ip
 8000d46:	465c      	mov	r4, fp
 8000d48:	08d0      	lsrs	r0, r2, #3
 8000d4a:	e717      	b.n	8000b7c <__aeabi_dsub+0x354>
 8000d4c:	465b      	mov	r3, fp
 8000d4e:	1a17      	subs	r7, r2, r0
 8000d50:	42ba      	cmp	r2, r7
 8000d52:	4192      	sbcs	r2, r2
 8000d54:	1b1c      	subs	r4, r3, r4
 8000d56:	2601      	movs	r6, #1
 8000d58:	4663      	mov	r3, ip
 8000d5a:	4252      	negs	r2, r2
 8000d5c:	1aa4      	subs	r4, r4, r2
 8000d5e:	401e      	ands	r6, r3
 8000d60:	e5c4      	b.n	80008ec <__aeabi_dsub+0xc4>
 8000d62:	1883      	adds	r3, r0, r2
 8000d64:	4283      	cmp	r3, r0
 8000d66:	4180      	sbcs	r0, r0
 8000d68:	445c      	add	r4, fp
 8000d6a:	4240      	negs	r0, r0
 8000d6c:	1825      	adds	r5, r4, r0
 8000d6e:	022a      	lsls	r2, r5, #8
 8000d70:	d400      	bmi.n	8000d74 <__aeabi_dsub+0x54c>
 8000d72:	e0da      	b.n	8000f2a <__aeabi_dsub+0x702>
 8000d74:	4a72      	ldr	r2, [pc, #456]	@ (8000f40 <__aeabi_dsub+0x718>)
 8000d76:	085b      	lsrs	r3, r3, #1
 8000d78:	4015      	ands	r5, r2
 8000d7a:	07ea      	lsls	r2, r5, #31
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	0869      	lsrs	r1, r5, #1
 8000d80:	075b      	lsls	r3, r3, #29
 8000d82:	d400      	bmi.n	8000d86 <__aeabi_dsub+0x55e>
 8000d84:	e14a      	b.n	800101c <__aeabi_dsub+0x7f4>
 8000d86:	230f      	movs	r3, #15
 8000d88:	4013      	ands	r3, r2
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_dsub+0x568>
 8000d8e:	e0fc      	b.n	8000f8a <__aeabi_dsub+0x762>
 8000d90:	1d17      	adds	r7, r2, #4
 8000d92:	4297      	cmp	r7, r2
 8000d94:	41a4      	sbcs	r4, r4
 8000d96:	4264      	negs	r4, r4
 8000d98:	2502      	movs	r5, #2
 8000d9a:	1864      	adds	r4, r4, r1
 8000d9c:	e6ec      	b.n	8000b78 <__aeabi_dsub+0x350>
 8000d9e:	4647      	mov	r7, r8
 8000da0:	001c      	movs	r4, r3
 8000da2:	431f      	orrs	r7, r3
 8000da4:	d000      	beq.n	8000da8 <__aeabi_dsub+0x580>
 8000da6:	e743      	b.n	8000c30 <__aeabi_dsub+0x408>
 8000da8:	2600      	movs	r6, #0
 8000daa:	2500      	movs	r5, #0
 8000dac:	2400      	movs	r4, #0
 8000dae:	e6cf      	b.n	8000b50 <__aeabi_dsub+0x328>
 8000db0:	08c0      	lsrs	r0, r0, #3
 8000db2:	0767      	lsls	r7, r4, #29
 8000db4:	4307      	orrs	r7, r0
 8000db6:	08e5      	lsrs	r5, r4, #3
 8000db8:	e632      	b.n	8000a20 <__aeabi_dsub+0x1f8>
 8000dba:	1a87      	subs	r7, r0, r2
 8000dbc:	465b      	mov	r3, fp
 8000dbe:	42b8      	cmp	r0, r7
 8000dc0:	4180      	sbcs	r0, r0
 8000dc2:	1ae4      	subs	r4, r4, r3
 8000dc4:	4240      	negs	r0, r0
 8000dc6:	1a24      	subs	r4, r4, r0
 8000dc8:	0223      	lsls	r3, r4, #8
 8000dca:	d428      	bmi.n	8000e1e <__aeabi_dsub+0x5f6>
 8000dcc:	0763      	lsls	r3, r4, #29
 8000dce:	08ff      	lsrs	r7, r7, #3
 8000dd0:	431f      	orrs	r7, r3
 8000dd2:	08e5      	lsrs	r5, r4, #3
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e77f      	b.n	8000cd8 <__aeabi_dsub+0x4b0>
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d100      	bne.n	8000dde <__aeabi_dsub+0x5b6>
 8000ddc:	e673      	b.n	8000ac6 <__aeabi_dsub+0x29e>
 8000dde:	464b      	mov	r3, r9
 8000de0:	1b5f      	subs	r7, r3, r5
 8000de2:	003b      	movs	r3, r7
 8000de4:	2d00      	cmp	r5, #0
 8000de6:	d100      	bne.n	8000dea <__aeabi_dsub+0x5c2>
 8000de8:	e742      	b.n	8000c70 <__aeabi_dsub+0x448>
 8000dea:	2f38      	cmp	r7, #56	@ 0x38
 8000dec:	dd00      	ble.n	8000df0 <__aeabi_dsub+0x5c8>
 8000dee:	e0ec      	b.n	8000fca <__aeabi_dsub+0x7a2>
 8000df0:	2380      	movs	r3, #128	@ 0x80
 8000df2:	000e      	movs	r6, r1
 8000df4:	041b      	lsls	r3, r3, #16
 8000df6:	431c      	orrs	r4, r3
 8000df8:	2f1f      	cmp	r7, #31
 8000dfa:	dc25      	bgt.n	8000e48 <__aeabi_dsub+0x620>
 8000dfc:	2520      	movs	r5, #32
 8000dfe:	0023      	movs	r3, r4
 8000e00:	1bed      	subs	r5, r5, r7
 8000e02:	0001      	movs	r1, r0
 8000e04:	40a8      	lsls	r0, r5
 8000e06:	40ab      	lsls	r3, r5
 8000e08:	40f9      	lsrs	r1, r7
 8000e0a:	1e45      	subs	r5, r0, #1
 8000e0c:	41a8      	sbcs	r0, r5
 8000e0e:	430b      	orrs	r3, r1
 8000e10:	40fc      	lsrs	r4, r7
 8000e12:	4318      	orrs	r0, r3
 8000e14:	465b      	mov	r3, fp
 8000e16:	1b1b      	subs	r3, r3, r4
 8000e18:	469b      	mov	fp, r3
 8000e1a:	e739      	b.n	8000c90 <__aeabi_dsub+0x468>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	2501      	movs	r5, #1
 8000e20:	e562      	b.n	80008e8 <__aeabi_dsub+0xc0>
 8000e22:	001f      	movs	r7, r3
 8000e24:	4659      	mov	r1, fp
 8000e26:	3f20      	subs	r7, #32
 8000e28:	40f9      	lsrs	r1, r7
 8000e2a:	468c      	mov	ip, r1
 8000e2c:	2b20      	cmp	r3, #32
 8000e2e:	d005      	beq.n	8000e3c <__aeabi_dsub+0x614>
 8000e30:	2740      	movs	r7, #64	@ 0x40
 8000e32:	4659      	mov	r1, fp
 8000e34:	1afb      	subs	r3, r7, r3
 8000e36:	4099      	lsls	r1, r3
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	4692      	mov	sl, r2
 8000e3c:	4657      	mov	r7, sl
 8000e3e:	1e7b      	subs	r3, r7, #1
 8000e40:	419f      	sbcs	r7, r3
 8000e42:	4663      	mov	r3, ip
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e5c1      	b.n	80009cc <__aeabi_dsub+0x1a4>
 8000e48:	003b      	movs	r3, r7
 8000e4a:	0025      	movs	r5, r4
 8000e4c:	3b20      	subs	r3, #32
 8000e4e:	40dd      	lsrs	r5, r3
 8000e50:	2f20      	cmp	r7, #32
 8000e52:	d004      	beq.n	8000e5e <__aeabi_dsub+0x636>
 8000e54:	2340      	movs	r3, #64	@ 0x40
 8000e56:	1bdb      	subs	r3, r3, r7
 8000e58:	409c      	lsls	r4, r3
 8000e5a:	4320      	orrs	r0, r4
 8000e5c:	4680      	mov	r8, r0
 8000e5e:	4640      	mov	r0, r8
 8000e60:	1e43      	subs	r3, r0, #1
 8000e62:	4198      	sbcs	r0, r3
 8000e64:	4328      	orrs	r0, r5
 8000e66:	e713      	b.n	8000c90 <__aeabi_dsub+0x468>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	d09d      	beq.n	8000da8 <__aeabi_dsub+0x580>
 8000e6c:	2601      	movs	r6, #1
 8000e6e:	4663      	mov	r3, ip
 8000e70:	465c      	mov	r4, fp
 8000e72:	4690      	mov	r8, r2
 8000e74:	401e      	ands	r6, r3
 8000e76:	e6db      	b.n	8000c30 <__aeabi_dsub+0x408>
 8000e78:	1a17      	subs	r7, r2, r0
 8000e7a:	465b      	mov	r3, fp
 8000e7c:	42ba      	cmp	r2, r7
 8000e7e:	4192      	sbcs	r2, r2
 8000e80:	1b1c      	subs	r4, r3, r4
 8000e82:	4252      	negs	r2, r2
 8000e84:	1aa4      	subs	r4, r4, r2
 8000e86:	0223      	lsls	r3, r4, #8
 8000e88:	d4c8      	bmi.n	8000e1c <__aeabi_dsub+0x5f4>
 8000e8a:	0763      	lsls	r3, r4, #29
 8000e8c:	08ff      	lsrs	r7, r7, #3
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	4666      	mov	r6, ip
 8000e92:	2301      	movs	r3, #1
 8000e94:	08e5      	lsrs	r5, r4, #3
 8000e96:	e71f      	b.n	8000cd8 <__aeabi_dsub+0x4b0>
 8000e98:	001d      	movs	r5, r3
 8000e9a:	2400      	movs	r4, #0
 8000e9c:	2700      	movs	r7, #0
 8000e9e:	e657      	b.n	8000b50 <__aeabi_dsub+0x328>
 8000ea0:	465c      	mov	r4, fp
 8000ea2:	08d0      	lsrs	r0, r2, #3
 8000ea4:	e66a      	b.n	8000b7c <__aeabi_dsub+0x354>
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d100      	bne.n	8000eac <__aeabi_dsub+0x684>
 8000eaa:	e737      	b.n	8000d1c <__aeabi_dsub+0x4f4>
 8000eac:	4653      	mov	r3, sl
 8000eae:	08c0      	lsrs	r0, r0, #3
 8000eb0:	0767      	lsls	r7, r4, #29
 8000eb2:	4307      	orrs	r7, r0
 8000eb4:	08e5      	lsrs	r5, r4, #3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_dsub+0x694>
 8000eba:	e5b1      	b.n	8000a20 <__aeabi_dsub+0x1f8>
 8000ebc:	2380      	movs	r3, #128	@ 0x80
 8000ebe:	031b      	lsls	r3, r3, #12
 8000ec0:	421d      	tst	r5, r3
 8000ec2:	d008      	beq.n	8000ed6 <__aeabi_dsub+0x6ae>
 8000ec4:	4659      	mov	r1, fp
 8000ec6:	08c8      	lsrs	r0, r1, #3
 8000ec8:	4218      	tst	r0, r3
 8000eca:	d104      	bne.n	8000ed6 <__aeabi_dsub+0x6ae>
 8000ecc:	08d2      	lsrs	r2, r2, #3
 8000ece:	0749      	lsls	r1, r1, #29
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	0017      	movs	r7, r2
 8000ed4:	0005      	movs	r5, r0
 8000ed6:	0f7b      	lsrs	r3, r7, #29
 8000ed8:	00ff      	lsls	r7, r7, #3
 8000eda:	08ff      	lsrs	r7, r7, #3
 8000edc:	075b      	lsls	r3, r3, #29
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	e59e      	b.n	8000a20 <__aeabi_dsub+0x1f8>
 8000ee2:	08c0      	lsrs	r0, r0, #3
 8000ee4:	0763      	lsls	r3, r4, #29
 8000ee6:	4318      	orrs	r0, r3
 8000ee8:	08e5      	lsrs	r5, r4, #3
 8000eea:	2900      	cmp	r1, #0
 8000eec:	d053      	beq.n	8000f96 <__aeabi_dsub+0x76e>
 8000eee:	2380      	movs	r3, #128	@ 0x80
 8000ef0:	031b      	lsls	r3, r3, #12
 8000ef2:	421d      	tst	r5, r3
 8000ef4:	d00a      	beq.n	8000f0c <__aeabi_dsub+0x6e4>
 8000ef6:	4659      	mov	r1, fp
 8000ef8:	08cc      	lsrs	r4, r1, #3
 8000efa:	421c      	tst	r4, r3
 8000efc:	d106      	bne.n	8000f0c <__aeabi_dsub+0x6e4>
 8000efe:	2601      	movs	r6, #1
 8000f00:	4663      	mov	r3, ip
 8000f02:	0025      	movs	r5, r4
 8000f04:	08d0      	lsrs	r0, r2, #3
 8000f06:	0749      	lsls	r1, r1, #29
 8000f08:	4308      	orrs	r0, r1
 8000f0a:	401e      	ands	r6, r3
 8000f0c:	0f47      	lsrs	r7, r0, #29
 8000f0e:	00c0      	lsls	r0, r0, #3
 8000f10:	08c0      	lsrs	r0, r0, #3
 8000f12:	077f      	lsls	r7, r7, #29
 8000f14:	4307      	orrs	r7, r0
 8000f16:	e583      	b.n	8000a20 <__aeabi_dsub+0x1f8>
 8000f18:	1883      	adds	r3, r0, r2
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	4192      	sbcs	r2, r2
 8000f1e:	445c      	add	r4, fp
 8000f20:	4252      	negs	r2, r2
 8000f22:	18a5      	adds	r5, r4, r2
 8000f24:	022a      	lsls	r2, r5, #8
 8000f26:	d500      	bpl.n	8000f2a <__aeabi_dsub+0x702>
 8000f28:	e724      	b.n	8000d74 <__aeabi_dsub+0x54c>
 8000f2a:	076f      	lsls	r7, r5, #29
 8000f2c:	08db      	lsrs	r3, r3, #3
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	08ed      	lsrs	r5, r5, #3
 8000f32:	2301      	movs	r3, #1
 8000f34:	e6d0      	b.n	8000cd8 <__aeabi_dsub+0x4b0>
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	000007ff 	.word	0x000007ff
 8000f3c:	000007fe 	.word	0x000007fe
 8000f40:	ff7fffff 	.word	0xff7fffff
 8000f44:	465b      	mov	r3, fp
 8000f46:	08d2      	lsrs	r2, r2, #3
 8000f48:	075f      	lsls	r7, r3, #29
 8000f4a:	4666      	mov	r6, ip
 8000f4c:	4317      	orrs	r7, r2
 8000f4e:	08dd      	lsrs	r5, r3, #3
 8000f50:	e566      	b.n	8000a20 <__aeabi_dsub+0x1f8>
 8000f52:	0025      	movs	r5, r4
 8000f54:	3b20      	subs	r3, #32
 8000f56:	40dd      	lsrs	r5, r3
 8000f58:	4663      	mov	r3, ip
 8000f5a:	2b20      	cmp	r3, #32
 8000f5c:	d005      	beq.n	8000f6a <__aeabi_dsub+0x742>
 8000f5e:	2340      	movs	r3, #64	@ 0x40
 8000f60:	4661      	mov	r1, ip
 8000f62:	1a5b      	subs	r3, r3, r1
 8000f64:	409c      	lsls	r4, r3
 8000f66:	4320      	orrs	r0, r4
 8000f68:	4680      	mov	r8, r0
 8000f6a:	4647      	mov	r7, r8
 8000f6c:	1e7b      	subs	r3, r7, #1
 8000f6e:	419f      	sbcs	r7, r3
 8000f70:	432f      	orrs	r7, r5
 8000f72:	e5a0      	b.n	8000ab6 <__aeabi_dsub+0x28e>
 8000f74:	2120      	movs	r1, #32
 8000f76:	2700      	movs	r7, #0
 8000f78:	1a09      	subs	r1, r1, r0
 8000f7a:	e4d2      	b.n	8000922 <__aeabi_dsub+0xfa>
 8000f7c:	2f00      	cmp	r7, #0
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dsub+0x75a>
 8000f80:	e713      	b.n	8000daa <__aeabi_dsub+0x582>
 8000f82:	465c      	mov	r4, fp
 8000f84:	0017      	movs	r7, r2
 8000f86:	2500      	movs	r5, #0
 8000f88:	e5f6      	b.n	8000b78 <__aeabi_dsub+0x350>
 8000f8a:	08d7      	lsrs	r7, r2, #3
 8000f8c:	0749      	lsls	r1, r1, #29
 8000f8e:	2302      	movs	r3, #2
 8000f90:	430f      	orrs	r7, r1
 8000f92:	092d      	lsrs	r5, r5, #4
 8000f94:	e6a0      	b.n	8000cd8 <__aeabi_dsub+0x4b0>
 8000f96:	0007      	movs	r7, r0
 8000f98:	e542      	b.n	8000a20 <__aeabi_dsub+0x1f8>
 8000f9a:	465b      	mov	r3, fp
 8000f9c:	2601      	movs	r6, #1
 8000f9e:	075f      	lsls	r7, r3, #29
 8000fa0:	08dd      	lsrs	r5, r3, #3
 8000fa2:	4663      	mov	r3, ip
 8000fa4:	08d2      	lsrs	r2, r2, #3
 8000fa6:	4317      	orrs	r7, r2
 8000fa8:	401e      	ands	r6, r3
 8000faa:	e539      	b.n	8000a20 <__aeabi_dsub+0x1f8>
 8000fac:	465b      	mov	r3, fp
 8000fae:	08d2      	lsrs	r2, r2, #3
 8000fb0:	075f      	lsls	r7, r3, #29
 8000fb2:	4317      	orrs	r7, r2
 8000fb4:	08dd      	lsrs	r5, r3, #3
 8000fb6:	e533      	b.n	8000a20 <__aeabi_dsub+0x1f8>
 8000fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8001034 <__aeabi_dsub+0x80c>)
 8000fba:	08db      	lsrs	r3, r3, #3
 8000fbc:	4022      	ands	r2, r4
 8000fbe:	0757      	lsls	r7, r2, #29
 8000fc0:	0252      	lsls	r2, r2, #9
 8000fc2:	2501      	movs	r5, #1
 8000fc4:	431f      	orrs	r7, r3
 8000fc6:	0b14      	lsrs	r4, r2, #12
 8000fc8:	e5c2      	b.n	8000b50 <__aeabi_dsub+0x328>
 8000fca:	000e      	movs	r6, r1
 8000fcc:	2001      	movs	r0, #1
 8000fce:	e65f      	b.n	8000c90 <__aeabi_dsub+0x468>
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00d      	beq.n	8000ff0 <__aeabi_dsub+0x7c8>
 8000fd4:	464b      	mov	r3, r9
 8000fd6:	1b5b      	subs	r3, r3, r5
 8000fd8:	469c      	mov	ip, r3
 8000fda:	2d00      	cmp	r5, #0
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dsub+0x7b8>
 8000fde:	e548      	b.n	8000a72 <__aeabi_dsub+0x24a>
 8000fe0:	2701      	movs	r7, #1
 8000fe2:	2b38      	cmp	r3, #56	@ 0x38
 8000fe4:	dd00      	ble.n	8000fe8 <__aeabi_dsub+0x7c0>
 8000fe6:	e566      	b.n	8000ab6 <__aeabi_dsub+0x28e>
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	041b      	lsls	r3, r3, #16
 8000fec:	431c      	orrs	r4, r3
 8000fee:	e550      	b.n	8000a92 <__aeabi_dsub+0x26a>
 8000ff0:	1c6b      	adds	r3, r5, #1
 8000ff2:	4d11      	ldr	r5, [pc, #68]	@ (8001038 <__aeabi_dsub+0x810>)
 8000ff4:	422b      	tst	r3, r5
 8000ff6:	d000      	beq.n	8000ffa <__aeabi_dsub+0x7d2>
 8000ff8:	e673      	b.n	8000ce2 <__aeabi_dsub+0x4ba>
 8000ffa:	4659      	mov	r1, fp
 8000ffc:	0023      	movs	r3, r4
 8000ffe:	4311      	orrs	r1, r2
 8001000:	468a      	mov	sl, r1
 8001002:	4303      	orrs	r3, r0
 8001004:	e600      	b.n	8000c08 <__aeabi_dsub+0x3e0>
 8001006:	0767      	lsls	r7, r4, #29
 8001008:	08c0      	lsrs	r0, r0, #3
 800100a:	2300      	movs	r3, #0
 800100c:	4307      	orrs	r7, r0
 800100e:	08e5      	lsrs	r5, r4, #3
 8001010:	e662      	b.n	8000cd8 <__aeabi_dsub+0x4b0>
 8001012:	0764      	lsls	r4, r4, #29
 8001014:	08ff      	lsrs	r7, r7, #3
 8001016:	4327      	orrs	r7, r4
 8001018:	0905      	lsrs	r5, r0, #4
 800101a:	e65d      	b.n	8000cd8 <__aeabi_dsub+0x4b0>
 800101c:	08d2      	lsrs	r2, r2, #3
 800101e:	0749      	lsls	r1, r1, #29
 8001020:	4311      	orrs	r1, r2
 8001022:	000f      	movs	r7, r1
 8001024:	2302      	movs	r3, #2
 8001026:	092d      	lsrs	r5, r5, #4
 8001028:	e656      	b.n	8000cd8 <__aeabi_dsub+0x4b0>
 800102a:	0007      	movs	r7, r0
 800102c:	e5a4      	b.n	8000b78 <__aeabi_dsub+0x350>
 800102e:	0038      	movs	r0, r7
 8001030:	e48f      	b.n	8000952 <__aeabi_dsub+0x12a>
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	ff7fffff 	.word	0xff7fffff
 8001038:	000007fe 	.word	0x000007fe

0800103c <__aeabi_d2iz>:
 800103c:	000b      	movs	r3, r1
 800103e:	0002      	movs	r2, r0
 8001040:	b570      	push	{r4, r5, r6, lr}
 8001042:	4d16      	ldr	r5, [pc, #88]	@ (800109c <__aeabi_d2iz+0x60>)
 8001044:	030c      	lsls	r4, r1, #12
 8001046:	b082      	sub	sp, #8
 8001048:	0049      	lsls	r1, r1, #1
 800104a:	2000      	movs	r0, #0
 800104c:	9200      	str	r2, [sp, #0]
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	0b24      	lsrs	r4, r4, #12
 8001052:	0d49      	lsrs	r1, r1, #21
 8001054:	0fde      	lsrs	r6, r3, #31
 8001056:	42a9      	cmp	r1, r5
 8001058:	dd04      	ble.n	8001064 <__aeabi_d2iz+0x28>
 800105a:	4811      	ldr	r0, [pc, #68]	@ (80010a0 <__aeabi_d2iz+0x64>)
 800105c:	4281      	cmp	r1, r0
 800105e:	dd03      	ble.n	8001068 <__aeabi_d2iz+0x2c>
 8001060:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <__aeabi_d2iz+0x68>)
 8001062:	18f0      	adds	r0, r6, r3
 8001064:	b002      	add	sp, #8
 8001066:	bd70      	pop	{r4, r5, r6, pc}
 8001068:	2080      	movs	r0, #128	@ 0x80
 800106a:	0340      	lsls	r0, r0, #13
 800106c:	4320      	orrs	r0, r4
 800106e:	4c0e      	ldr	r4, [pc, #56]	@ (80010a8 <__aeabi_d2iz+0x6c>)
 8001070:	1a64      	subs	r4, r4, r1
 8001072:	2c1f      	cmp	r4, #31
 8001074:	dd08      	ble.n	8001088 <__aeabi_d2iz+0x4c>
 8001076:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <__aeabi_d2iz+0x70>)
 8001078:	1a5b      	subs	r3, r3, r1
 800107a:	40d8      	lsrs	r0, r3
 800107c:	0003      	movs	r3, r0
 800107e:	4258      	negs	r0, r3
 8001080:	2e00      	cmp	r6, #0
 8001082:	d1ef      	bne.n	8001064 <__aeabi_d2iz+0x28>
 8001084:	0018      	movs	r0, r3
 8001086:	e7ed      	b.n	8001064 <__aeabi_d2iz+0x28>
 8001088:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <__aeabi_d2iz+0x74>)
 800108a:	9a00      	ldr	r2, [sp, #0]
 800108c:	469c      	mov	ip, r3
 800108e:	0003      	movs	r3, r0
 8001090:	4461      	add	r1, ip
 8001092:	408b      	lsls	r3, r1
 8001094:	40e2      	lsrs	r2, r4
 8001096:	4313      	orrs	r3, r2
 8001098:	e7f1      	b.n	800107e <__aeabi_d2iz+0x42>
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	000003fe 	.word	0x000003fe
 80010a0:	0000041d 	.word	0x0000041d
 80010a4:	7fffffff 	.word	0x7fffffff
 80010a8:	00000433 	.word	0x00000433
 80010ac:	00000413 	.word	0x00000413
 80010b0:	fffffbed 	.word	0xfffffbed

080010b4 <__aeabi_ui2d>:
 80010b4:	b510      	push	{r4, lr}
 80010b6:	1e04      	subs	r4, r0, #0
 80010b8:	d010      	beq.n	80010dc <__aeabi_ui2d+0x28>
 80010ba:	f000 f85d 	bl	8001178 <__clzsi2>
 80010be:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <__aeabi_ui2d+0x44>)
 80010c0:	1a1b      	subs	r3, r3, r0
 80010c2:	055b      	lsls	r3, r3, #21
 80010c4:	0d5b      	lsrs	r3, r3, #21
 80010c6:	280a      	cmp	r0, #10
 80010c8:	dc0f      	bgt.n	80010ea <__aeabi_ui2d+0x36>
 80010ca:	220b      	movs	r2, #11
 80010cc:	0021      	movs	r1, r4
 80010ce:	1a12      	subs	r2, r2, r0
 80010d0:	40d1      	lsrs	r1, r2
 80010d2:	3015      	adds	r0, #21
 80010d4:	030a      	lsls	r2, r1, #12
 80010d6:	4084      	lsls	r4, r0
 80010d8:	0b12      	lsrs	r2, r2, #12
 80010da:	e001      	b.n	80010e0 <__aeabi_ui2d+0x2c>
 80010dc:	2300      	movs	r3, #0
 80010de:	2200      	movs	r2, #0
 80010e0:	051b      	lsls	r3, r3, #20
 80010e2:	4313      	orrs	r3, r2
 80010e4:	0020      	movs	r0, r4
 80010e6:	0019      	movs	r1, r3
 80010e8:	bd10      	pop	{r4, pc}
 80010ea:	0022      	movs	r2, r4
 80010ec:	380b      	subs	r0, #11
 80010ee:	4082      	lsls	r2, r0
 80010f0:	0312      	lsls	r2, r2, #12
 80010f2:	2400      	movs	r4, #0
 80010f4:	0b12      	lsrs	r2, r2, #12
 80010f6:	e7f3      	b.n	80010e0 <__aeabi_ui2d+0x2c>
 80010f8:	0000041e 	.word	0x0000041e

080010fc <__aeabi_cdrcmple>:
 80010fc:	4684      	mov	ip, r0
 80010fe:	0010      	movs	r0, r2
 8001100:	4662      	mov	r2, ip
 8001102:	468c      	mov	ip, r1
 8001104:	0019      	movs	r1, r3
 8001106:	4663      	mov	r3, ip
 8001108:	e000      	b.n	800110c <__aeabi_cdcmpeq>
 800110a:	46c0      	nop			@ (mov r8, r8)

0800110c <__aeabi_cdcmpeq>:
 800110c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800110e:	f000 f905 	bl	800131c <__ledf2>
 8001112:	2800      	cmp	r0, #0
 8001114:	d401      	bmi.n	800111a <__aeabi_cdcmpeq+0xe>
 8001116:	2100      	movs	r1, #0
 8001118:	42c8      	cmn	r0, r1
 800111a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800111c <__aeabi_dcmpeq>:
 800111c:	b510      	push	{r4, lr}
 800111e:	f000 f849 	bl	80011b4 <__eqdf2>
 8001122:	4240      	negs	r0, r0
 8001124:	3001      	adds	r0, #1
 8001126:	bd10      	pop	{r4, pc}

08001128 <__aeabi_dcmplt>:
 8001128:	b510      	push	{r4, lr}
 800112a:	f000 f8f7 	bl	800131c <__ledf2>
 800112e:	2800      	cmp	r0, #0
 8001130:	db01      	blt.n	8001136 <__aeabi_dcmplt+0xe>
 8001132:	2000      	movs	r0, #0
 8001134:	bd10      	pop	{r4, pc}
 8001136:	2001      	movs	r0, #1
 8001138:	bd10      	pop	{r4, pc}
 800113a:	46c0      	nop			@ (mov r8, r8)

0800113c <__aeabi_dcmple>:
 800113c:	b510      	push	{r4, lr}
 800113e:	f000 f8ed 	bl	800131c <__ledf2>
 8001142:	2800      	cmp	r0, #0
 8001144:	dd01      	ble.n	800114a <__aeabi_dcmple+0xe>
 8001146:	2000      	movs	r0, #0
 8001148:	bd10      	pop	{r4, pc}
 800114a:	2001      	movs	r0, #1
 800114c:	bd10      	pop	{r4, pc}
 800114e:	46c0      	nop			@ (mov r8, r8)

08001150 <__aeabi_dcmpgt>:
 8001150:	b510      	push	{r4, lr}
 8001152:	f000 f873 	bl	800123c <__gedf2>
 8001156:	2800      	cmp	r0, #0
 8001158:	dc01      	bgt.n	800115e <__aeabi_dcmpgt+0xe>
 800115a:	2000      	movs	r0, #0
 800115c:	bd10      	pop	{r4, pc}
 800115e:	2001      	movs	r0, #1
 8001160:	bd10      	pop	{r4, pc}
 8001162:	46c0      	nop			@ (mov r8, r8)

08001164 <__aeabi_dcmpge>:
 8001164:	b510      	push	{r4, lr}
 8001166:	f000 f869 	bl	800123c <__gedf2>
 800116a:	2800      	cmp	r0, #0
 800116c:	da01      	bge.n	8001172 <__aeabi_dcmpge+0xe>
 800116e:	2000      	movs	r0, #0
 8001170:	bd10      	pop	{r4, pc}
 8001172:	2001      	movs	r0, #1
 8001174:	bd10      	pop	{r4, pc}
 8001176:	46c0      	nop			@ (mov r8, r8)

08001178 <__clzsi2>:
 8001178:	211c      	movs	r1, #28
 800117a:	2301      	movs	r3, #1
 800117c:	041b      	lsls	r3, r3, #16
 800117e:	4298      	cmp	r0, r3
 8001180:	d301      	bcc.n	8001186 <__clzsi2+0xe>
 8001182:	0c00      	lsrs	r0, r0, #16
 8001184:	3910      	subs	r1, #16
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	4298      	cmp	r0, r3
 800118a:	d301      	bcc.n	8001190 <__clzsi2+0x18>
 800118c:	0a00      	lsrs	r0, r0, #8
 800118e:	3908      	subs	r1, #8
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	4298      	cmp	r0, r3
 8001194:	d301      	bcc.n	800119a <__clzsi2+0x22>
 8001196:	0900      	lsrs	r0, r0, #4
 8001198:	3904      	subs	r1, #4
 800119a:	a202      	add	r2, pc, #8	@ (adr r2, 80011a4 <__clzsi2+0x2c>)
 800119c:	5c10      	ldrb	r0, [r2, r0]
 800119e:	1840      	adds	r0, r0, r1
 80011a0:	4770      	bx	lr
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	02020304 	.word	0x02020304
 80011a8:	01010101 	.word	0x01010101
	...

080011b4 <__eqdf2>:
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	4657      	mov	r7, sl
 80011b8:	46de      	mov	lr, fp
 80011ba:	464e      	mov	r6, r9
 80011bc:	4645      	mov	r5, r8
 80011be:	b5e0      	push	{r5, r6, r7, lr}
 80011c0:	000d      	movs	r5, r1
 80011c2:	0004      	movs	r4, r0
 80011c4:	0fe8      	lsrs	r0, r5, #31
 80011c6:	4683      	mov	fp, r0
 80011c8:	0309      	lsls	r1, r1, #12
 80011ca:	0fd8      	lsrs	r0, r3, #31
 80011cc:	0b09      	lsrs	r1, r1, #12
 80011ce:	4682      	mov	sl, r0
 80011d0:	4819      	ldr	r0, [pc, #100]	@ (8001238 <__eqdf2+0x84>)
 80011d2:	468c      	mov	ip, r1
 80011d4:	031f      	lsls	r7, r3, #12
 80011d6:	0069      	lsls	r1, r5, #1
 80011d8:	005e      	lsls	r6, r3, #1
 80011da:	0d49      	lsrs	r1, r1, #21
 80011dc:	0b3f      	lsrs	r7, r7, #12
 80011de:	0d76      	lsrs	r6, r6, #21
 80011e0:	4281      	cmp	r1, r0
 80011e2:	d018      	beq.n	8001216 <__eqdf2+0x62>
 80011e4:	4286      	cmp	r6, r0
 80011e6:	d00f      	beq.n	8001208 <__eqdf2+0x54>
 80011e8:	2001      	movs	r0, #1
 80011ea:	42b1      	cmp	r1, r6
 80011ec:	d10d      	bne.n	800120a <__eqdf2+0x56>
 80011ee:	45bc      	cmp	ip, r7
 80011f0:	d10b      	bne.n	800120a <__eqdf2+0x56>
 80011f2:	4294      	cmp	r4, r2
 80011f4:	d109      	bne.n	800120a <__eqdf2+0x56>
 80011f6:	45d3      	cmp	fp, sl
 80011f8:	d01c      	beq.n	8001234 <__eqdf2+0x80>
 80011fa:	2900      	cmp	r1, #0
 80011fc:	d105      	bne.n	800120a <__eqdf2+0x56>
 80011fe:	4660      	mov	r0, ip
 8001200:	4320      	orrs	r0, r4
 8001202:	1e43      	subs	r3, r0, #1
 8001204:	4198      	sbcs	r0, r3
 8001206:	e000      	b.n	800120a <__eqdf2+0x56>
 8001208:	2001      	movs	r0, #1
 800120a:	bcf0      	pop	{r4, r5, r6, r7}
 800120c:	46bb      	mov	fp, r7
 800120e:	46b2      	mov	sl, r6
 8001210:	46a9      	mov	r9, r5
 8001212:	46a0      	mov	r8, r4
 8001214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001216:	2001      	movs	r0, #1
 8001218:	428e      	cmp	r6, r1
 800121a:	d1f6      	bne.n	800120a <__eqdf2+0x56>
 800121c:	4661      	mov	r1, ip
 800121e:	4339      	orrs	r1, r7
 8001220:	000f      	movs	r7, r1
 8001222:	4317      	orrs	r7, r2
 8001224:	4327      	orrs	r7, r4
 8001226:	d1f0      	bne.n	800120a <__eqdf2+0x56>
 8001228:	465b      	mov	r3, fp
 800122a:	4652      	mov	r2, sl
 800122c:	1a98      	subs	r0, r3, r2
 800122e:	1e43      	subs	r3, r0, #1
 8001230:	4198      	sbcs	r0, r3
 8001232:	e7ea      	b.n	800120a <__eqdf2+0x56>
 8001234:	2000      	movs	r0, #0
 8001236:	e7e8      	b.n	800120a <__eqdf2+0x56>
 8001238:	000007ff 	.word	0x000007ff

0800123c <__gedf2>:
 800123c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123e:	4657      	mov	r7, sl
 8001240:	464e      	mov	r6, r9
 8001242:	4645      	mov	r5, r8
 8001244:	46de      	mov	lr, fp
 8001246:	b5e0      	push	{r5, r6, r7, lr}
 8001248:	000d      	movs	r5, r1
 800124a:	030e      	lsls	r6, r1, #12
 800124c:	0049      	lsls	r1, r1, #1
 800124e:	0d49      	lsrs	r1, r1, #21
 8001250:	468a      	mov	sl, r1
 8001252:	0fdf      	lsrs	r7, r3, #31
 8001254:	0fe9      	lsrs	r1, r5, #31
 8001256:	46bc      	mov	ip, r7
 8001258:	b083      	sub	sp, #12
 800125a:	4f2f      	ldr	r7, [pc, #188]	@ (8001318 <__gedf2+0xdc>)
 800125c:	0004      	movs	r4, r0
 800125e:	4680      	mov	r8, r0
 8001260:	9101      	str	r1, [sp, #4]
 8001262:	0058      	lsls	r0, r3, #1
 8001264:	0319      	lsls	r1, r3, #12
 8001266:	4691      	mov	r9, r2
 8001268:	0b36      	lsrs	r6, r6, #12
 800126a:	0b09      	lsrs	r1, r1, #12
 800126c:	0d40      	lsrs	r0, r0, #21
 800126e:	45ba      	cmp	sl, r7
 8001270:	d01d      	beq.n	80012ae <__gedf2+0x72>
 8001272:	42b8      	cmp	r0, r7
 8001274:	d00d      	beq.n	8001292 <__gedf2+0x56>
 8001276:	4657      	mov	r7, sl
 8001278:	2f00      	cmp	r7, #0
 800127a:	d12a      	bne.n	80012d2 <__gedf2+0x96>
 800127c:	4334      	orrs	r4, r6
 800127e:	2800      	cmp	r0, #0
 8001280:	d124      	bne.n	80012cc <__gedf2+0x90>
 8001282:	430a      	orrs	r2, r1
 8001284:	d036      	beq.n	80012f4 <__gedf2+0xb8>
 8001286:	2c00      	cmp	r4, #0
 8001288:	d141      	bne.n	800130e <__gedf2+0xd2>
 800128a:	4663      	mov	r3, ip
 800128c:	0058      	lsls	r0, r3, #1
 800128e:	3801      	subs	r0, #1
 8001290:	e015      	b.n	80012be <__gedf2+0x82>
 8001292:	4311      	orrs	r1, r2
 8001294:	d138      	bne.n	8001308 <__gedf2+0xcc>
 8001296:	4653      	mov	r3, sl
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <__gedf2+0x64>
 800129c:	4326      	orrs	r6, r4
 800129e:	d0f4      	beq.n	800128a <__gedf2+0x4e>
 80012a0:	9b01      	ldr	r3, [sp, #4]
 80012a2:	4563      	cmp	r3, ip
 80012a4:	d107      	bne.n	80012b6 <__gedf2+0x7a>
 80012a6:	9b01      	ldr	r3, [sp, #4]
 80012a8:	0058      	lsls	r0, r3, #1
 80012aa:	3801      	subs	r0, #1
 80012ac:	e007      	b.n	80012be <__gedf2+0x82>
 80012ae:	4326      	orrs	r6, r4
 80012b0:	d12a      	bne.n	8001308 <__gedf2+0xcc>
 80012b2:	4550      	cmp	r0, sl
 80012b4:	d021      	beq.n	80012fa <__gedf2+0xbe>
 80012b6:	2001      	movs	r0, #1
 80012b8:	9b01      	ldr	r3, [sp, #4]
 80012ba:	425f      	negs	r7, r3
 80012bc:	4338      	orrs	r0, r7
 80012be:	b003      	add	sp, #12
 80012c0:	bcf0      	pop	{r4, r5, r6, r7}
 80012c2:	46bb      	mov	fp, r7
 80012c4:	46b2      	mov	sl, r6
 80012c6:	46a9      	mov	r9, r5
 80012c8:	46a0      	mov	r8, r4
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	d0dc      	beq.n	800128a <__gedf2+0x4e>
 80012d0:	e7e6      	b.n	80012a0 <__gedf2+0x64>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d0ef      	beq.n	80012b6 <__gedf2+0x7a>
 80012d6:	9b01      	ldr	r3, [sp, #4]
 80012d8:	4563      	cmp	r3, ip
 80012da:	d1ec      	bne.n	80012b6 <__gedf2+0x7a>
 80012dc:	4582      	cmp	sl, r0
 80012de:	dcea      	bgt.n	80012b6 <__gedf2+0x7a>
 80012e0:	dbe1      	blt.n	80012a6 <__gedf2+0x6a>
 80012e2:	428e      	cmp	r6, r1
 80012e4:	d8e7      	bhi.n	80012b6 <__gedf2+0x7a>
 80012e6:	d1de      	bne.n	80012a6 <__gedf2+0x6a>
 80012e8:	45c8      	cmp	r8, r9
 80012ea:	d8e4      	bhi.n	80012b6 <__gedf2+0x7a>
 80012ec:	2000      	movs	r0, #0
 80012ee:	45c8      	cmp	r8, r9
 80012f0:	d2e5      	bcs.n	80012be <__gedf2+0x82>
 80012f2:	e7d8      	b.n	80012a6 <__gedf2+0x6a>
 80012f4:	2c00      	cmp	r4, #0
 80012f6:	d0e2      	beq.n	80012be <__gedf2+0x82>
 80012f8:	e7dd      	b.n	80012b6 <__gedf2+0x7a>
 80012fa:	4311      	orrs	r1, r2
 80012fc:	d104      	bne.n	8001308 <__gedf2+0xcc>
 80012fe:	9b01      	ldr	r3, [sp, #4]
 8001300:	4563      	cmp	r3, ip
 8001302:	d1d8      	bne.n	80012b6 <__gedf2+0x7a>
 8001304:	2000      	movs	r0, #0
 8001306:	e7da      	b.n	80012be <__gedf2+0x82>
 8001308:	2002      	movs	r0, #2
 800130a:	4240      	negs	r0, r0
 800130c:	e7d7      	b.n	80012be <__gedf2+0x82>
 800130e:	9b01      	ldr	r3, [sp, #4]
 8001310:	4563      	cmp	r3, ip
 8001312:	d0e6      	beq.n	80012e2 <__gedf2+0xa6>
 8001314:	e7cf      	b.n	80012b6 <__gedf2+0x7a>
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	000007ff 	.word	0x000007ff

0800131c <__ledf2>:
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131e:	4657      	mov	r7, sl
 8001320:	464e      	mov	r6, r9
 8001322:	4645      	mov	r5, r8
 8001324:	46de      	mov	lr, fp
 8001326:	b5e0      	push	{r5, r6, r7, lr}
 8001328:	000d      	movs	r5, r1
 800132a:	030e      	lsls	r6, r1, #12
 800132c:	0049      	lsls	r1, r1, #1
 800132e:	0d49      	lsrs	r1, r1, #21
 8001330:	468a      	mov	sl, r1
 8001332:	0fdf      	lsrs	r7, r3, #31
 8001334:	0fe9      	lsrs	r1, r5, #31
 8001336:	46bc      	mov	ip, r7
 8001338:	b083      	sub	sp, #12
 800133a:	4f2e      	ldr	r7, [pc, #184]	@ (80013f4 <__ledf2+0xd8>)
 800133c:	0004      	movs	r4, r0
 800133e:	4680      	mov	r8, r0
 8001340:	9101      	str	r1, [sp, #4]
 8001342:	0058      	lsls	r0, r3, #1
 8001344:	0319      	lsls	r1, r3, #12
 8001346:	4691      	mov	r9, r2
 8001348:	0b36      	lsrs	r6, r6, #12
 800134a:	0b09      	lsrs	r1, r1, #12
 800134c:	0d40      	lsrs	r0, r0, #21
 800134e:	45ba      	cmp	sl, r7
 8001350:	d01e      	beq.n	8001390 <__ledf2+0x74>
 8001352:	42b8      	cmp	r0, r7
 8001354:	d00d      	beq.n	8001372 <__ledf2+0x56>
 8001356:	4657      	mov	r7, sl
 8001358:	2f00      	cmp	r7, #0
 800135a:	d127      	bne.n	80013ac <__ledf2+0x90>
 800135c:	4334      	orrs	r4, r6
 800135e:	2800      	cmp	r0, #0
 8001360:	d133      	bne.n	80013ca <__ledf2+0xae>
 8001362:	430a      	orrs	r2, r1
 8001364:	d034      	beq.n	80013d0 <__ledf2+0xb4>
 8001366:	2c00      	cmp	r4, #0
 8001368:	d140      	bne.n	80013ec <__ledf2+0xd0>
 800136a:	4663      	mov	r3, ip
 800136c:	0058      	lsls	r0, r3, #1
 800136e:	3801      	subs	r0, #1
 8001370:	e015      	b.n	800139e <__ledf2+0x82>
 8001372:	4311      	orrs	r1, r2
 8001374:	d112      	bne.n	800139c <__ledf2+0x80>
 8001376:	4653      	mov	r3, sl
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <__ledf2+0x64>
 800137c:	4326      	orrs	r6, r4
 800137e:	d0f4      	beq.n	800136a <__ledf2+0x4e>
 8001380:	9b01      	ldr	r3, [sp, #4]
 8001382:	4563      	cmp	r3, ip
 8001384:	d01d      	beq.n	80013c2 <__ledf2+0xa6>
 8001386:	2001      	movs	r0, #1
 8001388:	9b01      	ldr	r3, [sp, #4]
 800138a:	425f      	negs	r7, r3
 800138c:	4338      	orrs	r0, r7
 800138e:	e006      	b.n	800139e <__ledf2+0x82>
 8001390:	4326      	orrs	r6, r4
 8001392:	d103      	bne.n	800139c <__ledf2+0x80>
 8001394:	4550      	cmp	r0, sl
 8001396:	d1f6      	bne.n	8001386 <__ledf2+0x6a>
 8001398:	4311      	orrs	r1, r2
 800139a:	d01c      	beq.n	80013d6 <__ledf2+0xba>
 800139c:	2002      	movs	r0, #2
 800139e:	b003      	add	sp, #12
 80013a0:	bcf0      	pop	{r4, r5, r6, r7}
 80013a2:	46bb      	mov	fp, r7
 80013a4:	46b2      	mov	sl, r6
 80013a6:	46a9      	mov	r9, r5
 80013a8:	46a0      	mov	r8, r4
 80013aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ac:	2800      	cmp	r0, #0
 80013ae:	d0ea      	beq.n	8001386 <__ledf2+0x6a>
 80013b0:	9b01      	ldr	r3, [sp, #4]
 80013b2:	4563      	cmp	r3, ip
 80013b4:	d1e7      	bne.n	8001386 <__ledf2+0x6a>
 80013b6:	4582      	cmp	sl, r0
 80013b8:	dce5      	bgt.n	8001386 <__ledf2+0x6a>
 80013ba:	db02      	blt.n	80013c2 <__ledf2+0xa6>
 80013bc:	428e      	cmp	r6, r1
 80013be:	d8e2      	bhi.n	8001386 <__ledf2+0x6a>
 80013c0:	d00e      	beq.n	80013e0 <__ledf2+0xc4>
 80013c2:	9b01      	ldr	r3, [sp, #4]
 80013c4:	0058      	lsls	r0, r3, #1
 80013c6:	3801      	subs	r0, #1
 80013c8:	e7e9      	b.n	800139e <__ledf2+0x82>
 80013ca:	2c00      	cmp	r4, #0
 80013cc:	d0cd      	beq.n	800136a <__ledf2+0x4e>
 80013ce:	e7d7      	b.n	8001380 <__ledf2+0x64>
 80013d0:	2c00      	cmp	r4, #0
 80013d2:	d0e4      	beq.n	800139e <__ledf2+0x82>
 80013d4:	e7d7      	b.n	8001386 <__ledf2+0x6a>
 80013d6:	9b01      	ldr	r3, [sp, #4]
 80013d8:	2000      	movs	r0, #0
 80013da:	4563      	cmp	r3, ip
 80013dc:	d0df      	beq.n	800139e <__ledf2+0x82>
 80013de:	e7d2      	b.n	8001386 <__ledf2+0x6a>
 80013e0:	45c8      	cmp	r8, r9
 80013e2:	d8d0      	bhi.n	8001386 <__ledf2+0x6a>
 80013e4:	2000      	movs	r0, #0
 80013e6:	45c8      	cmp	r8, r9
 80013e8:	d2d9      	bcs.n	800139e <__ledf2+0x82>
 80013ea:	e7ea      	b.n	80013c2 <__ledf2+0xa6>
 80013ec:	9b01      	ldr	r3, [sp, #4]
 80013ee:	4563      	cmp	r3, ip
 80013f0:	d0e4      	beq.n	80013bc <__ledf2+0xa0>
 80013f2:	e7c8      	b.n	8001386 <__ledf2+0x6a>
 80013f4:	000007ff 	.word	0x000007ff

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fe:	f000 fc4b 	bl	8001c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001402:	f000 fa35 	bl	8001870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001406:	f000 fb0b 	bl	8001a20 <MX_GPIO_Init>
  MX_TIM2_Init();
 800140a:	f000 fa81 	bl	8001910 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  while(HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_SET)
 800140e:	e008      	b.n	8001422 <main+0x2a>
	  	    	   {
	  	    	     HAL_GPIO_TogglePin(GPIOA, LED_Pin); // miga diodą LED na PA5
 8001410:	23a0      	movs	r3, #160	@ 0xa0
 8001412:	05db      	lsls	r3, r3, #23
 8001414:	2120      	movs	r1, #32
 8001416:	0018      	movs	r0, r3
 8001418:	f000 ff3e 	bl	8002298 <HAL_GPIO_TogglePin>
	  	    	     HAL_Delay(200);
 800141c:	20c8      	movs	r0, #200	@ 0xc8
 800141e:	f000 fcab 	bl	8001d78 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_SET)
 8001422:	2380      	movs	r3, #128	@ 0x80
 8001424:	019b      	lsls	r3, r3, #6
 8001426:	4aea      	ldr	r2, [pc, #936]	@ (80017d0 <main+0x3d8>)
 8001428:	0019      	movs	r1, r3
 800142a:	0010      	movs	r0, r2
 800142c:	f000 fefa 	bl	8002224 <HAL_GPIO_ReadPin>
 8001430:	0003      	movs	r3, r0
 8001432:	2b01      	cmp	r3, #1
 8001434:	d0ec      	beq.n	8001410 <main+0x18>
	  	    	   }

	  	  	  	  	HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET);
 8001436:	2380      	movs	r3, #128	@ 0x80
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	48e5      	ldr	r0, [pc, #916]	@ (80017d0 <main+0x3d8>)
 800143c:	2200      	movs	r2, #0
 800143e:	0019      	movs	r1, r3
 8001440:	f000 ff0d 	bl	800225e <HAL_GPIO_WritePin>
	  	  	    	HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 8001444:	2380      	movs	r3, #128	@ 0x80
 8001446:	015b      	lsls	r3, r3, #5
 8001448:	48e1      	ldr	r0, [pc, #900]	@ (80017d0 <main+0x3d8>)
 800144a:	2200      	movs	r2, #0
 800144c:	0019      	movs	r1, r3
 800144e:	f000 ff06 	bl	800225e <HAL_GPIO_WritePin>
	                  HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET);
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	48de      	ldr	r0, [pc, #888]	@ (80017d0 <main+0x3d8>)
 8001458:	2200      	movs	r2, #0
 800145a:	0019      	movs	r1, r3
 800145c:	f000 feff 	bl	800225e <HAL_GPIO_WritePin>
	  	  	    	HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 8001460:	4bdb      	ldr	r3, [pc, #876]	@ (80017d0 <main+0x3d8>)
 8001462:	2200      	movs	r2, #0
 8001464:	2140      	movs	r1, #64	@ 0x40
 8001466:	0018      	movs	r0, r3
 8001468:	f000 fef9 	bl	800225e <HAL_GPIO_WritePin>

	  	    	  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800146c:	4bd9      	ldr	r3, [pc, #868]	@ (80017d4 <main+0x3dc>)
 800146e:	2100      	movs	r1, #0
 8001470:	0018      	movs	r0, r3
 8001472:	f001 fcff 	bl	8002e74 <HAL_TIM_PWM_Start>
	  	    	    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001476:	4bd7      	ldr	r3, [pc, #860]	@ (80017d4 <main+0x3dc>)
 8001478:	2104      	movs	r1, #4
 800147a:	0018      	movs	r0, r3
 800147c:	f001 fcfa 	bl	8002e74 <HAL_TIM_PWM_Start>

	  	    	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001480:	4bd4      	ldr	r3, [pc, #848]	@ (80017d4 <main+0x3dc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	635a      	str	r2, [r3, #52]	@ 0x34
	  	    	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001488:	4bd2      	ldr	r3, [pc, #840]	@ (80017d4 <main+0x3dc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	639a      	str	r2, [r3, #56]	@ 0x38


	  	    	    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001490:	23a0      	movs	r3, #160	@ 0xa0
 8001492:	05db      	lsls	r3, r3, #23
 8001494:	2201      	movs	r2, #1
 8001496:	2120      	movs	r1, #32
 8001498:	0018      	movs	r0, r3
 800149a:	f000 fee0 	bl	800225e <HAL_GPIO_WritePin>

	  	    	    uint32_t duty = 1200; // PWM
 800149e:	2396      	movs	r3, #150	@ 0x96
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	603b      	str	r3, [r7, #0]
	  	    	    for (int i = 0; i < 10; ++i)
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	e1d8      	b.n	800185c <main+0x464>
	  	    	    {
	  	    	      switch(i)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b09      	cmp	r3, #9
 80014ae:	d900      	bls.n	80014b2 <main+0xba>
 80014b0:	e1d1      	b.n	8001856 <main+0x45e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	009a      	lsls	r2, r3, #2
 80014b6:	4bc8      	ldr	r3, [pc, #800]	@ (80017d8 <main+0x3e0>)
 80014b8:	18d3      	adds	r3, r2, r3
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	469f      	mov	pc, r3
	  	    	      {
	  	    	        case 0: // Jedź do przodu
	                         HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);
 80014be:	2380      	movs	r3, #128	@ 0x80
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	48c3      	ldr	r0, [pc, #780]	@ (80017d0 <main+0x3d8>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	0019      	movs	r1, r3
 80014c8:	f000 fec9 	bl	800225e <HAL_GPIO_WritePin>
	                         HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 80014cc:	2380      	movs	r3, #128	@ 0x80
 80014ce:	015b      	lsls	r3, r3, #5
 80014d0:	48bf      	ldr	r0, [pc, #764]	@ (80017d0 <main+0x3d8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	0019      	movs	r1, r3
 80014d6:	f000 fec2 	bl	800225e <HAL_GPIO_WritePin>
	                         HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);
 80014da:	2380      	movs	r3, #128	@ 0x80
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	48bc      	ldr	r0, [pc, #752]	@ (80017d0 <main+0x3d8>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	0019      	movs	r1, r3
 80014e4:	f000 febb 	bl	800225e <HAL_GPIO_WritePin>
	                         HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 80014e8:	4bb9      	ldr	r3, [pc, #740]	@ (80017d0 <main+0x3d8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	2140      	movs	r1, #64	@ 0x40
 80014ee:	0018      	movs	r0, r3
 80014f0:	f000 feb5 	bl	800225e <HAL_GPIO_WritePin>
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 80014f4:	4bb7      	ldr	r3, [pc, #732]	@ (80017d4 <main+0x3dc>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	635a      	str	r2, [r3, #52]	@ 0x34
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 80014fc:	4bb5      	ldr	r3, [pc, #724]	@ (80017d4 <main+0x3dc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	639a      	str	r2, [r3, #56]	@ 0x38
	  	    	          HAL_Delay(2500); // Czas trwania sekwencji
 8001504:	4bb5      	ldr	r3, [pc, #724]	@ (80017dc <main+0x3e4>)
 8001506:	0018      	movs	r0, r3
 8001508:	f000 fc36 	bl	8001d78 <HAL_Delay>
	  	    	          break;
 800150c:	e1a3      	b.n	8001856 <main+0x45e>
	  	    	        case 1: // Jedź do tyłuA
	                         HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET);
 800150e:	2380      	movs	r3, #128	@ 0x80
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	48af      	ldr	r0, [pc, #700]	@ (80017d0 <main+0x3d8>)
 8001514:	2200      	movs	r2, #0
 8001516:	0019      	movs	r1, r3
 8001518:	f000 fea1 	bl	800225e <HAL_GPIO_WritePin>
	                         HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_SET);
 800151c:	2380      	movs	r3, #128	@ 0x80
 800151e:	015b      	lsls	r3, r3, #5
 8001520:	48ab      	ldr	r0, [pc, #684]	@ (80017d0 <main+0x3d8>)
 8001522:	2201      	movs	r2, #1
 8001524:	0019      	movs	r1, r3
 8001526:	f000 fe9a 	bl	800225e <HAL_GPIO_WritePin>
	                         HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET);
 800152a:	2380      	movs	r3, #128	@ 0x80
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	48a8      	ldr	r0, [pc, #672]	@ (80017d0 <main+0x3d8>)
 8001530:	2200      	movs	r2, #0
 8001532:	0019      	movs	r1, r3
 8001534:	f000 fe93 	bl	800225e <HAL_GPIO_WritePin>
	                         HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_SET);
 8001538:	4ba5      	ldr	r3, [pc, #660]	@ (80017d0 <main+0x3d8>)
 800153a:	2201      	movs	r2, #1
 800153c:	2140      	movs	r1, #64	@ 0x40
 800153e:	0018      	movs	r0, r3
 8001540:	f000 fe8d 	bl	800225e <HAL_GPIO_WritePin>
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8001544:	4ba3      	ldr	r3, [pc, #652]	@ (80017d4 <main+0x3dc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	635a      	str	r2, [r3, #52]	@ 0x34
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 800154c:	4ba1      	ldr	r3, [pc, #644]	@ (80017d4 <main+0x3dc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	639a      	str	r2, [r3, #56]	@ 0x38
	  	    	          HAL_Delay(2500); // Czas trwania sekwencji
 8001554:	4ba1      	ldr	r3, [pc, #644]	@ (80017dc <main+0x3e4>)
 8001556:	0018      	movs	r0, r3
 8001558:	f000 fc0e 	bl	8001d78 <HAL_Delay>
	  	    	          break;
 800155c:	e17b      	b.n	8001856 <main+0x45e>
	  	    	        case 2: // Skręt w lewo
	                        HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET);
 800155e:	2380      	movs	r3, #128	@ 0x80
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	489b      	ldr	r0, [pc, #620]	@ (80017d0 <main+0x3d8>)
 8001564:	2200      	movs	r2, #0
 8001566:	0019      	movs	r1, r3
 8001568:	f000 fe79 	bl	800225e <HAL_GPIO_WritePin>
	  	  	    	      HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_SET);
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	015b      	lsls	r3, r3, #5
 8001570:	4897      	ldr	r0, [pc, #604]	@ (80017d0 <main+0x3d8>)
 8001572:	2201      	movs	r2, #1
 8001574:	0019      	movs	r1, r3
 8001576:	f000 fe72 	bl	800225e <HAL_GPIO_WritePin>
	                        HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET);
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4894      	ldr	r0, [pc, #592]	@ (80017d0 <main+0x3d8>)
 8001580:	2200      	movs	r2, #0
 8001582:	0019      	movs	r1, r3
 8001584:	f000 fe6b 	bl	800225e <HAL_GPIO_WritePin>
	  	  	    	      HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 8001588:	4b91      	ldr	r3, [pc, #580]	@ (80017d0 <main+0x3d8>)
 800158a:	2200      	movs	r2, #0
 800158c:	2140      	movs	r1, #64	@ 0x40
 800158e:	0018      	movs	r0, r3
 8001590:	f000 fe65 	bl	800225e <HAL_GPIO_WritePin>
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001594:	4b8f      	ldr	r3, [pc, #572]	@ (80017d4 <main+0x3dc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2200      	movs	r2, #0
 800159a:	635a      	str	r2, [r3, #52]	@ 0x34
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 800159c:	4b8d      	ldr	r3, [pc, #564]	@ (80017d4 <main+0x3dc>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	639a      	str	r2, [r3, #56]	@ 0x38
	  	    	          HAL_Delay(1000); // Czas trwania sekwencji
 80015a4:	23fa      	movs	r3, #250	@ 0xfa
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 fbe5 	bl	8001d78 <HAL_Delay>
	  	    	          break;
 80015ae:	e152      	b.n	8001856 <main+0x45e>
	  	    	        case 3: // Skręt w prawo
	                        HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4886      	ldr	r0, [pc, #536]	@ (80017d0 <main+0x3d8>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	0019      	movs	r1, r3
 80015ba:	f000 fe50 	bl	800225e <HAL_GPIO_WritePin>
	  	  	    	      HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 80015be:	2380      	movs	r3, #128	@ 0x80
 80015c0:	015b      	lsls	r3, r3, #5
 80015c2:	4883      	ldr	r0, [pc, #524]	@ (80017d0 <main+0x3d8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	0019      	movs	r1, r3
 80015c8:	f000 fe49 	bl	800225e <HAL_GPIO_WritePin>
	                        HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET);
 80015cc:	2380      	movs	r3, #128	@ 0x80
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	487f      	ldr	r0, [pc, #508]	@ (80017d0 <main+0x3d8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	0019      	movs	r1, r3
 80015d6:	f000 fe42 	bl	800225e <HAL_GPIO_WritePin>
	  	  	    	      HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 80015da:	4b7d      	ldr	r3, [pc, #500]	@ (80017d0 <main+0x3d8>)
 80015dc:	2200      	movs	r2, #0
 80015de:	2140      	movs	r1, #64	@ 0x40
 80015e0:	0018      	movs	r0, r3
 80015e2:	f000 fe3c 	bl	800225e <HAL_GPIO_WritePin>
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 80015e6:	4b7b      	ldr	r3, [pc, #492]	@ (80017d4 <main+0x3dc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	635a      	str	r2, [r3, #52]	@ 0x34
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80015ee:	4b79      	ldr	r3, [pc, #484]	@ (80017d4 <main+0x3dc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2200      	movs	r2, #0
 80015f4:	639a      	str	r2, [r3, #56]	@ 0x38
	  	    	          HAL_Delay(1000); // Czas trwania sekwencji
 80015f6:	23fa      	movs	r3, #250	@ 0xfa
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	0018      	movs	r0, r3
 80015fc:	f000 fbbc 	bl	8001d78 <HAL_Delay>
	  	    	          break;
 8001600:	e129      	b.n	8001856 <main+0x45e>
	  	    	        case 4: // Zatrzymaj się HARD STOP
	  	    	          HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET);
 8001602:	2380      	movs	r3, #128	@ 0x80
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4872      	ldr	r0, [pc, #456]	@ (80017d0 <main+0x3d8>)
 8001608:	2200      	movs	r2, #0
 800160a:	0019      	movs	r1, r3
 800160c:	f000 fe27 	bl	800225e <HAL_GPIO_WritePin>
	  	  	    	      HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	015b      	lsls	r3, r3, #5
 8001614:	486e      	ldr	r0, [pc, #440]	@ (80017d0 <main+0x3d8>)
 8001616:	2200      	movs	r2, #0
 8001618:	0019      	movs	r1, r3
 800161a:	f000 fe20 	bl	800225e <HAL_GPIO_WritePin>
	                        HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET);
 800161e:	2380      	movs	r3, #128	@ 0x80
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	486b      	ldr	r0, [pc, #428]	@ (80017d0 <main+0x3d8>)
 8001624:	2200      	movs	r2, #0
 8001626:	0019      	movs	r1, r3
 8001628:	f000 fe19 	bl	800225e <HAL_GPIO_WritePin>
	  	  	    	      HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 800162c:	4b68      	ldr	r3, [pc, #416]	@ (80017d0 <main+0x3d8>)
 800162e:	2200      	movs	r2, #0
 8001630:	2140      	movs	r1, #64	@ 0x40
 8001632:	0018      	movs	r0, r3
 8001634:	f000 fe13 	bl	800225e <HAL_GPIO_WritePin>
	                        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8001638:	4b66      	ldr	r3, [pc, #408]	@ (80017d4 <main+0x3dc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	635a      	str	r2, [r3, #52]	@ 0x34
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 8001640:	4b64      	ldr	r3, [pc, #400]	@ (80017d4 <main+0x3dc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	639a      	str	r2, [r3, #56]	@ 0x38

	  	    	          HAL_Delay(3000); // Czas trwania sekwencji
 8001648:	4b65      	ldr	r3, [pc, #404]	@ (80017e0 <main+0x3e8>)
 800164a:	0018      	movs	r0, r3
 800164c:	f000 fb94 	bl	8001d78 <HAL_Delay>
	  	    	          break;
 8001650:	e101      	b.n	8001856 <main+0x45e>
	  	    	        case 5: // Lewy silnik do przodu, prawy do tyłu – obrót w miejscu (lewo)
	                        HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);
 8001652:	2380      	movs	r3, #128	@ 0x80
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	485e      	ldr	r0, [pc, #376]	@ (80017d0 <main+0x3d8>)
 8001658:	2201      	movs	r2, #1
 800165a:	0019      	movs	r1, r3
 800165c:	f000 fdff 	bl	800225e <HAL_GPIO_WritePin>
	  	  	    	      HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	015b      	lsls	r3, r3, #5
 8001664:	485a      	ldr	r0, [pc, #360]	@ (80017d0 <main+0x3d8>)
 8001666:	2200      	movs	r2, #0
 8001668:	0019      	movs	r1, r3
 800166a:	f000 fdf8 	bl	800225e <HAL_GPIO_WritePin>
	                        HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET);
 800166e:	2380      	movs	r3, #128	@ 0x80
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4857      	ldr	r0, [pc, #348]	@ (80017d0 <main+0x3d8>)
 8001674:	2200      	movs	r2, #0
 8001676:	0019      	movs	r1, r3
 8001678:	f000 fdf1 	bl	800225e <HAL_GPIO_WritePin>
	  	  	    	      HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_SET);
 800167c:	4b54      	ldr	r3, [pc, #336]	@ (80017d0 <main+0x3d8>)
 800167e:	2201      	movs	r2, #1
 8001680:	2140      	movs	r1, #64	@ 0x40
 8001682:	0018      	movs	r0, r3
 8001684:	f000 fdeb 	bl	800225e <HAL_GPIO_WritePin>
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8001688:	4b52      	ldr	r3, [pc, #328]	@ (80017d4 <main+0x3dc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	635a      	str	r2, [r3, #52]	@ 0x34
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 8001690:	4b50      	ldr	r3, [pc, #320]	@ (80017d4 <main+0x3dc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	639a      	str	r2, [r3, #56]	@ 0x38
	  	    	          HAL_Delay(2500); // Czas trwania sekwencji
 8001698:	4b50      	ldr	r3, [pc, #320]	@ (80017dc <main+0x3e4>)
 800169a:	0018      	movs	r0, r3
 800169c:	f000 fb6c 	bl	8001d78 <HAL_Delay>
	  	    	          break;
 80016a0:	e0d9      	b.n	8001856 <main+0x45e>
	  	    	        case 6: // Lewy silnik do tyłu, prawy do przodu – obrót w miejscu (prawo)
	                        HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET);
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	484a      	ldr	r0, [pc, #296]	@ (80017d0 <main+0x3d8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	0019      	movs	r1, r3
 80016ac:	f000 fdd7 	bl	800225e <HAL_GPIO_WritePin>
	  	  	    	      HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_SET);
 80016b0:	2380      	movs	r3, #128	@ 0x80
 80016b2:	015b      	lsls	r3, r3, #5
 80016b4:	4846      	ldr	r0, [pc, #280]	@ (80017d0 <main+0x3d8>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	0019      	movs	r1, r3
 80016ba:	f000 fdd0 	bl	800225e <HAL_GPIO_WritePin>
	                        HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);
 80016be:	2380      	movs	r3, #128	@ 0x80
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4843      	ldr	r0, [pc, #268]	@ (80017d0 <main+0x3d8>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	0019      	movs	r1, r3
 80016c8:	f000 fdc9 	bl	800225e <HAL_GPIO_WritePin>
	  	  	    	      HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 80016cc:	4b40      	ldr	r3, [pc, #256]	@ (80017d0 <main+0x3d8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	2140      	movs	r1, #64	@ 0x40
 80016d2:	0018      	movs	r0, r3
 80016d4:	f000 fdc3 	bl	800225e <HAL_GPIO_WritePin>
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 80016d8:	4b3e      	ldr	r3, [pc, #248]	@ (80017d4 <main+0x3dc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	635a      	str	r2, [r3, #52]	@ 0x34
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 80016e0:	4b3c      	ldr	r3, [pc, #240]	@ (80017d4 <main+0x3dc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	639a      	str	r2, [r3, #56]	@ 0x38
	  	    	          HAL_Delay(2500); // Czas trwania sekwencji
 80016e8:	4b3c      	ldr	r3, [pc, #240]	@ (80017dc <main+0x3e4>)
 80016ea:	0018      	movs	r0, r3
 80016ec:	f000 fb44 	bl	8001d78 <HAL_Delay>
	  	    	          break;
 80016f0:	e0b1      	b.n	8001856 <main+0x45e>
	  	    	        case 7: // Jedź do przodu wolniej
	                         HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4836      	ldr	r0, [pc, #216]	@ (80017d0 <main+0x3d8>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	0019      	movs	r1, r3
 80016fc:	f000 fdaf 	bl	800225e <HAL_GPIO_WritePin>
	                         HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 8001700:	2380      	movs	r3, #128	@ 0x80
 8001702:	015b      	lsls	r3, r3, #5
 8001704:	4832      	ldr	r0, [pc, #200]	@ (80017d0 <main+0x3d8>)
 8001706:	2200      	movs	r2, #0
 8001708:	0019      	movs	r1, r3
 800170a:	f000 fda8 	bl	800225e <HAL_GPIO_WritePin>
	                         HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);
 800170e:	2380      	movs	r3, #128	@ 0x80
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	482f      	ldr	r0, [pc, #188]	@ (80017d0 <main+0x3d8>)
 8001714:	2201      	movs	r2, #1
 8001716:	0019      	movs	r1, r3
 8001718:	f000 fda1 	bl	800225e <HAL_GPIO_WritePin>
	                         HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 800171c:	4b2c      	ldr	r3, [pc, #176]	@ (80017d0 <main+0x3d8>)
 800171e:	2200      	movs	r2, #0
 8001720:	2140      	movs	r1, #64	@ 0x40
 8001722:	0018      	movs	r0, r3
 8001724:	f000 fd9b 	bl	800225e <HAL_GPIO_WritePin>
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty / 2);
 8001728:	4b2a      	ldr	r3, [pc, #168]	@ (80017d4 <main+0x3dc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	0852      	lsrs	r2, r2, #1
 8001730:	635a      	str	r2, [r3, #52]	@ 0x34
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty / 2);
 8001732:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <main+0x3dc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	0852      	lsrs	r2, r2, #1
 800173a:	639a      	str	r2, [r3, #56]	@ 0x38
	  	    	          HAL_Delay(4000); // Czas trwania sekwencji
 800173c:	23fa      	movs	r3, #250	@ 0xfa
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	0018      	movs	r0, r3
 8001742:	f000 fb19 	bl	8001d78 <HAL_Delay>
	  	    	          break;
 8001746:	e086      	b.n	8001856 <main+0x45e>
	  	    	        case 8: // Jedź do przodu szybciej
	                         HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);
 8001748:	2380      	movs	r3, #128	@ 0x80
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4820      	ldr	r0, [pc, #128]	@ (80017d0 <main+0x3d8>)
 800174e:	2201      	movs	r2, #1
 8001750:	0019      	movs	r1, r3
 8001752:	f000 fd84 	bl	800225e <HAL_GPIO_WritePin>
	                         HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 8001756:	2380      	movs	r3, #128	@ 0x80
 8001758:	015b      	lsls	r3, r3, #5
 800175a:	481d      	ldr	r0, [pc, #116]	@ (80017d0 <main+0x3d8>)
 800175c:	2200      	movs	r2, #0
 800175e:	0019      	movs	r1, r3
 8001760:	f000 fd7d 	bl	800225e <HAL_GPIO_WritePin>
	                         HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4819      	ldr	r0, [pc, #100]	@ (80017d0 <main+0x3d8>)
 800176a:	2201      	movs	r2, #1
 800176c:	0019      	movs	r1, r3
 800176e:	f000 fd76 	bl	800225e <HAL_GPIO_WritePin>
	                         HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 8001772:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <main+0x3d8>)
 8001774:	2200      	movs	r2, #0
 8001776:	2140      	movs	r1, #64	@ 0x40
 8001778:	0018      	movs	r0, r3
 800177a:	f000 fd70 	bl	800225e <HAL_GPIO_WritePin>
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty*1.20);
 800177e:	6838      	ldr	r0, [r7, #0]
 8001780:	f7ff fc98 	bl	80010b4 <__aeabi_ui2d>
 8001784:	4a17      	ldr	r2, [pc, #92]	@ (80017e4 <main+0x3ec>)
 8001786:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <main+0x3f0>)
 8001788:	f7fe fd68 	bl	800025c <__aeabi_dmul>
 800178c:	0002      	movs	r2, r0
 800178e:	000b      	movs	r3, r1
 8001790:	4910      	ldr	r1, [pc, #64]	@ (80017d4 <main+0x3dc>)
 8001792:	680c      	ldr	r4, [r1, #0]
 8001794:	0010      	movs	r0, r2
 8001796:	0019      	movs	r1, r3
 8001798:	f7fe fd42 	bl	8000220 <__aeabi_d2uiz>
 800179c:	0003      	movs	r3, r0
 800179e:	6363      	str	r3, [r4, #52]	@ 0x34
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty*1.20);
 80017a0:	6838      	ldr	r0, [r7, #0]
 80017a2:	f7ff fc87 	bl	80010b4 <__aeabi_ui2d>
 80017a6:	4a0f      	ldr	r2, [pc, #60]	@ (80017e4 <main+0x3ec>)
 80017a8:	4b0f      	ldr	r3, [pc, #60]	@ (80017e8 <main+0x3f0>)
 80017aa:	f7fe fd57 	bl	800025c <__aeabi_dmul>
 80017ae:	0002      	movs	r2, r0
 80017b0:	000b      	movs	r3, r1
 80017b2:	4908      	ldr	r1, [pc, #32]	@ (80017d4 <main+0x3dc>)
 80017b4:	680c      	ldr	r4, [r1, #0]
 80017b6:	0010      	movs	r0, r2
 80017b8:	0019      	movs	r1, r3
 80017ba:	f7fe fd31 	bl	8000220 <__aeabi_d2uiz>
 80017be:	0003      	movs	r3, r0
 80017c0:	63a3      	str	r3, [r4, #56]	@ 0x38
	  	    	          HAL_Delay(1000); // Czas trwania sekwencji
 80017c2:	23fa      	movs	r3, #250	@ 0xfa
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 fad6 	bl	8001d78 <HAL_Delay>
	  	    	          break;
 80017cc:	e043      	b.n	8001856 <main+0x45e>
 80017ce:	46c0      	nop			@ (mov r8, r8)
 80017d0:	50000800 	.word	0x50000800
 80017d4:	20000028 	.word	0x20000028
 80017d8:	08003818 	.word	0x08003818
 80017dc:	000009c4 	.word	0x000009c4
 80017e0:	00000bb8 	.word	0x00000bb8
 80017e4:	33333333 	.word	0x33333333
 80017e8:	3ff33333 	.word	0x3ff33333
	  	    	        case 9: // Zatrzymaj się SOFT STOP z mrugnięciem LED
	                         HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	481d      	ldr	r0, [pc, #116]	@ (8001868 <main+0x470>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	0019      	movs	r1, r3
 80017f6:	f000 fd32 	bl	800225e <HAL_GPIO_WritePin>
	  	  	    	       HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_SET);
 80017fa:	2380      	movs	r3, #128	@ 0x80
 80017fc:	015b      	lsls	r3, r3, #5
 80017fe:	481a      	ldr	r0, [pc, #104]	@ (8001868 <main+0x470>)
 8001800:	2201      	movs	r2, #1
 8001802:	0019      	movs	r1, r3
 8001804:	f000 fd2b 	bl	800225e <HAL_GPIO_WritePin>
	                         HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4816      	ldr	r0, [pc, #88]	@ (8001868 <main+0x470>)
 800180e:	2201      	movs	r2, #1
 8001810:	0019      	movs	r1, r3
 8001812:	f000 fd24 	bl	800225e <HAL_GPIO_WritePin>
	  	  	    	       HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_SET);
 8001816:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <main+0x470>)
 8001818:	2201      	movs	r2, #1
 800181a:	2140      	movs	r1, #64	@ 0x40
 800181c:	0018      	movs	r0, r3
 800181e:	f000 fd1e 	bl	800225e <HAL_GPIO_WritePin>
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001822:	4b12      	ldr	r3, [pc, #72]	@ (800186c <main+0x474>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2200      	movs	r2, #0
 8001828:	635a      	str	r2, [r3, #52]	@ 0x34
	  	    	          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800182a:	4b10      	ldr	r3, [pc, #64]	@ (800186c <main+0x474>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2200      	movs	r2, #0
 8001830:	639a      	str	r2, [r3, #56]	@ 0x38
	  	    	          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001832:	23a0      	movs	r3, #160	@ 0xa0
 8001834:	05db      	lsls	r3, r3, #23
 8001836:	2201      	movs	r2, #1
 8001838:	2120      	movs	r1, #32
 800183a:	0018      	movs	r0, r3
 800183c:	f000 fd0f 	bl	800225e <HAL_GPIO_WritePin>
	  	    	          HAL_Delay(200);
 8001840:	20c8      	movs	r0, #200	@ 0xc8
 8001842:	f000 fa99 	bl	8001d78 <HAL_Delay>
	  	    	          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001846:	23a0      	movs	r3, #160	@ 0xa0
 8001848:	05db      	lsls	r3, r3, #23
 800184a:	2200      	movs	r2, #0
 800184c:	2120      	movs	r1, #32
 800184e:	0018      	movs	r0, r3
 8001850:	f000 fd05 	bl	800225e <HAL_GPIO_WritePin>
	  	    	          break;
 8001854:	46c0      	nop			@ (mov r8, r8)
	  	    	    for (int i = 0; i < 10; ++i)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3301      	adds	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b09      	cmp	r3, #9
 8001860:	dc00      	bgt.n	8001864 <main+0x46c>
 8001862:	e622      	b.n	80014aa <main+0xb2>
  {
 8001864:	e5d3      	b.n	800140e <main+0x16>
 8001866:	46c0      	nop			@ (mov r8, r8)
 8001868:	50000800 	.word	0x50000800
 800186c:	20000028 	.word	0x20000028

08001870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b093      	sub	sp, #76	@ 0x4c
 8001874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	2414      	movs	r4, #20
 8001878:	193b      	adds	r3, r7, r4
 800187a:	0018      	movs	r0, r3
 800187c:	2334      	movs	r3, #52	@ 0x34
 800187e:	001a      	movs	r2, r3
 8001880:	2100      	movs	r1, #0
 8001882:	f001 ff91 	bl	80037a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001886:	003b      	movs	r3, r7
 8001888:	0018      	movs	r0, r3
 800188a:	2314      	movs	r3, #20
 800188c:	001a      	movs	r2, r3
 800188e:	2100      	movs	r1, #0
 8001890:	f001 ff8a 	bl	80037a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001894:	4b1c      	ldr	r3, [pc, #112]	@ (8001908 <SystemClock_Config+0x98>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a1c      	ldr	r2, [pc, #112]	@ (800190c <SystemClock_Config+0x9c>)
 800189a:	401a      	ands	r2, r3
 800189c:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <SystemClock_Config+0x98>)
 800189e:	2180      	movs	r1, #128	@ 0x80
 80018a0:	0109      	lsls	r1, r1, #4
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a6:	0021      	movs	r1, r4
 80018a8:	187b      	adds	r3, r7, r1
 80018aa:	2202      	movs	r2, #2
 80018ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ae:	187b      	adds	r3, r7, r1
 80018b0:	2201      	movs	r2, #1
 80018b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	2210      	movs	r2, #16
 80018b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018ba:	187b      	adds	r3, r7, r1
 80018bc:	2200      	movs	r2, #0
 80018be:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c0:	187b      	adds	r3, r7, r1
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 fd04 	bl	80022d0 <HAL_RCC_OscConfig>
 80018c8:	1e03      	subs	r3, r0, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80018cc:	f000 f918 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d0:	003b      	movs	r3, r7
 80018d2:	220f      	movs	r2, #15
 80018d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018d6:	003b      	movs	r3, r7
 80018d8:	2201      	movs	r2, #1
 80018da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018dc:	003b      	movs	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018e2:	003b      	movs	r3, r7
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e8:	003b      	movs	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018ee:	003b      	movs	r3, r7
 80018f0:	2100      	movs	r1, #0
 80018f2:	0018      	movs	r0, r3
 80018f4:	f001 f868 	bl	80029c8 <HAL_RCC_ClockConfig>
 80018f8:	1e03      	subs	r3, r0, #0
 80018fa:	d001      	beq.n	8001900 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80018fc:	f000 f900 	bl	8001b00 <Error_Handler>
  }
}
 8001900:	46c0      	nop			@ (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b013      	add	sp, #76	@ 0x4c
 8001906:	bd90      	pop	{r4, r7, pc}
 8001908:	40007000 	.word	0x40007000
 800190c:	ffffe7ff 	.word	0xffffe7ff

08001910 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001916:	2318      	movs	r3, #24
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	0018      	movs	r0, r3
 800191c:	2310      	movs	r3, #16
 800191e:	001a      	movs	r2, r3
 8001920:	2100      	movs	r1, #0
 8001922:	f001 ff41 	bl	80037a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001926:	2310      	movs	r3, #16
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	0018      	movs	r0, r3
 800192c:	2308      	movs	r3, #8
 800192e:	001a      	movs	r2, r3
 8001930:	2100      	movs	r1, #0
 8001932:	f001 ff39 	bl	80037a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001936:	003b      	movs	r3, r7
 8001938:	0018      	movs	r0, r3
 800193a:	2310      	movs	r3, #16
 800193c:	001a      	movs	r2, r3
 800193e:	2100      	movs	r1, #0
 8001940:	f001 ff32 	bl	80037a8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001944:	4b35      	ldr	r3, [pc, #212]	@ (8001a1c <MX_TIM2_Init+0x10c>)
 8001946:	2280      	movs	r2, #128	@ 0x80
 8001948:	05d2      	lsls	r2, r2, #23
 800194a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800194c:	4b33      	ldr	r3, [pc, #204]	@ (8001a1c <MX_TIM2_Init+0x10c>)
 800194e:	2200      	movs	r2, #0
 8001950:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001952:	4b32      	ldr	r3, [pc, #200]	@ (8001a1c <MX_TIM2_Init+0x10c>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600;
 8001958:	4b30      	ldr	r3, [pc, #192]	@ (8001a1c <MX_TIM2_Init+0x10c>)
 800195a:	22c8      	movs	r2, #200	@ 0xc8
 800195c:	00d2      	lsls	r2, r2, #3
 800195e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001960:	4b2e      	ldr	r3, [pc, #184]	@ (8001a1c <MX_TIM2_Init+0x10c>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001966:	4b2d      	ldr	r3, [pc, #180]	@ (8001a1c <MX_TIM2_Init+0x10c>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800196c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a1c <MX_TIM2_Init+0x10c>)
 800196e:	0018      	movs	r0, r3
 8001970:	f001 f9f8 	bl	8002d64 <HAL_TIM_Base_Init>
 8001974:	1e03      	subs	r3, r0, #0
 8001976:	d001      	beq.n	800197c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001978:	f000 f8c2 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197c:	2118      	movs	r1, #24
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2280      	movs	r2, #128	@ 0x80
 8001982:	0152      	lsls	r2, r2, #5
 8001984:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001986:	187a      	adds	r2, r7, r1
 8001988:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <MX_TIM2_Init+0x10c>)
 800198a:	0011      	movs	r1, r2
 800198c:	0018      	movs	r0, r3
 800198e:	f001 fbc3 	bl	8003118 <HAL_TIM_ConfigClockSource>
 8001992:	1e03      	subs	r3, r0, #0
 8001994:	d001      	beq.n	800199a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001996:	f000 f8b3 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800199a:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <MX_TIM2_Init+0x10c>)
 800199c:	0018      	movs	r0, r3
 800199e:	f001 fa21 	bl	8002de4 <HAL_TIM_PWM_Init>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80019a6:	f000 f8ab 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019aa:	2110      	movs	r1, #16
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b8:	187a      	adds	r2, r7, r1
 80019ba:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <MX_TIM2_Init+0x10c>)
 80019bc:	0011      	movs	r1, r2
 80019be:	0018      	movs	r0, r3
 80019c0:	f001 fe9a 	bl	80036f8 <HAL_TIMEx_MasterConfigSynchronization>
 80019c4:	1e03      	subs	r3, r0, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80019c8:	f000 f89a 	bl	8001b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019cc:	003b      	movs	r3, r7
 80019ce:	2260      	movs	r2, #96	@ 0x60
 80019d0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80019d2:	003b      	movs	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d8:	003b      	movs	r3, r7
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019de:	003b      	movs	r3, r7
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e4:	0039      	movs	r1, r7
 80019e6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <MX_TIM2_Init+0x10c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	0018      	movs	r0, r3
 80019ec:	f001 face 	bl	8002f8c <HAL_TIM_PWM_ConfigChannel>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80019f4:	f000 f884 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019f8:	0039      	movs	r1, r7
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <MX_TIM2_Init+0x10c>)
 80019fc:	2204      	movs	r2, #4
 80019fe:	0018      	movs	r0, r3
 8001a00:	f001 fac4 	bl	8002f8c <HAL_TIM_PWM_ConfigChannel>
 8001a04:	1e03      	subs	r3, r0, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8001a08:	f000 f87a 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a0c:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <MX_TIM2_Init+0x10c>)
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f000 f8a6 	bl	8001b60 <HAL_TIM_MspPostInit>

}
 8001a14:	46c0      	nop			@ (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b00a      	add	sp, #40	@ 0x28
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000028 	.word	0x20000028

08001a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b089      	sub	sp, #36	@ 0x24
 8001a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	240c      	movs	r4, #12
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	2314      	movs	r3, #20
 8001a2e:	001a      	movs	r2, r3
 8001a30:	2100      	movs	r1, #0
 8001a32:	f001 feb9 	bl	80037a8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	4b30      	ldr	r3, [pc, #192]	@ (8001af8 <MX_GPIO_Init+0xd8>)
 8001a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <MX_GPIO_Init+0xd8>)
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a42:	4b2d      	ldr	r3, [pc, #180]	@ (8001af8 <MX_GPIO_Init+0xd8>)
 8001a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a46:	2204      	movs	r2, #4
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <MX_GPIO_Init+0xd8>)
 8001a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a52:	4b29      	ldr	r3, [pc, #164]	@ (8001af8 <MX_GPIO_Init+0xd8>)
 8001a54:	2101      	movs	r1, #1
 8001a56:	430a      	orrs	r2, r1
 8001a58:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a5a:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <MX_GPIO_Init+0xd8>)
 8001a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4013      	ands	r3, r2
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a66:	23a0      	movs	r3, #160	@ 0xa0
 8001a68:	05db      	lsls	r3, r3, #23
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2120      	movs	r1, #32
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 fbf5 	bl	800225e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN4_Pin|IN3_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8001a74:	23aa      	movs	r3, #170	@ 0xaa
 8001a76:	015b      	lsls	r3, r3, #5
 8001a78:	4820      	ldr	r0, [pc, #128]	@ (8001afc <MX_GPIO_Init+0xdc>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	f000 fbee 	bl	800225e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a82:	193b      	adds	r3, r7, r4
 8001a84:	2280      	movs	r2, #128	@ 0x80
 8001a86:	0192      	lsls	r2, r2, #6
 8001a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	193b      	adds	r3, r7, r4
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a96:	193b      	adds	r3, r7, r4
 8001a98:	4a18      	ldr	r2, [pc, #96]	@ (8001afc <MX_GPIO_Init+0xdc>)
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	0010      	movs	r0, r2
 8001a9e:	f000 fa43 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001aa2:	193b      	adds	r3, r7, r4
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa8:	193b      	adds	r3, r7, r4
 8001aaa:	2201      	movs	r2, #1
 8001aac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	193b      	adds	r3, r7, r4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	193b      	adds	r3, r7, r4
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001aba:	193a      	adds	r2, r7, r4
 8001abc:	23a0      	movs	r3, #160	@ 0xa0
 8001abe:	05db      	lsls	r3, r3, #23
 8001ac0:	0011      	movs	r1, r2
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f000 fa30 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN4_Pin IN3_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN4_Pin|IN3_Pin|IN1_Pin|IN2_Pin;
 8001ac8:	0021      	movs	r1, r4
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	22aa      	movs	r2, #170	@ 0xaa
 8001ace:	0152      	lsls	r2, r2, #5
 8001ad0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	187b      	adds	r3, r7, r1
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	187b      	adds	r3, r7, r1
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <MX_GPIO_Init+0xdc>)
 8001ae8:	0019      	movs	r1, r3
 8001aea:	0010      	movs	r0, r2
 8001aec:	f000 fa1c 	bl	8001f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001af0:	46c0      	nop			@ (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b009      	add	sp, #36	@ 0x24
 8001af6:	bd90      	pop	{r4, r7, pc}
 8001af8:	40021000 	.word	0x40021000
 8001afc:	50000800 	.word	0x50000800

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	46c0      	nop			@ (mov r8, r8)
 8001b0a:	e7fd      	b.n	8001b08 <Error_Handler+0x8>

08001b0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b10:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <HAL_MspInit+0x24>)
 8001b12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_MspInit+0x24>)
 8001b16:	2101      	movs	r1, #1
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1c:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <HAL_MspInit+0x24>)
 8001b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <HAL_MspInit+0x24>)
 8001b22:	2180      	movs	r1, #128	@ 0x80
 8001b24:	0549      	lsls	r1, r1, #21
 8001b26:	430a      	orrs	r2, r1
 8001b28:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2a:	46c0      	nop			@ (mov r8, r8)
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	@ 0x80
 8001b42:	05db      	lsls	r3, r3, #23
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d105      	bne.n	8001b54 <HAL_TIM_Base_MspInit+0x20>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <HAL_TIM_Base_MspInit+0x28>)
 8001b4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b4c:	4b03      	ldr	r3, [pc, #12]	@ (8001b5c <HAL_TIM_Base_MspInit+0x28>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	430a      	orrs	r2, r1
 8001b52:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b54:	46c0      	nop			@ (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b002      	add	sp, #8
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000

08001b60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	240c      	movs	r4, #12
 8001b6a:	193b      	adds	r3, r7, r4
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	2314      	movs	r3, #20
 8001b70:	001a      	movs	r2, r3
 8001b72:	2100      	movs	r1, #0
 8001b74:	f001 fe18 	bl	80037a8 <memset>
  if(htim->Instance==TIM2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	05db      	lsls	r3, r3, #23
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d122      	bne.n	8001bca <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <HAL_TIM_MspPostInit+0x74>)
 8001b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <HAL_TIM_MspPostInit+0x74>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b90:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <HAL_TIM_MspPostInit+0x74>)
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b94:	2201      	movs	r2, #1
 8001b96:	4013      	ands	r3, r2
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b9c:	0021      	movs	r1, r4
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	2202      	movs	r2, #2
 8001bba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	187a      	adds	r2, r7, r1
 8001bbe:	23a0      	movs	r3, #160	@ 0xa0
 8001bc0:	05db      	lsls	r3, r3, #23
 8001bc2:	0011      	movs	r1, r2
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f000 f9af 	bl	8001f28 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b009      	add	sp, #36	@ 0x24
 8001bd0:	bd90      	pop	{r4, r7, pc}
 8001bd2:	46c0      	nop			@ (mov r8, r8)
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bdc:	46c0      	nop			@ (mov r8, r8)
 8001bde:	e7fd      	b.n	8001bdc <NMI_Handler+0x4>

08001be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be4:	46c0      	nop			@ (mov r8, r8)
 8001be6:	e7fd      	b.n	8001be4 <HardFault_Handler+0x4>

08001be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c00:	f000 f89e 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c04:	46c0      	nop			@ (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001c14:	4813      	ldr	r0, [pc, #76]	@ (8001c64 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001c16:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c18:	f7ff fff7 	bl	8001c0a <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001c1c:	4812      	ldr	r0, [pc, #72]	@ (8001c68 <LoopForever+0x6>)
    LDR R1, [R0]
 8001c1e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001c20:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001c22:	4a12      	ldr	r2, [pc, #72]	@ (8001c6c <LoopForever+0xa>)
    CMP R1, R2
 8001c24:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001c26:	d105      	bne.n	8001c34 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001c28:	4811      	ldr	r0, [pc, #68]	@ (8001c70 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001c2a:	4912      	ldr	r1, [pc, #72]	@ (8001c74 <LoopForever+0x12>)
    STR R1, [R0]
 8001c2c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001c2e:	4812      	ldr	r0, [pc, #72]	@ (8001c78 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001c30:	4912      	ldr	r1, [pc, #72]	@ (8001c7c <LoopForever+0x1a>)
    STR R1, [R0]
 8001c32:	6001      	str	r1, [r0, #0]

08001c34 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c34:	4812      	ldr	r0, [pc, #72]	@ (8001c80 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001c36:	4913      	ldr	r1, [pc, #76]	@ (8001c84 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001c38:	4a13      	ldr	r2, [pc, #76]	@ (8001c88 <LoopForever+0x26>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c3c:	e002      	b.n	8001c44 <LoopCopyDataInit>

08001c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c42:	3304      	adds	r3, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c48:	d3f9      	bcc.n	8001c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4a:	4a10      	ldr	r2, [pc, #64]	@ (8001c8c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001c4c:	4c10      	ldr	r4, [pc, #64]	@ (8001c90 <LoopForever+0x2e>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c50:	e001      	b.n	8001c56 <LoopFillZerobss>

08001c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c54:	3204      	adds	r2, #4

08001c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c58:	d3fb      	bcc.n	8001c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f001 fdad 	bl	80037b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5e:	f7ff fbcb 	bl	80013f8 <main>

08001c62 <LoopForever>:

LoopForever:
    b LoopForever
 8001c62:	e7fe      	b.n	8001c62 <LoopForever>
   ldr   r0, =_estack
 8001c64:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8001c68:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001c6c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001c70:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001c74:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001c78:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001c7c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c88:	08003864 	.word	0x08003864
  ldr r2, =_sbss
 8001c8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c90:	2000006c 	.word	0x2000006c

08001c94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c94:	e7fe      	b.n	8001c94 <ADC1_IRQHandler>
	...

08001c98 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <HAL_Init+0x3c>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <HAL_Init+0x3c>)
 8001caa:	2140      	movs	r1, #64	@ 0x40
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f000 f811 	bl	8001cd8 <HAL_InitTick>
 8001cb6:	1e03      	subs	r3, r0, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	e001      	b.n	8001cc6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cc2:	f7ff ff23 	bl	8001b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	781b      	ldrb	r3, [r3, #0]
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	40022000 	.word	0x40022000

08001cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce0:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <HAL_InitTick+0x5c>)
 8001ce2:	681c      	ldr	r4, [r3, #0]
 8001ce4:	4b14      	ldr	r3, [pc, #80]	@ (8001d38 <HAL_InitTick+0x60>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	0019      	movs	r1, r3
 8001cea:	23fa      	movs	r3, #250	@ 0xfa
 8001cec:	0098      	lsls	r0, r3, #2
 8001cee:	f7fe fa0b 	bl	8000108 <__udivsi3>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	0020      	movs	r0, r4
 8001cf8:	f7fe fa06 	bl	8000108 <__udivsi3>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f000 f905 	bl	8001f0e <HAL_SYSTICK_Config>
 8001d04:	1e03      	subs	r3, r0, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e00f      	b.n	8001d2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d80b      	bhi.n	8001d2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	2301      	movs	r3, #1
 8001d16:	425b      	negs	r3, r3
 8001d18:	2200      	movs	r2, #0
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f000 f8e2 	bl	8001ee4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_InitTick+0x64>)
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b003      	add	sp, #12
 8001d32:	bd90      	pop	{r4, r7, pc}
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <HAL_IncTick+0x1c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	001a      	movs	r2, r3
 8001d4a:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_IncTick+0x20>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	18d2      	adds	r2, r2, r3
 8001d50:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <HAL_IncTick+0x20>)
 8001d52:	601a      	str	r2, [r3, #0]
}
 8001d54:	46c0      	nop			@ (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	20000068 	.word	0x20000068

08001d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b02      	ldr	r3, [pc, #8]	@ (8001d74 <HAL_GetTick+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			@ (mov r8, r8)
 8001d74:	20000068 	.word	0x20000068

08001d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff fff0 	bl	8001d64 <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	d005      	beq.n	8001d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d92:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <HAL_Delay+0x44>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	001a      	movs	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	189b      	adds	r3, r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	f7ff ffe0 	bl	8001d64 <HAL_GetTick>
 8001da4:	0002      	movs	r2, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d8f7      	bhi.n	8001da0 <HAL_Delay+0x28>
  {
  }
}
 8001db0:	46c0      	nop			@ (mov r8, r8)
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b004      	add	sp, #16
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			@ (mov r8, r8)
 8001dbc:	20000008 	.word	0x20000008

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dd4:	d828      	bhi.n	8001e28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd6:	4a2f      	ldr	r2, [pc, #188]	@ (8001e94 <__NVIC_SetPriority+0xd4>)
 8001dd8:	1dfb      	adds	r3, r7, #7
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	33c0      	adds	r3, #192	@ 0xc0
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	589b      	ldr	r3, [r3, r2]
 8001de6:	1dfa      	adds	r2, r7, #7
 8001de8:	7812      	ldrb	r2, [r2, #0]
 8001dea:	0011      	movs	r1, r2
 8001dec:	2203      	movs	r2, #3
 8001dee:	400a      	ands	r2, r1
 8001df0:	00d2      	lsls	r2, r2, #3
 8001df2:	21ff      	movs	r1, #255	@ 0xff
 8001df4:	4091      	lsls	r1, r2
 8001df6:	000a      	movs	r2, r1
 8001df8:	43d2      	mvns	r2, r2
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	019b      	lsls	r3, r3, #6
 8001e02:	22ff      	movs	r2, #255	@ 0xff
 8001e04:	401a      	ands	r2, r3
 8001e06:	1dfb      	adds	r3, r7, #7
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	4003      	ands	r3, r0
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e14:	481f      	ldr	r0, [pc, #124]	@ (8001e94 <__NVIC_SetPriority+0xd4>)
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	33c0      	adds	r3, #192	@ 0xc0
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e26:	e031      	b.n	8001e8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e28:	4a1b      	ldr	r2, [pc, #108]	@ (8001e98 <__NVIC_SetPriority+0xd8>)
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	0019      	movs	r1, r3
 8001e30:	230f      	movs	r3, #15
 8001e32:	400b      	ands	r3, r1
 8001e34:	3b08      	subs	r3, #8
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3306      	adds	r3, #6
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	18d3      	adds	r3, r2, r3
 8001e3e:	3304      	adds	r3, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	1dfa      	adds	r2, r7, #7
 8001e44:	7812      	ldrb	r2, [r2, #0]
 8001e46:	0011      	movs	r1, r2
 8001e48:	2203      	movs	r2, #3
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	00d2      	lsls	r2, r2, #3
 8001e4e:	21ff      	movs	r1, #255	@ 0xff
 8001e50:	4091      	lsls	r1, r2
 8001e52:	000a      	movs	r2, r1
 8001e54:	43d2      	mvns	r2, r2
 8001e56:	401a      	ands	r2, r3
 8001e58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	019b      	lsls	r3, r3, #6
 8001e5e:	22ff      	movs	r2, #255	@ 0xff
 8001e60:	401a      	ands	r2, r3
 8001e62:	1dfb      	adds	r3, r7, #7
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	0018      	movs	r0, r3
 8001e68:	2303      	movs	r3, #3
 8001e6a:	4003      	ands	r3, r0
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e70:	4809      	ldr	r0, [pc, #36]	@ (8001e98 <__NVIC_SetPriority+0xd8>)
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	001c      	movs	r4, r3
 8001e78:	230f      	movs	r3, #15
 8001e7a:	4023      	ands	r3, r4
 8001e7c:	3b08      	subs	r3, #8
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	430a      	orrs	r2, r1
 8001e82:	3306      	adds	r3, #6
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	18c3      	adds	r3, r0, r3
 8001e88:	3304      	adds	r3, #4
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b003      	add	sp, #12
 8001e92:	bd90      	pop	{r4, r7, pc}
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	1e5a      	subs	r2, r3, #1
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	045b      	lsls	r3, r3, #17
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d301      	bcc.n	8001eb4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e010      	b.n	8001ed6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <SysTick_Config+0x44>)
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	3a01      	subs	r2, #1
 8001eba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	425b      	negs	r3, r3
 8001ec0:	2103      	movs	r1, #3
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7ff ff7c 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec8:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <SysTick_Config+0x44>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ece:	4b04      	ldr	r3, [pc, #16]	@ (8001ee0 <SysTick_Config+0x44>)
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	e000e010 	.word	0xe000e010

08001ee4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	210f      	movs	r1, #15
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	1c02      	adds	r2, r0, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b25b      	sxtb	r3, r3
 8001efe:	0011      	movs	r1, r2
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7ff ff5d 	bl	8001dc0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001f06:	46c0      	nop			@ (mov r8, r8)
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b004      	add	sp, #16
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff ffbf 	bl	8001e9c <SysTick_Config>
 8001f1e:	0003      	movs	r3, r0
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b002      	add	sp, #8
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f3e:	e155      	b.n	80021ec <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2101      	movs	r1, #1
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4091      	lsls	r1, r2
 8001f4a:	000a      	movs	r2, r1
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d100      	bne.n	8001f58 <HAL_GPIO_Init+0x30>
 8001f56:	e146      	b.n	80021e6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d005      	beq.n	8001f70 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2203      	movs	r2, #3
 8001f6a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d130      	bne.n	8001fd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	0013      	movs	r3, r2
 8001f80:	43da      	mvns	r2, r3
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	409a      	lsls	r2, r3
 8001f92:	0013      	movs	r3, r2
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	409a      	lsls	r2, r3
 8001fac:	0013      	movs	r3, r2
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	0013      	movs	r3, r2
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d017      	beq.n	800200e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	409a      	lsls	r2, r3
 8001fec:	0013      	movs	r3, r2
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	409a      	lsls	r2, r3
 8002000:	0013      	movs	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2203      	movs	r2, #3
 8002014:	4013      	ands	r3, r2
 8002016:	2b02      	cmp	r3, #2
 8002018:	d123      	bne.n	8002062 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	08da      	lsrs	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3208      	adds	r2, #8
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	58d3      	ldr	r3, [r2, r3]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2207      	movs	r2, #7
 800202c:	4013      	ands	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	409a      	lsls	r2, r3
 8002034:	0013      	movs	r3, r2
 8002036:	43da      	mvns	r2, r3
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2107      	movs	r1, #7
 8002046:	400b      	ands	r3, r1
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	409a      	lsls	r2, r3
 800204c:	0013      	movs	r3, r2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	08da      	lsrs	r2, r3, #3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3208      	adds	r2, #8
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	6939      	ldr	r1, [r7, #16]
 8002060:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	2203      	movs	r2, #3
 800206e:	409a      	lsls	r2, r3
 8002070:	0013      	movs	r3, r2
 8002072:	43da      	mvns	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2203      	movs	r2, #3
 8002080:	401a      	ands	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	409a      	lsls	r2, r3
 8002088:	0013      	movs	r3, r2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	23c0      	movs	r3, #192	@ 0xc0
 800209c:	029b      	lsls	r3, r3, #10
 800209e:	4013      	ands	r3, r2
 80020a0:	d100      	bne.n	80020a4 <HAL_GPIO_Init+0x17c>
 80020a2:	e0a0      	b.n	80021e6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a4:	4b57      	ldr	r3, [pc, #348]	@ (8002204 <HAL_GPIO_Init+0x2dc>)
 80020a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020a8:	4b56      	ldr	r3, [pc, #344]	@ (8002204 <HAL_GPIO_Init+0x2dc>)
 80020aa:	2101      	movs	r1, #1
 80020ac:	430a      	orrs	r2, r1
 80020ae:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b0:	4a55      	ldr	r2, [pc, #340]	@ (8002208 <HAL_GPIO_Init+0x2e0>)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3302      	adds	r3, #2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	589b      	ldr	r3, [r3, r2]
 80020bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2203      	movs	r2, #3
 80020c2:	4013      	ands	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	220f      	movs	r2, #15
 80020c8:	409a      	lsls	r2, r3
 80020ca:	0013      	movs	r3, r2
 80020cc:	43da      	mvns	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	23a0      	movs	r3, #160	@ 0xa0
 80020d8:	05db      	lsls	r3, r3, #23
 80020da:	429a      	cmp	r2, r3
 80020dc:	d01f      	beq.n	800211e <HAL_GPIO_Init+0x1f6>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4a      	ldr	r2, [pc, #296]	@ (800220c <HAL_GPIO_Init+0x2e4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d019      	beq.n	800211a <HAL_GPIO_Init+0x1f2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a49      	ldr	r2, [pc, #292]	@ (8002210 <HAL_GPIO_Init+0x2e8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0x1ee>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a48      	ldr	r2, [pc, #288]	@ (8002214 <HAL_GPIO_Init+0x2ec>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00d      	beq.n	8002112 <HAL_GPIO_Init+0x1ea>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a47      	ldr	r2, [pc, #284]	@ (8002218 <HAL_GPIO_Init+0x2f0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <HAL_GPIO_Init+0x1e6>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a46      	ldr	r2, [pc, #280]	@ (800221c <HAL_GPIO_Init+0x2f4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_GPIO_Init+0x1e2>
 8002106:	2305      	movs	r3, #5
 8002108:	e00a      	b.n	8002120 <HAL_GPIO_Init+0x1f8>
 800210a:	2306      	movs	r3, #6
 800210c:	e008      	b.n	8002120 <HAL_GPIO_Init+0x1f8>
 800210e:	2304      	movs	r3, #4
 8002110:	e006      	b.n	8002120 <HAL_GPIO_Init+0x1f8>
 8002112:	2303      	movs	r3, #3
 8002114:	e004      	b.n	8002120 <HAL_GPIO_Init+0x1f8>
 8002116:	2302      	movs	r3, #2
 8002118:	e002      	b.n	8002120 <HAL_GPIO_Init+0x1f8>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_GPIO_Init+0x1f8>
 800211e:	2300      	movs	r3, #0
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	2103      	movs	r1, #3
 8002124:	400a      	ands	r2, r1
 8002126:	0092      	lsls	r2, r2, #2
 8002128:	4093      	lsls	r3, r2
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002130:	4935      	ldr	r1, [pc, #212]	@ (8002208 <HAL_GPIO_Init+0x2e0>)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	3302      	adds	r3, #2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800213e:	4b38      	ldr	r3, [pc, #224]	@ (8002220 <HAL_GPIO_Init+0x2f8>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43da      	mvns	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	2380      	movs	r3, #128	@ 0x80
 8002154:	035b      	lsls	r3, r3, #13
 8002156:	4013      	ands	r3, r2
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002162:	4b2f      	ldr	r3, [pc, #188]	@ (8002220 <HAL_GPIO_Init+0x2f8>)
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002168:	4b2d      	ldr	r3, [pc, #180]	@ (8002220 <HAL_GPIO_Init+0x2f8>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	43da      	mvns	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	2380      	movs	r3, #128	@ 0x80
 800217e:	039b      	lsls	r3, r3, #14
 8002180:	4013      	ands	r3, r2
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800218c:	4b24      	ldr	r3, [pc, #144]	@ (8002220 <HAL_GPIO_Init+0x2f8>)
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002192:	4b23      	ldr	r3, [pc, #140]	@ (8002220 <HAL_GPIO_Init+0x2f8>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	43da      	mvns	r2, r3
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	2380      	movs	r3, #128	@ 0x80
 80021a8:	029b      	lsls	r3, r3, #10
 80021aa:	4013      	ands	r3, r2
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <HAL_GPIO_Init+0x2f8>)
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021bc:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <HAL_GPIO_Init+0x2f8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	43da      	mvns	r2, r3
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	025b      	lsls	r3, r3, #9
 80021d4:	4013      	ands	r3, r2
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <HAL_GPIO_Init+0x2f8>)
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	3301      	adds	r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	40da      	lsrs	r2, r3
 80021f4:	1e13      	subs	r3, r2, #0
 80021f6:	d000      	beq.n	80021fa <HAL_GPIO_Init+0x2d2>
 80021f8:	e6a2      	b.n	8001f40 <HAL_GPIO_Init+0x18>
  }
}
 80021fa:	46c0      	nop			@ (mov r8, r8)
 80021fc:	46c0      	nop			@ (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b006      	add	sp, #24
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	40010000 	.word	0x40010000
 800220c:	50000400 	.word	0x50000400
 8002210:	50000800 	.word	0x50000800
 8002214:	50000c00 	.word	0x50000c00
 8002218:	50001000 	.word	0x50001000
 800221c:	50001c00 	.word	0x50001c00
 8002220:	40010400 	.word	0x40010400

08002224 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	000a      	movs	r2, r1
 800222e:	1cbb      	adds	r3, r7, #2
 8002230:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	1cba      	adds	r2, r7, #2
 8002238:	8812      	ldrh	r2, [r2, #0]
 800223a:	4013      	ands	r3, r2
 800223c:	d004      	beq.n	8002248 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800223e:	230f      	movs	r3, #15
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e003      	b.n	8002250 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002248:	230f      	movs	r3, #15
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002250:	230f      	movs	r3, #15
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	781b      	ldrb	r3, [r3, #0]
}
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b004      	add	sp, #16
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	0008      	movs	r0, r1
 8002268:	0011      	movs	r1, r2
 800226a:	1cbb      	adds	r3, r7, #2
 800226c:	1c02      	adds	r2, r0, #0
 800226e:	801a      	strh	r2, [r3, #0]
 8002270:	1c7b      	adds	r3, r7, #1
 8002272:	1c0a      	adds	r2, r1, #0
 8002274:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002276:	1c7b      	adds	r3, r7, #1
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227e:	1cbb      	adds	r3, r7, #2
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002286:	e003      	b.n	8002290 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002288:	1cbb      	adds	r3, r7, #2
 800228a:	881a      	ldrh	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002290:	46c0      	nop			@ (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	b002      	add	sp, #8
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	000a      	movs	r2, r1
 80022a2:	1cbb      	adds	r3, r7, #2
 80022a4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022ac:	1cbb      	adds	r3, r7, #2
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	041a      	lsls	r2, r3, #16
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	1cb9      	adds	r1, r7, #2
 80022bc:	8809      	ldrh	r1, [r1, #0]
 80022be:	400b      	ands	r3, r1
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	619a      	str	r2, [r3, #24]
}
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b004      	add	sp, #16
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d0:	b5b0      	push	{r4, r5, r7, lr}
 80022d2:	b08a      	sub	sp, #40	@ 0x28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	f000 fb6c 	bl	80029bc <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e4:	4bc8      	ldr	r3, [pc, #800]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	220c      	movs	r2, #12
 80022ea:	4013      	ands	r3, r2
 80022ec:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ee:	4bc6      	ldr	r3, [pc, #792]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	2380      	movs	r3, #128	@ 0x80
 80022f4:	025b      	lsls	r3, r3, #9
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2201      	movs	r2, #1
 8002300:	4013      	ands	r3, r2
 8002302:	d100      	bne.n	8002306 <HAL_RCC_OscConfig+0x36>
 8002304:	e07d      	b.n	8002402 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	2b08      	cmp	r3, #8
 800230a:	d007      	beq.n	800231c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b0c      	cmp	r3, #12
 8002310:	d112      	bne.n	8002338 <HAL_RCC_OscConfig+0x68>
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	025b      	lsls	r3, r3, #9
 8002318:	429a      	cmp	r2, r3
 800231a:	d10d      	bne.n	8002338 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	4bba      	ldr	r3, [pc, #744]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	029b      	lsls	r3, r3, #10
 8002324:	4013      	ands	r3, r2
 8002326:	d100      	bne.n	800232a <HAL_RCC_OscConfig+0x5a>
 8002328:	e06a      	b.n	8002400 <HAL_RCC_OscConfig+0x130>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d166      	bne.n	8002400 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	f000 fb42 	bl	80029bc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	2380      	movs	r3, #128	@ 0x80
 800233e:	025b      	lsls	r3, r3, #9
 8002340:	429a      	cmp	r2, r3
 8002342:	d107      	bne.n	8002354 <HAL_RCC_OscConfig+0x84>
 8002344:	4bb0      	ldr	r3, [pc, #704]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4baf      	ldr	r3, [pc, #700]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 800234a:	2180      	movs	r1, #128	@ 0x80
 800234c:	0249      	lsls	r1, r1, #9
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e027      	b.n	80023a4 <HAL_RCC_OscConfig+0xd4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	23a0      	movs	r3, #160	@ 0xa0
 800235a:	02db      	lsls	r3, r3, #11
 800235c:	429a      	cmp	r2, r3
 800235e:	d10e      	bne.n	800237e <HAL_RCC_OscConfig+0xae>
 8002360:	4ba9      	ldr	r3, [pc, #676]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4ba8      	ldr	r3, [pc, #672]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002366:	2180      	movs	r1, #128	@ 0x80
 8002368:	02c9      	lsls	r1, r1, #11
 800236a:	430a      	orrs	r2, r1
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	4ba6      	ldr	r3, [pc, #664]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4ba5      	ldr	r3, [pc, #660]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002374:	2180      	movs	r1, #128	@ 0x80
 8002376:	0249      	lsls	r1, r1, #9
 8002378:	430a      	orrs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e012      	b.n	80023a4 <HAL_RCC_OscConfig+0xd4>
 800237e:	4ba2      	ldr	r3, [pc, #648]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4ba1      	ldr	r3, [pc, #644]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002384:	49a1      	ldr	r1, [pc, #644]	@ (800260c <HAL_RCC_OscConfig+0x33c>)
 8002386:	400a      	ands	r2, r1
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	4b9f      	ldr	r3, [pc, #636]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	2380      	movs	r3, #128	@ 0x80
 8002390:	025b      	lsls	r3, r3, #9
 8002392:	4013      	ands	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4b9b      	ldr	r3, [pc, #620]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b9a      	ldr	r3, [pc, #616]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 800239e:	499c      	ldr	r1, [pc, #624]	@ (8002610 <HAL_RCC_OscConfig+0x340>)
 80023a0:	400a      	ands	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d014      	beq.n	80023d6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7ff fcda 	bl	8001d64 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b6:	f7ff fcd5 	bl	8001d64 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b64      	cmp	r3, #100	@ 0x64
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e2f9      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2380      	movs	r3, #128	@ 0x80
 80023ce:	029b      	lsls	r3, r3, #10
 80023d0:	4013      	ands	r3, r2
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0xe6>
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7ff fcc5 	bl	8001d64 <HAL_GetTick>
 80023da:	0003      	movs	r3, r0
 80023dc:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e0:	f7ff fcc0 	bl	8001d64 <HAL_GetTick>
 80023e4:	0002      	movs	r2, r0
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	@ 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e2e4      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023f2:	4b85      	ldr	r3, [pc, #532]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	2380      	movs	r3, #128	@ 0x80
 80023f8:	029b      	lsls	r3, r3, #10
 80023fa:	4013      	ands	r3, r2
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x110>
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2202      	movs	r2, #2
 8002408:	4013      	ands	r3, r2
 800240a:	d100      	bne.n	800240e <HAL_RCC_OscConfig+0x13e>
 800240c:	e099      	b.n	8002542 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002416:	2220      	movs	r2, #32
 8002418:	4013      	ands	r3, r2
 800241a:	d009      	beq.n	8002430 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800241c:	4b7a      	ldr	r3, [pc, #488]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b79      	ldr	r3, [pc, #484]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002422:	2120      	movs	r1, #32
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	2220      	movs	r2, #32
 800242c:	4393      	bics	r3, r2
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b04      	cmp	r3, #4
 8002434:	d005      	beq.n	8002442 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	2b0c      	cmp	r3, #12
 800243a:	d13e      	bne.n	80024ba <HAL_RCC_OscConfig+0x1ea>
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d13b      	bne.n	80024ba <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002442:	4b71      	ldr	r3, [pc, #452]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2204      	movs	r2, #4
 8002448:	4013      	ands	r3, r2
 800244a:	d004      	beq.n	8002456 <HAL_RCC_OscConfig+0x186>
 800244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e2b2      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002456:	4b6c      	ldr	r3, [pc, #432]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4a6e      	ldr	r2, [pc, #440]	@ (8002614 <HAL_RCC_OscConfig+0x344>)
 800245c:	4013      	ands	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	021a      	lsls	r2, r3, #8
 8002466:	4b68      	ldr	r3, [pc, #416]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002468:	430a      	orrs	r2, r1
 800246a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800246c:	4b66      	ldr	r3, [pc, #408]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2209      	movs	r2, #9
 8002472:	4393      	bics	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	4b64      	ldr	r3, [pc, #400]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800247e:	f000 fbeb 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002482:	0001      	movs	r1, r0
 8002484:	4b60      	ldr	r3, [pc, #384]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	220f      	movs	r2, #15
 800248c:	4013      	ands	r3, r2
 800248e:	4a62      	ldr	r2, [pc, #392]	@ (8002618 <HAL_RCC_OscConfig+0x348>)
 8002490:	5cd3      	ldrb	r3, [r2, r3]
 8002492:	000a      	movs	r2, r1
 8002494:	40da      	lsrs	r2, r3
 8002496:	4b61      	ldr	r3, [pc, #388]	@ (800261c <HAL_RCC_OscConfig+0x34c>)
 8002498:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800249a:	4b61      	ldr	r3, [pc, #388]	@ (8002620 <HAL_RCC_OscConfig+0x350>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2513      	movs	r5, #19
 80024a0:	197c      	adds	r4, r7, r5
 80024a2:	0018      	movs	r0, r3
 80024a4:	f7ff fc18 	bl	8001cd8 <HAL_InitTick>
 80024a8:	0003      	movs	r3, r0
 80024aa:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80024ac:	197b      	adds	r3, r7, r5
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d046      	beq.n	8002542 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80024b4:	197b      	adds	r3, r7, r5
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	e280      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d027      	beq.n	8002510 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024c0:	4b51      	ldr	r3, [pc, #324]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2209      	movs	r2, #9
 80024c6:	4393      	bics	r3, r2
 80024c8:	0019      	movs	r1, r3
 80024ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 80024cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ce:	430a      	orrs	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7ff fc47 	bl	8001d64 <HAL_GetTick>
 80024d6:	0003      	movs	r3, r0
 80024d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024dc:	f7ff fc42 	bl	8001d64 <HAL_GetTick>
 80024e0:	0002      	movs	r2, r0
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e266      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ee:	4b46      	ldr	r3, [pc, #280]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2204      	movs	r2, #4
 80024f4:	4013      	ands	r3, r2
 80024f6:	d0f1      	beq.n	80024dc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f8:	4b43      	ldr	r3, [pc, #268]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4a45      	ldr	r2, [pc, #276]	@ (8002614 <HAL_RCC_OscConfig+0x344>)
 80024fe:	4013      	ands	r3, r2
 8002500:	0019      	movs	r1, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	021a      	lsls	r2, r3, #8
 8002508:	4b3f      	ldr	r3, [pc, #252]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 800250a:	430a      	orrs	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	e018      	b.n	8002542 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002510:	4b3d      	ldr	r3, [pc, #244]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b3c      	ldr	r3, [pc, #240]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002516:	2101      	movs	r1, #1
 8002518:	438a      	bics	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fc22 	bl	8001d64 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002526:	f7ff fc1d 	bl	8001d64 <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e241      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002538:	4b33      	ldr	r3, [pc, #204]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2204      	movs	r2, #4
 800253e:	4013      	ands	r3, r2
 8002540:	d1f1      	bne.n	8002526 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2210      	movs	r2, #16
 8002548:	4013      	ands	r3, r2
 800254a:	d100      	bne.n	800254e <HAL_RCC_OscConfig+0x27e>
 800254c:	e0a1      	b.n	8002692 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d140      	bne.n	80025d6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002554:	4b2c      	ldr	r3, [pc, #176]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2380      	movs	r3, #128	@ 0x80
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4013      	ands	r3, r2
 800255e:	d005      	beq.n	800256c <HAL_RCC_OscConfig+0x29c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e227      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800256c:	4b26      	ldr	r3, [pc, #152]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a2c      	ldr	r2, [pc, #176]	@ (8002624 <HAL_RCC_OscConfig+0x354>)
 8002572:	4013      	ands	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1a      	ldr	r2, [r3, #32]
 800257a:	4b23      	ldr	r3, [pc, #140]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 800257c:	430a      	orrs	r2, r1
 800257e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002580:	4b21      	ldr	r3, [pc, #132]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	0a19      	lsrs	r1, r3, #8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	061a      	lsls	r2, r3, #24
 800258e:	4b1e      	ldr	r3, [pc, #120]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 8002590:	430a      	orrs	r2, r1
 8002592:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	0b5b      	lsrs	r3, r3, #13
 800259a:	3301      	adds	r3, #1
 800259c:	2280      	movs	r2, #128	@ 0x80
 800259e:	0212      	lsls	r2, r2, #8
 80025a0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80025a2:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	210f      	movs	r1, #15
 80025aa:	400b      	ands	r3, r1
 80025ac:	491a      	ldr	r1, [pc, #104]	@ (8002618 <HAL_RCC_OscConfig+0x348>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80025b2:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <HAL_RCC_OscConfig+0x34c>)
 80025b4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80025b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <HAL_RCC_OscConfig+0x350>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2513      	movs	r5, #19
 80025bc:	197c      	adds	r4, r7, r5
 80025be:	0018      	movs	r0, r3
 80025c0:	f7ff fb8a 	bl	8001cd8 <HAL_InitTick>
 80025c4:	0003      	movs	r3, r0
 80025c6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80025c8:	197b      	adds	r3, r7, r5
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d060      	beq.n	8002692 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80025d0:	197b      	adds	r3, r7, r5
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	e1f2      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d03f      	beq.n	800265e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025de:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <HAL_RCC_OscConfig+0x338>)
 80025e4:	2180      	movs	r1, #128	@ 0x80
 80025e6:	0049      	lsls	r1, r1, #1
 80025e8:	430a      	orrs	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff fbba 	bl	8001d64 <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025f4:	e018      	b.n	8002628 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f6:	f7ff fbb5 	bl	8001d64 <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d911      	bls.n	8002628 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e1d9      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
 8002608:	40021000 	.word	0x40021000
 800260c:	fffeffff 	.word	0xfffeffff
 8002610:	fffbffff 	.word	0xfffbffff
 8002614:	ffffe0ff 	.word	0xffffe0ff
 8002618:	08003840 	.word	0x08003840
 800261c:	20000000 	.word	0x20000000
 8002620:	20000004 	.word	0x20000004
 8002624:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002628:	4bc9      	ldr	r3, [pc, #804]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4013      	ands	r3, r2
 8002632:	d0e0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002634:	4bc6      	ldr	r3, [pc, #792]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4ac6      	ldr	r2, [pc, #792]	@ (8002954 <HAL_RCC_OscConfig+0x684>)
 800263a:	4013      	ands	r3, r2
 800263c:	0019      	movs	r1, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1a      	ldr	r2, [r3, #32]
 8002642:	4bc3      	ldr	r3, [pc, #780]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002644:	430a      	orrs	r2, r1
 8002646:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002648:	4bc1      	ldr	r3, [pc, #772]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	0a19      	lsrs	r1, r3, #8
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	061a      	lsls	r2, r3, #24
 8002656:	4bbe      	ldr	r3, [pc, #760]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002658:	430a      	orrs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	e019      	b.n	8002692 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800265e:	4bbc      	ldr	r3, [pc, #752]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4bbb      	ldr	r3, [pc, #748]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002664:	49bc      	ldr	r1, [pc, #752]	@ (8002958 <HAL_RCC_OscConfig+0x688>)
 8002666:	400a      	ands	r2, r1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7ff fb7b 	bl	8001d64 <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002674:	f7ff fb76 	bl	8001d64 <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e19a      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002686:	4bb2      	ldr	r3, [pc, #712]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4013      	ands	r3, r2
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2208      	movs	r2, #8
 8002698:	4013      	ands	r3, r2
 800269a:	d036      	beq.n	800270a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d019      	beq.n	80026d8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a4:	4baa      	ldr	r3, [pc, #680]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80026a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026a8:	4ba9      	ldr	r3, [pc, #676]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80026aa:	2101      	movs	r1, #1
 80026ac:	430a      	orrs	r2, r1
 80026ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b0:	f7ff fb58 	bl	8001d64 <HAL_GetTick>
 80026b4:	0003      	movs	r3, r0
 80026b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ba:	f7ff fb53 	bl	8001d64 <HAL_GetTick>
 80026be:	0002      	movs	r2, r0
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e177      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026cc:	4ba0      	ldr	r3, [pc, #640]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80026ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d0:	2202      	movs	r2, #2
 80026d2:	4013      	ands	r3, r2
 80026d4:	d0f1      	beq.n	80026ba <HAL_RCC_OscConfig+0x3ea>
 80026d6:	e018      	b.n	800270a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d8:	4b9d      	ldr	r3, [pc, #628]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80026da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026dc:	4b9c      	ldr	r3, [pc, #624]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80026de:	2101      	movs	r1, #1
 80026e0:	438a      	bics	r2, r1
 80026e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e4:	f7ff fb3e 	bl	8001d64 <HAL_GetTick>
 80026e8:	0003      	movs	r3, r0
 80026ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ee:	f7ff fb39 	bl	8001d64 <HAL_GetTick>
 80026f2:	0002      	movs	r2, r0
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e15d      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002700:	4b93      	ldr	r3, [pc, #588]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002704:	2202      	movs	r2, #2
 8002706:	4013      	ands	r3, r2
 8002708:	d1f1      	bne.n	80026ee <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2204      	movs	r2, #4
 8002710:	4013      	ands	r3, r2
 8002712:	d100      	bne.n	8002716 <HAL_RCC_OscConfig+0x446>
 8002714:	e0ae      	b.n	8002874 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2023      	movs	r0, #35	@ 0x23
 8002718:	183b      	adds	r3, r7, r0
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271e:	4b8c      	ldr	r3, [pc, #560]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002722:	2380      	movs	r3, #128	@ 0x80
 8002724:	055b      	lsls	r3, r3, #21
 8002726:	4013      	ands	r3, r2
 8002728:	d109      	bne.n	800273e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	4b89      	ldr	r3, [pc, #548]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 800272c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800272e:	4b88      	ldr	r3, [pc, #544]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002730:	2180      	movs	r1, #128	@ 0x80
 8002732:	0549      	lsls	r1, r1, #21
 8002734:	430a      	orrs	r2, r1
 8002736:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002738:	183b      	adds	r3, r7, r0
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	4b87      	ldr	r3, [pc, #540]	@ (800295c <HAL_RCC_OscConfig+0x68c>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	2380      	movs	r3, #128	@ 0x80
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4013      	ands	r3, r2
 8002748:	d11a      	bne.n	8002780 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274a:	4b84      	ldr	r3, [pc, #528]	@ (800295c <HAL_RCC_OscConfig+0x68c>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4b83      	ldr	r3, [pc, #524]	@ (800295c <HAL_RCC_OscConfig+0x68c>)
 8002750:	2180      	movs	r1, #128	@ 0x80
 8002752:	0049      	lsls	r1, r1, #1
 8002754:	430a      	orrs	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002758:	f7ff fb04 	bl	8001d64 <HAL_GetTick>
 800275c:	0003      	movs	r3, r0
 800275e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7ff faff 	bl	8001d64 <HAL_GetTick>
 8002766:	0002      	movs	r2, r0
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b64      	cmp	r3, #100	@ 0x64
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e123      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	4b79      	ldr	r3, [pc, #484]	@ (800295c <HAL_RCC_OscConfig+0x68c>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2380      	movs	r3, #128	@ 0x80
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4013      	ands	r3, r2
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	429a      	cmp	r2, r3
 800278a:	d107      	bne.n	800279c <HAL_RCC_OscConfig+0x4cc>
 800278c:	4b70      	ldr	r3, [pc, #448]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 800278e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002790:	4b6f      	ldr	r3, [pc, #444]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002792:	2180      	movs	r1, #128	@ 0x80
 8002794:	0049      	lsls	r1, r1, #1
 8002796:	430a      	orrs	r2, r1
 8002798:	651a      	str	r2, [r3, #80]	@ 0x50
 800279a:	e031      	b.n	8002800 <HAL_RCC_OscConfig+0x530>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10c      	bne.n	80027be <HAL_RCC_OscConfig+0x4ee>
 80027a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80027a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027a8:	4b69      	ldr	r3, [pc, #420]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80027aa:	496b      	ldr	r1, [pc, #428]	@ (8002958 <HAL_RCC_OscConfig+0x688>)
 80027ac:	400a      	ands	r2, r1
 80027ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80027b0:	4b67      	ldr	r3, [pc, #412]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80027b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027b4:	4b66      	ldr	r3, [pc, #408]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80027b6:	496a      	ldr	r1, [pc, #424]	@ (8002960 <HAL_RCC_OscConfig+0x690>)
 80027b8:	400a      	ands	r2, r1
 80027ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80027bc:	e020      	b.n	8002800 <HAL_RCC_OscConfig+0x530>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	23a0      	movs	r3, #160	@ 0xa0
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d10e      	bne.n	80027e8 <HAL_RCC_OscConfig+0x518>
 80027ca:	4b61      	ldr	r3, [pc, #388]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80027cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027ce:	4b60      	ldr	r3, [pc, #384]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80027d0:	2180      	movs	r1, #128	@ 0x80
 80027d2:	00c9      	lsls	r1, r1, #3
 80027d4:	430a      	orrs	r2, r1
 80027d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80027d8:	4b5d      	ldr	r3, [pc, #372]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80027da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027dc:	4b5c      	ldr	r3, [pc, #368]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80027de:	2180      	movs	r1, #128	@ 0x80
 80027e0:	0049      	lsls	r1, r1, #1
 80027e2:	430a      	orrs	r2, r1
 80027e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80027e6:	e00b      	b.n	8002800 <HAL_RCC_OscConfig+0x530>
 80027e8:	4b59      	ldr	r3, [pc, #356]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80027ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027ec:	4b58      	ldr	r3, [pc, #352]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80027ee:	495a      	ldr	r1, [pc, #360]	@ (8002958 <HAL_RCC_OscConfig+0x688>)
 80027f0:	400a      	ands	r2, r1
 80027f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80027f4:	4b56      	ldr	r3, [pc, #344]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80027f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027f8:	4b55      	ldr	r3, [pc, #340]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80027fa:	4959      	ldr	r1, [pc, #356]	@ (8002960 <HAL_RCC_OscConfig+0x690>)
 80027fc:	400a      	ands	r2, r1
 80027fe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d015      	beq.n	8002834 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002808:	f7ff faac 	bl	8001d64 <HAL_GetTick>
 800280c:	0003      	movs	r3, r0
 800280e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002810:	e009      	b.n	8002826 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7ff faa7 	bl	8001d64 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	4a51      	ldr	r2, [pc, #324]	@ (8002964 <HAL_RCC_OscConfig+0x694>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0ca      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002826:	4b4a      	ldr	r3, [pc, #296]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002828:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800282a:	2380      	movs	r3, #128	@ 0x80
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4013      	ands	r3, r2
 8002830:	d0ef      	beq.n	8002812 <HAL_RCC_OscConfig+0x542>
 8002832:	e014      	b.n	800285e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002834:	f7ff fa96 	bl	8001d64 <HAL_GetTick>
 8002838:	0003      	movs	r3, r0
 800283a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800283c:	e009      	b.n	8002852 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283e:	f7ff fa91 	bl	8001d64 <HAL_GetTick>
 8002842:	0002      	movs	r2, r0
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	4a46      	ldr	r2, [pc, #280]	@ (8002964 <HAL_RCC_OscConfig+0x694>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e0b4      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002852:	4b3f      	ldr	r3, [pc, #252]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002854:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002856:	2380      	movs	r3, #128	@ 0x80
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4013      	ands	r3, r2
 800285c:	d1ef      	bne.n	800283e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800285e:	2323      	movs	r3, #35	@ 0x23
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002868:	4b39      	ldr	r3, [pc, #228]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 800286a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800286c:	4b38      	ldr	r3, [pc, #224]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 800286e:	493e      	ldr	r1, [pc, #248]	@ (8002968 <HAL_RCC_OscConfig+0x698>)
 8002870:	400a      	ands	r2, r1
 8002872:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	2b00      	cmp	r3, #0
 800287a:	d100      	bne.n	800287e <HAL_RCC_OscConfig+0x5ae>
 800287c:	e09d      	b.n	80029ba <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	2b0c      	cmp	r3, #12
 8002882:	d100      	bne.n	8002886 <HAL_RCC_OscConfig+0x5b6>
 8002884:	e076      	b.n	8002974 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	2b02      	cmp	r3, #2
 800288c:	d145      	bne.n	800291a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288e:	4b30      	ldr	r3, [pc, #192]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4b2f      	ldr	r3, [pc, #188]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002894:	4935      	ldr	r1, [pc, #212]	@ (800296c <HAL_RCC_OscConfig+0x69c>)
 8002896:	400a      	ands	r2, r1
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7ff fa63 	bl	8001d64 <HAL_GetTick>
 800289e:	0003      	movs	r3, r0
 80028a0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a4:	f7ff fa5e 	bl	8001d64 <HAL_GetTick>
 80028a8:	0002      	movs	r2, r0
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e082      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028b6:	4b26      	ldr	r3, [pc, #152]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	2380      	movs	r3, #128	@ 0x80
 80028bc:	049b      	lsls	r3, r3, #18
 80028be:	4013      	ands	r3, r2
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c2:	4b23      	ldr	r3, [pc, #140]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002970 <HAL_RCC_OscConfig+0x6a0>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	0019      	movs	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	431a      	orrs	r2, r3
 80028dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80028de:	430a      	orrs	r2, r1
 80028e0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 80028e8:	2180      	movs	r1, #128	@ 0x80
 80028ea:	0449      	lsls	r1, r1, #17
 80028ec:	430a      	orrs	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7ff fa38 	bl	8001d64 <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fa:	f7ff fa33 	bl	8001d64 <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e057      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800290c:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2380      	movs	r3, #128	@ 0x80
 8002912:	049b      	lsls	r3, r3, #18
 8002914:	4013      	ands	r3, r2
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x62a>
 8002918:	e04f      	b.n	80029ba <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291a:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002920:	4912      	ldr	r1, [pc, #72]	@ (800296c <HAL_RCC_OscConfig+0x69c>)
 8002922:	400a      	ands	r2, r1
 8002924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7ff fa1d 	bl	8001d64 <HAL_GetTick>
 800292a:	0003      	movs	r3, r0
 800292c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002930:	f7ff fa18 	bl	8001d64 <HAL_GetTick>
 8002934:	0002      	movs	r2, r0
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e03c      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002942:	4b03      	ldr	r3, [pc, #12]	@ (8002950 <HAL_RCC_OscConfig+0x680>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	@ 0x80
 8002948:	049b      	lsls	r3, r3, #18
 800294a:	4013      	ands	r3, r2
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x660>
 800294e:	e034      	b.n	80029ba <HAL_RCC_OscConfig+0x6ea>
 8002950:	40021000 	.word	0x40021000
 8002954:	ffff1fff 	.word	0xffff1fff
 8002958:	fffffeff 	.word	0xfffffeff
 800295c:	40007000 	.word	0x40007000
 8002960:	fffffbff 	.word	0xfffffbff
 8002964:	00001388 	.word	0x00001388
 8002968:	efffffff 	.word	0xefffffff
 800296c:	feffffff 	.word	0xfeffffff
 8002970:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e01d      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002980:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <HAL_RCC_OscConfig+0x6f4>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	025b      	lsls	r3, r3, #9
 800298c:	401a      	ands	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002992:	429a      	cmp	r2, r3
 8002994:	d10f      	bne.n	80029b6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	23f0      	movs	r3, #240	@ 0xf0
 800299a:	039b      	lsls	r3, r3, #14
 800299c:	401a      	ands	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	23c0      	movs	r3, #192	@ 0xc0
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	401a      	ands	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	0018      	movs	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	b00a      	add	sp, #40	@ 0x28
 80029c2:	bdb0      	pop	{r4, r5, r7, pc}
 80029c4:	40021000 	.word	0x40021000

080029c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c8:	b5b0      	push	{r4, r5, r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e128      	b.n	8002c2e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b96      	ldr	r3, [pc, #600]	@ (8002c38 <HAL_RCC_ClockConfig+0x270>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2201      	movs	r2, #1
 80029e2:	4013      	ands	r3, r2
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d91e      	bls.n	8002a28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b93      	ldr	r3, [pc, #588]	@ (8002c38 <HAL_RCC_ClockConfig+0x270>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2201      	movs	r2, #1
 80029f0:	4393      	bics	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	4b90      	ldr	r3, [pc, #576]	@ (8002c38 <HAL_RCC_ClockConfig+0x270>)
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029fc:	f7ff f9b2 	bl	8001d64 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a04:	e009      	b.n	8002a1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a06:	f7ff f9ad 	bl	8001d64 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	4a8a      	ldr	r2, [pc, #552]	@ (8002c3c <HAL_RCC_ClockConfig+0x274>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e109      	b.n	8002c2e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b87      	ldr	r3, [pc, #540]	@ (8002c38 <HAL_RCC_ClockConfig+0x270>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	4013      	ands	r3, r2
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d009      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a32:	4b83      	ldr	r3, [pc, #524]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	22f0      	movs	r2, #240	@ 0xf0
 8002a38:	4393      	bics	r3, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	4b7f      	ldr	r3, [pc, #508]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002a42:	430a      	orrs	r2, r1
 8002a44:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d100      	bne.n	8002a52 <HAL_RCC_ClockConfig+0x8a>
 8002a50:	e089      	b.n	8002b66 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a5a:	4b79      	ldr	r3, [pc, #484]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	029b      	lsls	r3, r3, #10
 8002a62:	4013      	ands	r3, r2
 8002a64:	d120      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0e1      	b.n	8002c2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d107      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a72:	4b73      	ldr	r3, [pc, #460]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	2380      	movs	r3, #128	@ 0x80
 8002a78:	049b      	lsls	r3, r3, #18
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d114      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e0d5      	b.n	8002c2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d106      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2204      	movs	r2, #4
 8002a90:	4013      	ands	r3, r2
 8002a92:	d109      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0ca      	b.n	8002c2e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a98:	4b69      	ldr	r3, [pc, #420]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2380      	movs	r3, #128	@ 0x80
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0c2      	b.n	8002c2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa8:	4b65      	ldr	r3, [pc, #404]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2203      	movs	r2, #3
 8002aae:	4393      	bics	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	4b62      	ldr	r3, [pc, #392]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002abc:	f7ff f952 	bl	8001d64 <HAL_GetTick>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d111      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002acc:	e009      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ace:	f7ff f949 	bl	8001d64 <HAL_GetTick>
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	4a58      	ldr	r2, [pc, #352]	@ (8002c3c <HAL_RCC_ClockConfig+0x274>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e0a5      	b.n	8002c2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ae2:	4b57      	ldr	r3, [pc, #348]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d1ef      	bne.n	8002ace <HAL_RCC_ClockConfig+0x106>
 8002aee:	e03a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d111      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af8:	e009      	b.n	8002b0e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afa:	f7ff f933 	bl	8001d64 <HAL_GetTick>
 8002afe:	0002      	movs	r2, r0
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	4a4d      	ldr	r2, [pc, #308]	@ (8002c3c <HAL_RCC_ClockConfig+0x274>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e08f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b0e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	220c      	movs	r2, #12
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b0c      	cmp	r3, #12
 8002b18:	d1ef      	bne.n	8002afa <HAL_RCC_ClockConfig+0x132>
 8002b1a:	e024      	b.n	8002b66 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d11b      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b24:	e009      	b.n	8002b3a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b26:	f7ff f91d 	bl	8001d64 <HAL_GetTick>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	4a42      	ldr	r2, [pc, #264]	@ (8002c3c <HAL_RCC_ClockConfig+0x274>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e079      	b.n	8002c2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b3a:	4b41      	ldr	r3, [pc, #260]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	220c      	movs	r2, #12
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d1ef      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x15e>
 8002b46:	e00e      	b.n	8002b66 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7ff f90c 	bl	8001d64 <HAL_GetTick>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	4a3a      	ldr	r2, [pc, #232]	@ (8002c3c <HAL_RCC_ClockConfig+0x274>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e068      	b.n	8002c2e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b5c:	4b38      	ldr	r3, [pc, #224]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	220c      	movs	r2, #12
 8002b62:	4013      	ands	r3, r2
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b66:	4b34      	ldr	r3, [pc, #208]	@ (8002c38 <HAL_RCC_ClockConfig+0x270>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d21e      	bcs.n	8002bb2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b74:	4b30      	ldr	r3, [pc, #192]	@ (8002c38 <HAL_RCC_ClockConfig+0x270>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	4393      	bics	r3, r2
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c38 <HAL_RCC_ClockConfig+0x270>)
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b86:	f7ff f8ed 	bl	8001d64 <HAL_GetTick>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	e009      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b90:	f7ff f8e8 	bl	8001d64 <HAL_GetTick>
 8002b94:	0002      	movs	r2, r0
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	4a28      	ldr	r2, [pc, #160]	@ (8002c3c <HAL_RCC_ClockConfig+0x274>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e044      	b.n	8002c2e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba4:	4b24      	ldr	r3, [pc, #144]	@ (8002c38 <HAL_RCC_ClockConfig+0x270>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d1ee      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d009      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b20      	ldr	r3, [pc, #128]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4a20      	ldr	r2, [pc, #128]	@ (8002c44 <HAL_RCC_ClockConfig+0x27c>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	0019      	movs	r1, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	4b1d      	ldr	r3, [pc, #116]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bda:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4a1a      	ldr	r2, [pc, #104]	@ (8002c48 <HAL_RCC_ClockConfig+0x280>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	00da      	lsls	r2, r3, #3
 8002bea:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002bec:	430a      	orrs	r2, r1
 8002bee:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bf0:	f000 f832 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002bf4:	0001      	movs	r1, r0
 8002bf6:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <HAL_RCC_ClockConfig+0x278>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	4013      	ands	r3, r2
 8002c00:	4a12      	ldr	r2, [pc, #72]	@ (8002c4c <HAL_RCC_ClockConfig+0x284>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	000a      	movs	r2, r1
 8002c06:	40da      	lsrs	r2, r3
 8002c08:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <HAL_RCC_ClockConfig+0x288>)
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c0c:	4b11      	ldr	r3, [pc, #68]	@ (8002c54 <HAL_RCC_ClockConfig+0x28c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	250b      	movs	r5, #11
 8002c12:	197c      	adds	r4, r7, r5
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7ff f85f 	bl	8001cd8 <HAL_InitTick>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002c1e:	197b      	adds	r3, r7, r5
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002c26:	197b      	adds	r3, r7, r5
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	e000      	b.n	8002c2e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	0018      	movs	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b004      	add	sp, #16
 8002c34:	bdb0      	pop	{r4, r5, r7, pc}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	40022000 	.word	0x40022000
 8002c3c:	00001388 	.word	0x00001388
 8002c40:	40021000 	.word	0x40021000
 8002c44:	fffff8ff 	.word	0xfffff8ff
 8002c48:	ffffc7ff 	.word	0xffffc7ff
 8002c4c:	08003840 	.word	0x08003840
 8002c50:	20000000 	.word	0x20000000
 8002c54:	20000004 	.word	0x20000004

08002c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	220c      	movs	r2, #12
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	d013      	beq.n	8002c96 <HAL_RCC_GetSysClockFreq+0x3e>
 8002c6e:	d85c      	bhi.n	8002d2a <HAL_RCC_GetSysClockFreq+0xd2>
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d002      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0x22>
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d00b      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x38>
 8002c78:	e057      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c7a:	4b35      	ldr	r3, [pc, #212]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2210      	movs	r2, #16
 8002c80:	4013      	ands	r3, r2
 8002c82:	d002      	beq.n	8002c8a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002c84:	4b33      	ldr	r3, [pc, #204]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c86:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002c88:	e05d      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002c8a:	4b33      	ldr	r3, [pc, #204]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c8c:	613b      	str	r3, [r7, #16]
      break;
 8002c8e:	e05a      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c90:	4b32      	ldr	r3, [pc, #200]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x104>)
 8002c92:	613b      	str	r3, [r7, #16]
      break;
 8002c94:	e057      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	0c9b      	lsrs	r3, r3, #18
 8002c9a:	220f      	movs	r2, #15
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	4a30      	ldr	r2, [pc, #192]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca0:	5cd3      	ldrb	r3, [r2, r3]
 8002ca2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	0d9b      	lsrs	r3, r3, #22
 8002ca8:	2203      	movs	r2, #3
 8002caa:	4013      	ands	r3, r2
 8002cac:	3301      	adds	r3, #1
 8002cae:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cb0:	4b27      	ldr	r3, [pc, #156]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	2380      	movs	r3, #128	@ 0x80
 8002cb6:	025b      	lsls	r3, r3, #9
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d00f      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	000a      	movs	r2, r1
 8002cc0:	0152      	lsls	r2, r2, #5
 8002cc2:	1a52      	subs	r2, r2, r1
 8002cc4:	0193      	lsls	r3, r2, #6
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	185b      	adds	r3, r3, r1
 8002ccc:	025b      	lsls	r3, r3, #9
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f7fd fa19 	bl	8000108 <__udivsi3>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	e023      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d00f      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	000a      	movs	r2, r1
 8002cea:	0152      	lsls	r2, r2, #5
 8002cec:	1a52      	subs	r2, r2, r1
 8002cee:	0193      	lsls	r3, r2, #6
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	185b      	adds	r3, r3, r1
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f7fd fa04 	bl	8000108 <__udivsi3>
 8002d00:	0003      	movs	r3, r0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e00e      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	000a      	movs	r2, r1
 8002d0a:	0152      	lsls	r2, r2, #5
 8002d0c:	1a52      	subs	r2, r2, r1
 8002d0e:	0193      	lsls	r3, r2, #6
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	185b      	adds	r3, r3, r1
 8002d16:	029b      	lsls	r3, r3, #10
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f7fd f9f4 	bl	8000108 <__udivsi3>
 8002d20:	0003      	movs	r3, r0
 8002d22:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	613b      	str	r3, [r7, #16]
      break;
 8002d28:	e00d      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002d2a:	4b09      	ldr	r3, [pc, #36]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	0b5b      	lsrs	r3, r3, #13
 8002d30:	2207      	movs	r2, #7
 8002d32:	4013      	ands	r3, r2
 8002d34:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	2280      	movs	r2, #128	@ 0x80
 8002d3c:	0212      	lsls	r2, r2, #8
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	0013      	movs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
      break;
 8002d44:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d46:	693b      	ldr	r3, [r7, #16]
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b006      	add	sp, #24
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000
 8002d54:	003d0900 	.word	0x003d0900
 8002d58:	00f42400 	.word	0x00f42400
 8002d5c:	007a1200 	.word	0x007a1200
 8002d60:	08003850 	.word	0x08003850

08002d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e032      	b.n	8002ddc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2239      	movs	r2, #57	@ 0x39
 8002d7a:	5c9b      	ldrb	r3, [r3, r2]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d107      	bne.n	8002d92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2238      	movs	r2, #56	@ 0x38
 8002d86:	2100      	movs	r1, #0
 8002d88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f7fe fed1 	bl	8001b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2239      	movs	r2, #57	@ 0x39
 8002d96:	2102      	movs	r1, #2
 8002d98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3304      	adds	r3, #4
 8002da2:	0019      	movs	r1, r3
 8002da4:	0010      	movs	r0, r2
 8002da6:	f000 fa8b 	bl	80032c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	223e      	movs	r2, #62	@ 0x3e
 8002dae:	2101      	movs	r1, #1
 8002db0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	223a      	movs	r2, #58	@ 0x3a
 8002db6:	2101      	movs	r1, #1
 8002db8:	5499      	strb	r1, [r3, r2]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	223b      	movs	r2, #59	@ 0x3b
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	5499      	strb	r1, [r3, r2]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	223c      	movs	r2, #60	@ 0x3c
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	5499      	strb	r1, [r3, r2]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	223d      	movs	r2, #61	@ 0x3d
 8002dce:	2101      	movs	r1, #1
 8002dd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2239      	movs	r2, #57	@ 0x39
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	0018      	movs	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b002      	add	sp, #8
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e032      	b.n	8002e5c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2239      	movs	r2, #57	@ 0x39
 8002dfa:	5c9b      	ldrb	r3, [r3, r2]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d107      	bne.n	8002e12 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2238      	movs	r2, #56	@ 0x38
 8002e06:	2100      	movs	r1, #0
 8002e08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 f829 	bl	8002e64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2239      	movs	r2, #57	@ 0x39
 8002e16:	2102      	movs	r1, #2
 8002e18:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3304      	adds	r3, #4
 8002e22:	0019      	movs	r1, r3
 8002e24:	0010      	movs	r0, r2
 8002e26:	f000 fa4b 	bl	80032c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	223e      	movs	r2, #62	@ 0x3e
 8002e2e:	2101      	movs	r1, #1
 8002e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	223a      	movs	r2, #58	@ 0x3a
 8002e36:	2101      	movs	r1, #1
 8002e38:	5499      	strb	r1, [r3, r2]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	223b      	movs	r2, #59	@ 0x3b
 8002e3e:	2101      	movs	r1, #1
 8002e40:	5499      	strb	r1, [r3, r2]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	223c      	movs	r2, #60	@ 0x3c
 8002e46:	2101      	movs	r1, #1
 8002e48:	5499      	strb	r1, [r3, r2]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	223d      	movs	r2, #61	@ 0x3d
 8002e4e:	2101      	movs	r1, #1
 8002e50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2239      	movs	r2, #57	@ 0x39
 8002e56:	2101      	movs	r1, #1
 8002e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b002      	add	sp, #8
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e6c:	46c0      	nop			@ (mov r8, r8)
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b002      	add	sp, #8
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d108      	bne.n	8002e96 <HAL_TIM_PWM_Start+0x22>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	223a      	movs	r2, #58	@ 0x3a
 8002e88:	5c9b      	ldrb	r3, [r3, r2]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	1e5a      	subs	r2, r3, #1
 8002e90:	4193      	sbcs	r3, r2
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	e01f      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x62>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d108      	bne.n	8002eae <HAL_TIM_PWM_Start+0x3a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	223b      	movs	r2, #59	@ 0x3b
 8002ea0:	5c9b      	ldrb	r3, [r3, r2]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	1e5a      	subs	r2, r3, #1
 8002ea8:	4193      	sbcs	r3, r2
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	e013      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x62>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d108      	bne.n	8002ec6 <HAL_TIM_PWM_Start+0x52>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	223c      	movs	r2, #60	@ 0x3c
 8002eb8:	5c9b      	ldrb	r3, [r3, r2]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	1e5a      	subs	r2, r3, #1
 8002ec0:	4193      	sbcs	r3, r2
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	e007      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x62>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	223d      	movs	r2, #61	@ 0x3d
 8002eca:	5c9b      	ldrb	r3, [r3, r2]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	1e5a      	subs	r2, r3, #1
 8002ed2:	4193      	sbcs	r3, r2
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e04d      	b.n	8002f7a <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <HAL_TIM_PWM_Start+0x7a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	223a      	movs	r2, #58	@ 0x3a
 8002ee8:	2102      	movs	r1, #2
 8002eea:	5499      	strb	r1, [r3, r2]
 8002eec:	e013      	b.n	8002f16 <HAL_TIM_PWM_Start+0xa2>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d104      	bne.n	8002efe <HAL_TIM_PWM_Start+0x8a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	223b      	movs	r2, #59	@ 0x3b
 8002ef8:	2102      	movs	r1, #2
 8002efa:	5499      	strb	r1, [r3, r2]
 8002efc:	e00b      	b.n	8002f16 <HAL_TIM_PWM_Start+0xa2>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d104      	bne.n	8002f0e <HAL_TIM_PWM_Start+0x9a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	223c      	movs	r2, #60	@ 0x3c
 8002f08:	2102      	movs	r1, #2
 8002f0a:	5499      	strb	r1, [r3, r2]
 8002f0c:	e003      	b.n	8002f16 <HAL_TIM_PWM_Start+0xa2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	223d      	movs	r2, #61	@ 0x3d
 8002f12:	2102      	movs	r1, #2
 8002f14:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6839      	ldr	r1, [r7, #0]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 fbc6 	bl	80036b0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	2380      	movs	r3, #128	@ 0x80
 8002f2a:	05db      	lsls	r3, r3, #23
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d009      	beq.n	8002f44 <HAL_TIM_PWM_Start+0xd0>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a13      	ldr	r2, [pc, #76]	@ (8002f84 <HAL_TIM_PWM_Start+0x110>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_TIM_PWM_Start+0xd0>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a12      	ldr	r2, [pc, #72]	@ (8002f88 <HAL_TIM_PWM_Start+0x114>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d111      	bne.n	8002f68 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2207      	movs	r2, #7
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d010      	beq.n	8002f78 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2101      	movs	r1, #1
 8002f62:	430a      	orrs	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f66:	e007      	b.n	8002f78 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2101      	movs	r1, #1
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b004      	add	sp, #16
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	40010800 	.word	0x40010800
 8002f88:	40011400 	.word	0x40011400

08002f8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f98:	2317      	movs	r3, #23
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2238      	movs	r2, #56	@ 0x38
 8002fa4:	5c9b      	ldrb	r3, [r3, r2]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_TIM_PWM_ConfigChannel+0x22>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e0ad      	b.n	800310a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2238      	movs	r2, #56	@ 0x38
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d100      	bne.n	8002fbe <HAL_TIM_PWM_ConfigChannel+0x32>
 8002fbc:	e076      	b.n	80030ac <HAL_TIM_PWM_ConfigChannel+0x120>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	d900      	bls.n	8002fc6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002fc4:	e095      	b.n	80030f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d04e      	beq.n	800306a <HAL_TIM_PWM_ConfigChannel+0xde>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d900      	bls.n	8002fd4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002fd2:	e08e      	b.n	80030f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d021      	beq.n	8003024 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002fe0:	e087      	b.n	80030f2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	0011      	movs	r1, r2
 8002fea:	0018      	movs	r0, r3
 8002fec:	f000 f9c2 	bl	8003374 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2108      	movs	r1, #8
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2104      	movs	r1, #4
 800300c:	438a      	bics	r2, r1
 800300e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	619a      	str	r2, [r3, #24]
      break;
 8003022:	e06b      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	0011      	movs	r1, r2
 800302c:	0018      	movs	r0, r3
 800302e:	f000 f9dd 	bl	80033ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699a      	ldr	r2, [r3, #24]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2180      	movs	r1, #128	@ 0x80
 800303e:	0109      	lsls	r1, r1, #4
 8003040:	430a      	orrs	r2, r1
 8003042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4931      	ldr	r1, [pc, #196]	@ (8003114 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003050:	400a      	ands	r2, r1
 8003052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6999      	ldr	r1, [r3, #24]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	021a      	lsls	r2, r3, #8
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	619a      	str	r2, [r3, #24]
      break;
 8003068:	e048      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	0011      	movs	r1, r2
 8003072:	0018      	movs	r0, r3
 8003074:	f000 f9fc 	bl	8003470 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2108      	movs	r1, #8
 8003084:	430a      	orrs	r2, r1
 8003086:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2104      	movs	r1, #4
 8003094:	438a      	bics	r2, r1
 8003096:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69d9      	ldr	r1, [r3, #28]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	61da      	str	r2, [r3, #28]
      break;
 80030aa:	e027      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	0011      	movs	r1, r2
 80030b4:	0018      	movs	r0, r3
 80030b6:	f000 fa1b 	bl	80034f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2180      	movs	r1, #128	@ 0x80
 80030c6:	0109      	lsls	r1, r1, #4
 80030c8:	430a      	orrs	r2, r1
 80030ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	490f      	ldr	r1, [pc, #60]	@ (8003114 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80030d8:	400a      	ands	r2, r1
 80030da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69d9      	ldr	r1, [r3, #28]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	021a      	lsls	r2, r3, #8
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	61da      	str	r2, [r3, #28]
      break;
 80030f0:	e004      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80030f2:	2317      	movs	r3, #23
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
      break;
 80030fa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2238      	movs	r2, #56	@ 0x38
 8003100:	2100      	movs	r1, #0
 8003102:	5499      	strb	r1, [r3, r2]

  return status;
 8003104:	2317      	movs	r3, #23
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	781b      	ldrb	r3, [r3, #0]
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b006      	add	sp, #24
 8003110:	bd80      	pop	{r7, pc}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	fffffbff 	.word	0xfffffbff

08003118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003122:	230f      	movs	r3, #15
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2238      	movs	r2, #56	@ 0x38
 800312e:	5c9b      	ldrb	r3, [r3, r2]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_TIM_ConfigClockSource+0x20>
 8003134:	2302      	movs	r3, #2
 8003136:	e0bc      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x19a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2238      	movs	r2, #56	@ 0x38
 800313c:	2101      	movs	r1, #1
 800313e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2239      	movs	r2, #57	@ 0x39
 8003144:	2102      	movs	r1, #2
 8003146:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2277      	movs	r2, #119	@ 0x77
 8003154:	4393      	bics	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4a58      	ldr	r2, [pc, #352]	@ (80032bc <HAL_TIM_ConfigClockSource+0x1a4>)
 800315c:	4013      	ands	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2280      	movs	r2, #128	@ 0x80
 800316e:	0192      	lsls	r2, r2, #6
 8003170:	4293      	cmp	r3, r2
 8003172:	d040      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0xde>
 8003174:	2280      	movs	r2, #128	@ 0x80
 8003176:	0192      	lsls	r2, r2, #6
 8003178:	4293      	cmp	r3, r2
 800317a:	d900      	bls.n	800317e <HAL_TIM_ConfigClockSource+0x66>
 800317c:	e088      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x178>
 800317e:	2280      	movs	r2, #128	@ 0x80
 8003180:	0152      	lsls	r2, r2, #5
 8003182:	4293      	cmp	r3, r2
 8003184:	d100      	bne.n	8003188 <HAL_TIM_ConfigClockSource+0x70>
 8003186:	e088      	b.n	800329a <HAL_TIM_ConfigClockSource+0x182>
 8003188:	2280      	movs	r2, #128	@ 0x80
 800318a:	0152      	lsls	r2, r2, #5
 800318c:	4293      	cmp	r3, r2
 800318e:	d900      	bls.n	8003192 <HAL_TIM_ConfigClockSource+0x7a>
 8003190:	e07e      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x178>
 8003192:	2b70      	cmp	r3, #112	@ 0x70
 8003194:	d018      	beq.n	80031c8 <HAL_TIM_ConfigClockSource+0xb0>
 8003196:	d900      	bls.n	800319a <HAL_TIM_ConfigClockSource+0x82>
 8003198:	e07a      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x178>
 800319a:	2b60      	cmp	r3, #96	@ 0x60
 800319c:	d04f      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x126>
 800319e:	d900      	bls.n	80031a2 <HAL_TIM_ConfigClockSource+0x8a>
 80031a0:	e076      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x178>
 80031a2:	2b50      	cmp	r3, #80	@ 0x50
 80031a4:	d03b      	beq.n	800321e <HAL_TIM_ConfigClockSource+0x106>
 80031a6:	d900      	bls.n	80031aa <HAL_TIM_ConfigClockSource+0x92>
 80031a8:	e072      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x178>
 80031aa:	2b40      	cmp	r3, #64	@ 0x40
 80031ac:	d057      	beq.n	800325e <HAL_TIM_ConfigClockSource+0x146>
 80031ae:	d900      	bls.n	80031b2 <HAL_TIM_ConfigClockSource+0x9a>
 80031b0:	e06e      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x178>
 80031b2:	2b30      	cmp	r3, #48	@ 0x30
 80031b4:	d063      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x166>
 80031b6:	d86b      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x178>
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d060      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x166>
 80031bc:	d868      	bhi.n	8003290 <HAL_TIM_ConfigClockSource+0x178>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d05d      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x166>
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d05b      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x166>
 80031c6:	e063      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031d8:	f000 fa4a 	bl	8003670 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2277      	movs	r2, #119	@ 0x77
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	609a      	str	r2, [r3, #8]
      break;
 80031f4:	e052      	b.n	800329c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003206:	f000 fa33 	bl	8003670 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2180      	movs	r1, #128	@ 0x80
 8003216:	01c9      	lsls	r1, r1, #7
 8003218:	430a      	orrs	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
      break;
 800321c:	e03e      	b.n	800329c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800322a:	001a      	movs	r2, r3
 800322c:	f000 f9a6 	bl	800357c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2150      	movs	r1, #80	@ 0x50
 8003236:	0018      	movs	r0, r3
 8003238:	f000 fa00 	bl	800363c <TIM_ITRx_SetConfig>
      break;
 800323c:	e02e      	b.n	800329c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800324a:	001a      	movs	r2, r3
 800324c:	f000 f9c4 	bl	80035d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2160      	movs	r1, #96	@ 0x60
 8003256:	0018      	movs	r0, r3
 8003258:	f000 f9f0 	bl	800363c <TIM_ITRx_SetConfig>
      break;
 800325c:	e01e      	b.n	800329c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800326a:	001a      	movs	r2, r3
 800326c:	f000 f986 	bl	800357c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2140      	movs	r1, #64	@ 0x40
 8003276:	0018      	movs	r0, r3
 8003278:	f000 f9e0 	bl	800363c <TIM_ITRx_SetConfig>
      break;
 800327c:	e00e      	b.n	800329c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	0019      	movs	r1, r3
 8003288:	0010      	movs	r0, r2
 800328a:	f000 f9d7 	bl	800363c <TIM_ITRx_SetConfig>
      break;
 800328e:	e005      	b.n	800329c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003290:	230f      	movs	r3, #15
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
      break;
 8003298:	e000      	b.n	800329c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800329a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2239      	movs	r2, #57	@ 0x39
 80032a0:	2101      	movs	r1, #1
 80032a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2238      	movs	r2, #56	@ 0x38
 80032a8:	2100      	movs	r1, #0
 80032aa:	5499      	strb	r1, [r3, r2]

  return status;
 80032ac:	230f      	movs	r3, #15
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	781b      	ldrb	r3, [r3, #0]
}
 80032b2:	0018      	movs	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b004      	add	sp, #16
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			@ (mov r8, r8)
 80032bc:	ffff00ff 	.word	0xffff00ff

080032c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	2380      	movs	r3, #128	@ 0x80
 80032d4:	05db      	lsls	r3, r3, #23
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d007      	beq.n	80032ea <TIM_Base_SetConfig+0x2a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a22      	ldr	r2, [pc, #136]	@ (8003368 <TIM_Base_SetConfig+0xa8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d003      	beq.n	80032ea <TIM_Base_SetConfig+0x2a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a21      	ldr	r2, [pc, #132]	@ (800336c <TIM_Base_SetConfig+0xac>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d108      	bne.n	80032fc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2270      	movs	r2, #112	@ 0x70
 80032ee:	4393      	bics	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	2380      	movs	r3, #128	@ 0x80
 8003300:	05db      	lsls	r3, r3, #23
 8003302:	429a      	cmp	r2, r3
 8003304:	d007      	beq.n	8003316 <TIM_Base_SetConfig+0x56>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a17      	ldr	r2, [pc, #92]	@ (8003368 <TIM_Base_SetConfig+0xa8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d003      	beq.n	8003316 <TIM_Base_SetConfig+0x56>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a16      	ldr	r2, [pc, #88]	@ (800336c <TIM_Base_SetConfig+0xac>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d108      	bne.n	8003328 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a15      	ldr	r2, [pc, #84]	@ (8003370 <TIM_Base_SetConfig+0xb0>)
 800331a:	4013      	ands	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2280      	movs	r2, #128	@ 0x80
 800332c:	4393      	bics	r3, r2
 800332e:	001a      	movs	r2, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2204      	movs	r2, #4
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	601a      	str	r2, [r3, #0]
}
 8003360:	46c0      	nop			@ (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b004      	add	sp, #16
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40010800 	.word	0x40010800
 800336c:	40011400 	.word	0x40011400
 8003370:	fffffcff 	.word	0xfffffcff

08003374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	2201      	movs	r2, #1
 800338a:	4393      	bics	r3, r2
 800338c:	001a      	movs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2270      	movs	r2, #112	@ 0x70
 80033a2:	4393      	bics	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2203      	movs	r2, #3
 80033aa:	4393      	bics	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2202      	movs	r2, #2
 80033bc:	4393      	bics	r3, r2
 80033be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	621a      	str	r2, [r3, #32]
}
 80033e4:	46c0      	nop			@ (mov r8, r8)
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b006      	add	sp, #24
 80033ea:	bd80      	pop	{r7, pc}

080033ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	2210      	movs	r2, #16
 8003402:	4393      	bics	r3, r2
 8003404:	001a      	movs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a13      	ldr	r2, [pc, #76]	@ (8003468 <TIM_OC2_SetConfig+0x7c>)
 800341a:	4013      	ands	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4a12      	ldr	r2, [pc, #72]	@ (800346c <TIM_OC2_SetConfig+0x80>)
 8003422:	4013      	ands	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2220      	movs	r2, #32
 8003436:	4393      	bics	r3, r2
 8003438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	621a      	str	r2, [r3, #32]
}
 8003460:	46c0      	nop			@ (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	b006      	add	sp, #24
 8003466:	bd80      	pop	{r7, pc}
 8003468:	ffff8fff 	.word	0xffff8fff
 800346c:	fffffcff 	.word	0xfffffcff

08003470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4a18      	ldr	r2, [pc, #96]	@ (80034e8 <TIM_OC3_SetConfig+0x78>)
 8003486:	401a      	ands	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2270      	movs	r2, #112	@ 0x70
 800349c:	4393      	bics	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2203      	movs	r2, #3
 80034a4:	4393      	bics	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	4a0d      	ldr	r2, [pc, #52]	@ (80034ec <TIM_OC3_SetConfig+0x7c>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	621a      	str	r2, [r3, #32]
}
 80034e0:	46c0      	nop			@ (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b006      	add	sp, #24
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	fffffeff 	.word	0xfffffeff
 80034ec:	fffffdff 	.word	0xfffffdff

080034f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4a19      	ldr	r2, [pc, #100]	@ (800356c <TIM_OC4_SetConfig+0x7c>)
 8003506:	401a      	ands	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a15      	ldr	r2, [pc, #84]	@ (8003570 <TIM_OC4_SetConfig+0x80>)
 800351c:	4013      	ands	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a14      	ldr	r2, [pc, #80]	@ (8003574 <TIM_OC4_SetConfig+0x84>)
 8003524:	4013      	ands	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	4a10      	ldr	r2, [pc, #64]	@ (8003578 <TIM_OC4_SetConfig+0x88>)
 8003538:	4013      	ands	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	031b      	lsls	r3, r3, #12
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	621a      	str	r2, [r3, #32]
}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b006      	add	sp, #24
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	ffffefff 	.word	0xffffefff
 8003570:	ffff8fff 	.word	0xffff8fff
 8003574:	fffffcff 	.word	0xfffffcff
 8003578:	ffffdfff 	.word	0xffffdfff

0800357c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	2201      	movs	r2, #1
 8003594:	4393      	bics	r3, r2
 8003596:	001a      	movs	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	22f0      	movs	r2, #240	@ 0xf0
 80035a6:	4393      	bics	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	220a      	movs	r2, #10
 80035b8:	4393      	bics	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	621a      	str	r2, [r3, #32]
}
 80035d0:	46c0      	nop			@ (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b006      	add	sp, #24
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	2210      	movs	r2, #16
 80035f0:	4393      	bics	r3, r2
 80035f2:	001a      	movs	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4a0d      	ldr	r2, [pc, #52]	@ (8003638 <TIM_TI2_ConfigInputStage+0x60>)
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	031b      	lsls	r3, r3, #12
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	22a0      	movs	r2, #160	@ 0xa0
 8003614:	4393      	bics	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	621a      	str	r2, [r3, #32]
}
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	46bd      	mov	sp, r7
 8003632:	b006      	add	sp, #24
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	ffff0fff 	.word	0xffff0fff

0800363c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2270      	movs	r2, #112	@ 0x70
 8003650:	4393      	bics	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	2207      	movs	r2, #7
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	609a      	str	r2, [r3, #8]
}
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b004      	add	sp, #16
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	4a09      	ldr	r2, [pc, #36]	@ (80036ac <TIM_ETR_SetConfig+0x3c>)
 8003688:	4013      	ands	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	021a      	lsls	r2, r3, #8
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	431a      	orrs	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4313      	orrs	r3, r2
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	609a      	str	r2, [r3, #8]
}
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b006      	add	sp, #24
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	ffff00ff 	.word	0xffff00ff

080036b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	221f      	movs	r2, #31
 80036c0:	4013      	ands	r3, r2
 80036c2:	2201      	movs	r2, #1
 80036c4:	409a      	lsls	r2, r3
 80036c6:	0013      	movs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	43d2      	mvns	r2, r2
 80036d2:	401a      	ands	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a1a      	ldr	r2, [r3, #32]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	211f      	movs	r1, #31
 80036e0:	400b      	ands	r3, r1
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4099      	lsls	r1, r3
 80036e6:	000b      	movs	r3, r1
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	621a      	str	r2, [r3, #32]
}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b006      	add	sp, #24
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2238      	movs	r2, #56	@ 0x38
 8003706:	5c9b      	ldrb	r3, [r3, r2]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800370c:	2302      	movs	r3, #2
 800370e:	e042      	b.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2238      	movs	r2, #56	@ 0x38
 8003714:	2101      	movs	r1, #1
 8003716:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2239      	movs	r2, #57	@ 0x39
 800371c:	2102      	movs	r1, #2
 800371e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2270      	movs	r2, #112	@ 0x70
 8003734:	4393      	bics	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	2380      	movs	r3, #128	@ 0x80
 8003750:	05db      	lsls	r3, r3, #23
 8003752:	429a      	cmp	r2, r3
 8003754:	d009      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a11      	ldr	r2, [pc, #68]	@ (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a0f      	ldr	r2, [pc, #60]	@ (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d10c      	bne.n	8003784 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2280      	movs	r2, #128	@ 0x80
 800376e:	4393      	bics	r3, r2
 8003770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	4313      	orrs	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2239      	movs	r2, #57	@ 0x39
 8003788:	2101      	movs	r1, #1
 800378a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2238      	movs	r2, #56	@ 0x38
 8003790:	2100      	movs	r1, #0
 8003792:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	0018      	movs	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	b004      	add	sp, #16
 800379c:	bd80      	pop	{r7, pc}
 800379e:	46c0      	nop			@ (mov r8, r8)
 80037a0:	40010800 	.word	0x40010800
 80037a4:	40011400 	.word	0x40011400

080037a8 <memset>:
 80037a8:	0003      	movs	r3, r0
 80037aa:	1882      	adds	r2, r0, r2
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d100      	bne.n	80037b2 <memset+0xa>
 80037b0:	4770      	bx	lr
 80037b2:	7019      	strb	r1, [r3, #0]
 80037b4:	3301      	adds	r3, #1
 80037b6:	e7f9      	b.n	80037ac <memset+0x4>

080037b8 <__libc_init_array>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	2600      	movs	r6, #0
 80037bc:	4c0c      	ldr	r4, [pc, #48]	@ (80037f0 <__libc_init_array+0x38>)
 80037be:	4d0d      	ldr	r5, [pc, #52]	@ (80037f4 <__libc_init_array+0x3c>)
 80037c0:	1b64      	subs	r4, r4, r5
 80037c2:	10a4      	asrs	r4, r4, #2
 80037c4:	42a6      	cmp	r6, r4
 80037c6:	d109      	bne.n	80037dc <__libc_init_array+0x24>
 80037c8:	2600      	movs	r6, #0
 80037ca:	f000 f819 	bl	8003800 <_init>
 80037ce:	4c0a      	ldr	r4, [pc, #40]	@ (80037f8 <__libc_init_array+0x40>)
 80037d0:	4d0a      	ldr	r5, [pc, #40]	@ (80037fc <__libc_init_array+0x44>)
 80037d2:	1b64      	subs	r4, r4, r5
 80037d4:	10a4      	asrs	r4, r4, #2
 80037d6:	42a6      	cmp	r6, r4
 80037d8:	d105      	bne.n	80037e6 <__libc_init_array+0x2e>
 80037da:	bd70      	pop	{r4, r5, r6, pc}
 80037dc:	00b3      	lsls	r3, r6, #2
 80037de:	58eb      	ldr	r3, [r5, r3]
 80037e0:	4798      	blx	r3
 80037e2:	3601      	adds	r6, #1
 80037e4:	e7ee      	b.n	80037c4 <__libc_init_array+0xc>
 80037e6:	00b3      	lsls	r3, r6, #2
 80037e8:	58eb      	ldr	r3, [r5, r3]
 80037ea:	4798      	blx	r3
 80037ec:	3601      	adds	r6, #1
 80037ee:	e7f2      	b.n	80037d6 <__libc_init_array+0x1e>
 80037f0:	0800385c 	.word	0x0800385c
 80037f4:	0800385c 	.word	0x0800385c
 80037f8:	08003860 	.word	0x08003860
 80037fc:	0800385c 	.word	0x0800385c

08003800 <_init>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003806:	bc08      	pop	{r3}
 8003808:	469e      	mov	lr, r3
 800380a:	4770      	bx	lr

0800380c <_fini>:
 800380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003812:	bc08      	pop	{r3}
 8003814:	469e      	mov	lr, r3
 8003816:	4770      	bx	lr
