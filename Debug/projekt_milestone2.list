
projekt_milestone2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003984  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003a44  08003a44  00004a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b24  08003b24  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003b24  08003b24  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003b24  08003b24  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b24  08003b24  00004b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b28  08003b28  00004b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003b2c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  2000005c  08003b88  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08003b88  00005400  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071b0  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001655  00000000  00000000  0000c234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0000d890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000068e  00000000  00000000  0000e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011426  00000000  00000000  0000e7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d7a  00000000  00000000  0001fbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068fcc  00000000  00000000  00029966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00092932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002304  00000000  00000000  00092978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00094c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a2c 	.word	0x08003a2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003a2c 	.word	0x08003a2c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <LCD_EnablePulse>:
#include "lcd_hd44780.h"
#include "stm32l0xx_hal.h"
#include "string.h"

static void LCD_EnablePulse(void) {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000238:	2380      	movs	r3, #128	@ 0x80
 800023a:	00db      	lsls	r3, r3, #3
 800023c:	480a      	ldr	r0, [pc, #40]	@ (8000268 <LCD_EnablePulse+0x34>)
 800023e:	2201      	movs	r2, #1
 8000240:	0019      	movs	r1, r3
 8000242:	f001 fc4e 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000246:	2001      	movs	r0, #1
 8000248:	f001 f97c 	bl	8001544 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	00db      	lsls	r3, r3, #3
 8000250:	4805      	ldr	r0, [pc, #20]	@ (8000268 <LCD_EnablePulse+0x34>)
 8000252:	2200      	movs	r2, #0
 8000254:	0019      	movs	r1, r3
 8000256:	f001 fc44 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800025a:	2001      	movs	r0, #1
 800025c:	f001 f972 	bl	8001544 <HAL_Delay>
}
 8000260:	46c0      	nop			@ (mov r8, r8)
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	50000400 	.word	0x50000400

0800026c <LCD_Write8Bits>:

static void LCD_Write8Bits(uint8_t data) {
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	0002      	movs	r2, r0
 8000274:	1dfb      	adds	r3, r7, #7
 8000276:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000278:	1dfb      	adds	r3, r7, #7
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2201      	movs	r2, #1
 800027e:	4013      	ands	r3, r2
 8000280:	b2db      	uxtb	r3, r3
 8000282:	4832      	ldr	r0, [pc, #200]	@ (800034c <LCD_Write8Bits+0xe0>)
 8000284:	001a      	movs	r2, r3
 8000286:	2101      	movs	r1, #1
 8000288:	f001 fc2b 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800028c:	1dfb      	adds	r3, r7, #7
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	105b      	asrs	r3, r3, #1
 8000292:	b2db      	uxtb	r3, r3
 8000294:	2201      	movs	r2, #1
 8000296:	4013      	ands	r3, r2
 8000298:	b2db      	uxtb	r3, r3
 800029a:	482c      	ldr	r0, [pc, #176]	@ (800034c <LCD_Write8Bits+0xe0>)
 800029c:	001a      	movs	r2, r3
 800029e:	2102      	movs	r1, #2
 80002a0:	f001 fc1f 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002a4:	1dfb      	adds	r3, r7, #7
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	109b      	asrs	r3, r3, #2
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	2201      	movs	r2, #1
 80002ae:	4013      	ands	r3, r2
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	4826      	ldr	r0, [pc, #152]	@ (800034c <LCD_Write8Bits+0xe0>)
 80002b4:	001a      	movs	r2, r3
 80002b6:	2104      	movs	r1, #4
 80002b8:	f001 fc13 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	10db      	asrs	r3, r3, #3
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	2201      	movs	r2, #1
 80002c6:	4013      	ands	r3, r2
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	4820      	ldr	r0, [pc, #128]	@ (800034c <LCD_Write8Bits+0xe0>)
 80002cc:	001a      	movs	r2, r3
 80002ce:	2108      	movs	r1, #8
 80002d0:	f001 fc07 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002d4:	1dfb      	adds	r3, r7, #7
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	111b      	asrs	r3, r3, #4
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	2201      	movs	r2, #1
 80002de:	4013      	ands	r3, r2
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	2380      	movs	r3, #128	@ 0x80
 80002e4:	00d9      	lsls	r1, r3, #3
 80002e6:	23a0      	movs	r3, #160	@ 0xa0
 80002e8:	05db      	lsls	r3, r3, #23
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 fbf9 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	115b      	asrs	r3, r3, #5
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	2201      	movs	r2, #1
 80002fa:	4013      	ands	r3, r2
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	2380      	movs	r3, #128	@ 0x80
 8000300:	0119      	lsls	r1, r3, #4
 8000302:	23a0      	movs	r3, #160	@ 0xa0
 8000304:	05db      	lsls	r3, r3, #23
 8000306:	0018      	movs	r0, r3
 8000308:	f001 fbeb 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800030c:	1dfb      	adds	r3, r7, #7
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	119b      	asrs	r3, r3, #6
 8000312:	b2db      	uxtb	r3, r3
 8000314:	2201      	movs	r2, #1
 8000316:	4013      	ands	r3, r2
 8000318:	b2da      	uxtb	r2, r3
 800031a:	2380      	movs	r3, #128	@ 0x80
 800031c:	0159      	lsls	r1, r3, #5
 800031e:	23a0      	movs	r3, #160	@ 0xa0
 8000320:	05db      	lsls	r3, r3, #23
 8000322:	0018      	movs	r0, r3
 8000324:	f001 fbdd 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	09db      	lsrs	r3, r3, #7
 800032e:	b2da      	uxtb	r2, r3
 8000330:	2380      	movs	r3, #128	@ 0x80
 8000332:	0199      	lsls	r1, r3, #6
 8000334:	23a0      	movs	r3, #160	@ 0xa0
 8000336:	05db      	lsls	r3, r3, #23
 8000338:	0018      	movs	r0, r3
 800033a:	f001 fbd2 	bl	8001ae2 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 800033e:	f7ff ff79 	bl	8000234 <LCD_EnablePulse>
}
 8000342:	46c0      	nop			@ (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	b002      	add	sp, #8
 8000348:	bd80      	pop	{r7, pc}
 800034a:	46c0      	nop			@ (mov r8, r8)
 800034c:	50000800 	.word	0x50000800

08000350 <LCD_Send>:

static void LCD_Send(uint8_t data, uint8_t rs) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	0002      	movs	r2, r0
 8000358:	1dfb      	adds	r3, r7, #7
 800035a:	701a      	strb	r2, [r3, #0]
 800035c:	1dbb      	adds	r3, r7, #6
 800035e:	1c0a      	adds	r2, r1, #0
 8000360:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, rs ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000362:	1dbb      	adds	r3, r7, #6
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	1e5a      	subs	r2, r3, #1
 8000368:	4193      	sbcs	r3, r2
 800036a:	b2db      	uxtb	r3, r3
 800036c:	001a      	movs	r2, r3
 800036e:	2380      	movs	r3, #128	@ 0x80
 8000370:	011b      	lsls	r3, r3, #4
 8000372:	4806      	ldr	r0, [pc, #24]	@ (800038c <LCD_Send+0x3c>)
 8000374:	0019      	movs	r1, r3
 8000376:	f001 fbb4 	bl	8001ae2 <HAL_GPIO_WritePin>
    LCD_Write8Bits(data);
 800037a:	1dfb      	adds	r3, r7, #7
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	0018      	movs	r0, r3
 8000380:	f7ff ff74 	bl	800026c <LCD_Write8Bits>
}
 8000384:	46c0      	nop			@ (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}
 800038c:	50000400 	.word	0x50000400

08000390 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	0002      	movs	r2, r0
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	701a      	strb	r2, [r3, #0]
    LCD_Send(cmd, 0);
 800039c:	1dfb      	adds	r3, r7, #7
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2100      	movs	r1, #0
 80003a2:	0018      	movs	r0, r3
 80003a4:	f7ff ffd4 	bl	8000350 <LCD_Send>
}
 80003a8:	46c0      	nop			@ (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	0002      	movs	r2, r0
 80003b8:	1dfb      	adds	r3, r7, #7
 80003ba:	701a      	strb	r2, [r3, #0]
    LCD_Send(data, 1);
 80003bc:	1dfb      	adds	r3, r7, #7
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2101      	movs	r1, #1
 80003c2:	0018      	movs	r0, r3
 80003c4:	f7ff ffc4 	bl	8000350 <LCD_Send>
}
 80003c8:	46c0      	nop			@ (mov r8, r8)
 80003ca:	46bd      	mov	sp, r7
 80003cc:	b002      	add	sp, #8
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <LCD_Clear>:

void LCD_Clear(void) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);
 80003d4:	2001      	movs	r0, #1
 80003d6:	f7ff ffdb 	bl	8000390 <LCD_SendCommand>
    HAL_Delay(2);
 80003da:	2002      	movs	r0, #2
 80003dc:	f001 f8b2 	bl	8001544 <HAL_Delay>
}
 80003e0:	46c0      	nop			@ (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b084      	sub	sp, #16
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	0002      	movs	r2, r0
 80003ee:	1dfb      	adds	r3, r7, #7
 80003f0:	701a      	strb	r2, [r3, #0]
 80003f2:	1dbb      	adds	r3, r7, #6
 80003f4:	1c0a      	adds	r2, r1, #0
 80003f6:	701a      	strb	r2, [r3, #0]
    uint8_t addr = (row == 0) ? 0x00 : 0x40;
 80003f8:	1dfb      	adds	r3, r7, #7
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d101      	bne.n	8000404 <LCD_SetCursor+0x1e>
 8000400:	2200      	movs	r2, #0
 8000402:	e000      	b.n	8000406 <LCD_SetCursor+0x20>
 8000404:	2240      	movs	r2, #64	@ 0x40
 8000406:	210f      	movs	r1, #15
 8000408:	187b      	adds	r3, r7, r1
 800040a:	701a      	strb	r2, [r3, #0]
    LCD_SendCommand(0x80 | (addr + col));
 800040c:	187a      	adds	r2, r7, r1
 800040e:	1dbb      	adds	r3, r7, #6
 8000410:	7812      	ldrb	r2, [r2, #0]
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	18d3      	adds	r3, r2, r3
 8000416:	b2db      	uxtb	r3, r3
 8000418:	b25b      	sxtb	r3, r3
 800041a:	2280      	movs	r2, #128	@ 0x80
 800041c:	4252      	negs	r2, r2
 800041e:	4313      	orrs	r3, r2
 8000420:	b25b      	sxtb	r3, r3
 8000422:	b2db      	uxtb	r3, r3
 8000424:	0018      	movs	r0, r3
 8000426:	f7ff ffb3 	bl	8000390 <LCD_SendCommand>
}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b004      	add	sp, #16
 8000430:	bd80      	pop	{r7, pc}

08000432 <LCD_SendString>:

void LCD_SendString(char* str) {
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
    while (*str) {
 800043a:	e006      	b.n	800044a <LCD_SendString+0x18>
        LCD_SendData(*str++);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	1c5a      	adds	r2, r3, #1
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	0018      	movs	r0, r3
 8000446:	f7ff ffb3 	bl	80003b0 <LCD_SendData>
    while (*str) {
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d1f4      	bne.n	800043c <LCD_SendString+0xa>
    }
}
 8000452:	46c0      	nop			@ (mov r8, r8)
 8000454:	46c0      	nop			@ (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	b002      	add	sp, #8
 800045a:	bd80      	pop	{r7, pc}

0800045c <LCD_Init>:

void LCD_Init(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 8000460:	2064      	movs	r0, #100	@ 0x64
 8000462:	f001 f86f 	bl	8001544 <HAL_Delay>

    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000466:	2380      	movs	r3, #128	@ 0x80
 8000468:	011b      	lsls	r3, r3, #4
 800046a:	481d      	ldr	r0, [pc, #116]	@ (80004e0 <LCD_Init+0x84>)
 800046c:	2200      	movs	r2, #0
 800046e:	0019      	movs	r1, r3
 8000470:	f001 fb37 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000474:	2380      	movs	r3, #128	@ 0x80
 8000476:	00db      	lsls	r3, r3, #3
 8000478:	4819      	ldr	r0, [pc, #100]	@ (80004e0 <LCD_Init+0x84>)
 800047a:	2200      	movs	r2, #0
 800047c:	0019      	movs	r1, r3
 800047e:	f001 fb30 	bl	8001ae2 <HAL_GPIO_WritePin>
    LCD_Write8Bits(0x30);
 8000482:	2030      	movs	r0, #48	@ 0x30
 8000484:	f7ff fef2 	bl	800026c <LCD_Write8Bits>
     HAL_Delay(5);
 8000488:	2005      	movs	r0, #5
 800048a:	f001 f85b 	bl	8001544 <HAL_Delay>
     LCD_Write8Bits(0x30);
 800048e:	2030      	movs	r0, #48	@ 0x30
 8000490:	f7ff feec 	bl	800026c <LCD_Write8Bits>
     HAL_Delay(5);
 8000494:	2005      	movs	r0, #5
 8000496:	f001 f855 	bl	8001544 <HAL_Delay>
     LCD_Write8Bits(0x30);
 800049a:	2030      	movs	r0, #48	@ 0x30
 800049c:	f7ff fee6 	bl	800026c <LCD_Write8Bits>
     HAL_Delay(5);
 80004a0:	2005      	movs	r0, #5
 80004a2:	f001 f84f 	bl	8001544 <HAL_Delay>
    LCD_SendCommand(0x38);
 80004a6:	2038      	movs	r0, #56	@ 0x38
 80004a8:	f7ff ff72 	bl	8000390 <LCD_SendCommand>
    HAL_Delay(5);
 80004ac:	2005      	movs	r0, #5
 80004ae:	f001 f849 	bl	8001544 <HAL_Delay>
    LCD_SendCommand(0x0F);
 80004b2:	200f      	movs	r0, #15
 80004b4:	f7ff ff6c 	bl	8000390 <LCD_SendCommand>
    HAL_Delay(2);
 80004b8:	2002      	movs	r0, #2
 80004ba:	f001 f843 	bl	8001544 <HAL_Delay>
    LCD_SendCommand(0x01);
 80004be:	2001      	movs	r0, #1
 80004c0:	f7ff ff66 	bl	8000390 <LCD_SendCommand>
    HAL_Delay(2);
 80004c4:	2002      	movs	r0, #2
 80004c6:	f001 f83d 	bl	8001544 <HAL_Delay>
    LCD_SendCommand(0x02);
 80004ca:	2002      	movs	r0, #2
 80004cc:	f7ff ff60 	bl	8000390 <LCD_SendCommand>
    HAL_Delay(2);
 80004d0:	2002      	movs	r0, #2
 80004d2:	f001 f837 	bl	8001544 <HAL_Delay>
    LCD_Clear();
 80004d6:	f7ff ff7b 	bl	80003d0 <LCD_Clear>
}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	50000400 	.word	0x50000400

080004e4 <skretWLewo>:
	motors_forward(speed);
}
void powoli(uint32_t speed){ // Wrapper
	motors_forward(speed);
}
void skretWLewo(uint32_t speed){ // Wrapper for sharp turn
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	motors_turn_left(speed, 0); // One motor full, other stop
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2100      	movs	r1, #0
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 f90f 	bl	8000714 <motors_turn_left>
    last_turn_direction = 1; // For searchLine
 80004f6:	4b03      	ldr	r3, [pc, #12]	@ (8000504 <skretWLewo+0x20>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	601a      	str	r2, [r3, #0]
}
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b002      	add	sp, #8
 8000502:	bd80      	pop	{r7, pc}
 8000504:	2000010c 	.word	0x2000010c

08000508 <skretWPrawo>:
void skretWPrawo(uint32_t speed){ // Wrapper for sharp turn
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	motors_turn_right(0, speed); // One motor full, other stop
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	0019      	movs	r1, r3
 8000514:	2000      	movs	r0, #0
 8000516:	f000 f937 	bl	8000788 <motors_turn_right>
    last_turn_direction = -1; // For searchLine
 800051a:	4b04      	ldr	r3, [pc, #16]	@ (800052c <skretWPrawo+0x24>)
 800051c:	2201      	movs	r2, #1
 800051e:	4252      	negs	r2, r2
 8000520:	601a      	str	r2, [r3, #0]
}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b002      	add	sp, #8
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	2000010c 	.word	0x2000010c

08000530 <decode_nec_ir>:
    }
  }
}

uint32_t decode_nec_ir(volatile uint32_t *pulses, uint8_t count)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	000a      	movs	r2, r1
 800053a:	1cfb      	adds	r3, r7, #3
 800053c:	701a      	strb	r2, [r3, #0]
  if (count < NEC_PULSE_COUNT) return 0xFFFFFFFF;
 800053e:	1cfb      	adds	r3, r7, #3
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b42      	cmp	r3, #66	@ 0x42
 8000544:	d802      	bhi.n	800054c <decode_nec_ir+0x1c>
 8000546:	2301      	movs	r3, #1
 8000548:	425b      	negs	r3, r3
 800054a:	e060      	b.n	800060e <decode_nec_ir+0xde>

  if (pulses[0] < NEC_AGC_MARK_MIN_US || pulses[0] > NEC_AGC_MARK_MAX_US) return 0xFFFFFFFF;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	23fa      	movs	r3, #250	@ 0xfa
 8000552:	015b      	lsls	r3, r3, #5
 8000554:	429a      	cmp	r2, r3
 8000556:	d304      	bcc.n	8000562 <decode_nec_ir+0x32>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a2e      	ldr	r2, [pc, #184]	@ (8000618 <decode_nec_ir+0xe8>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d902      	bls.n	8000568 <decode_nec_ir+0x38>
 8000562:	2301      	movs	r3, #1
 8000564:	425b      	negs	r3, r3
 8000566:	e052      	b.n	800060e <decode_nec_ir+0xde>
  if (pulses[1] < NEC_AGC_SPACE_MIN_US || pulses[1] > NEC_AGC_SPACE_MAX_US) return 0xFFFFFFFF;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3304      	adds	r3, #4
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	23fa      	movs	r3, #250	@ 0xfa
 8000570:	011b      	lsls	r3, r3, #4
 8000572:	429a      	cmp	r2, r3
 8000574:	d305      	bcc.n	8000582 <decode_nec_ir+0x52>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	3304      	adds	r3, #4
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a27      	ldr	r2, [pc, #156]	@ (800061c <decode_nec_ir+0xec>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d902      	bls.n	8000588 <decode_nec_ir+0x58>
 8000582:	2301      	movs	r3, #1
 8000584:	425b      	negs	r3, r3
 8000586:	e042      	b.n	800060e <decode_nec_ir+0xde>

  uint32_t code = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 32; i++)
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	e039      	b.n	8000606 <decode_nec_ir+0xd6>
  {
    uint32_t bit_mark = pulses[2 + (2 * i)];
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	3301      	adds	r3, #1
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	18d3      	adds	r3, r2, r3
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	60fb      	str	r3, [r7, #12]
    uint32_t bit_space = pulses[2 + (2 * i) + 1];
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	3303      	adds	r3, #3
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	18d3      	adds	r3, r2, r3
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	60bb      	str	r3, [r7, #8]

    if (bit_mark < NEC_BIT_MARK_MIN_US || bit_mark > NEC_BIT_MARK_MAX_US) return 0xFFFFFFFF;
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	23c8      	movs	r3, #200	@ 0xc8
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d303      	bcc.n	80005c2 <decode_nec_ir+0x92>
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	4a18      	ldr	r2, [pc, #96]	@ (8000620 <decode_nec_ir+0xf0>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d902      	bls.n	80005c8 <decode_nec_ir+0x98>
 80005c2:	2301      	movs	r3, #1
 80005c4:	425b      	negs	r3, r3
 80005c6:	e022      	b.n	800060e <decode_nec_ir+0xde>

    code <<= 1;
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	617b      	str	r3, [r7, #20]
    if (bit_space >= NEC_BIT_1_SPACE_MIN_US && bit_space <= NEC_BIT_1_SPACE_MAX_US)
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <decode_nec_ir+0xf4>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d908      	bls.n	80005e8 <decode_nec_ir+0xb8>
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a13      	ldr	r2, [pc, #76]	@ (8000628 <decode_nec_ir+0xf8>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d804      	bhi.n	80005e8 <decode_nec_ir+0xb8>
    {
      code |= 1;
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	2201      	movs	r2, #1
 80005e2:	4313      	orrs	r3, r2
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	e00b      	b.n	8000600 <decode_nec_ir+0xd0>
    }
    else if (bit_space >= NEC_BIT_0_SPACE_MIN_US && bit_space <= NEC_BIT_0_SPACE_MAX_US)
 80005e8:	68ba      	ldr	r2, [r7, #8]
 80005ea:	23c8      	movs	r3, #200	@ 0xc8
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d303      	bcc.n	80005fa <decode_nec_ir+0xca>
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000620 <decode_nec_ir+0xf0>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d902      	bls.n	8000600 <decode_nec_ir+0xd0>
    {
      // 0 already set by shift
    }
    else
    {
      return 0xFFFFFFFF;
 80005fa:	2301      	movs	r3, #1
 80005fc:	425b      	negs	r3, r3
 80005fe:	e006      	b.n	800060e <decode_nec_ir+0xde>
  for (int i = 0; i < 32; i++)
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	3301      	adds	r3, #1
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	2b1f      	cmp	r3, #31
 800060a:	ddc2      	ble.n	8000592 <decode_nec_ir+0x62>
    }
  }
  return code;
 800060c:	697b      	ldr	r3, [r7, #20]
}
 800060e:	0018      	movs	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	b006      	add	sp, #24
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	00002710 	.word	0x00002710
 800061c:	00001388 	.word	0x00001388
 8000620:	000002ee 	.word	0x000002ee
 8000624:	000005db 	.word	0x000005db
 8000628:	0000076c 	.word	0x0000076c

0800062c <motors_forward>:

// --- Robot Movement Functions Implementation ---
void motors_forward(uint32_t speed) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);   // Motor 1 Forward
 8000634:	2380      	movs	r3, #128	@ 0x80
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	4815      	ldr	r0, [pc, #84]	@ (8000690 <motors_forward+0x64>)
 800063a:	2201      	movs	r2, #1
 800063c:	0019      	movs	r1, r3
 800063e:	f001 fa50 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	015b      	lsls	r3, r3, #5
 8000646:	4812      	ldr	r0, [pc, #72]	@ (8000690 <motors_forward+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	0019      	movs	r1, r3
 800064c:	f001 fa49 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);   // Motor 2 Forward
 8000650:	2380      	movs	r3, #128	@ 0x80
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	480e      	ldr	r0, [pc, #56]	@ (8000690 <motors_forward+0x64>)
 8000656:	2201      	movs	r2, #1
 8000658:	0019      	movs	r1, r3
 800065a:	f001 fa42 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <motors_forward+0x64>)
 8000660:	2200      	movs	r2, #0
 8000662:	2140      	movs	r1, #64	@ 0x40
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fa3c 	bl	8001ae2 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 800066a:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <motors_forward+0x68>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <motors_forward+0x68>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	639a      	str	r2, [r3, #56]	@ 0x38
    current_duty_M1 = speed;
 800067a:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <motors_forward+0x6c>)
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	601a      	str	r2, [r3, #0]
    current_duty_M2 = speed;
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <motors_forward+0x70>)
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	601a      	str	r2, [r3, #0]
}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	50000800 	.word	0x50000800
 8000694:	20000078 	.word	0x20000078
 8000698:	20000104 	.word	0x20000104
 800069c:	20000108 	.word	0x20000108

080006a0 <motors_backward>:

void motors_backward(uint32_t speed) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET); // Motor 1 Backward
 80006a8:	2380      	movs	r3, #128	@ 0x80
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	4815      	ldr	r0, [pc, #84]	@ (8000704 <motors_backward+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	0019      	movs	r1, r3
 80006b2:	f001 fa16 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_SET);
 80006b6:	2380      	movs	r3, #128	@ 0x80
 80006b8:	015b      	lsls	r3, r3, #5
 80006ba:	4812      	ldr	r0, [pc, #72]	@ (8000704 <motors_backward+0x64>)
 80006bc:	2201      	movs	r2, #1
 80006be:	0019      	movs	r1, r3
 80006c0:	f001 fa0f 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET); // Motor 2 Backward
 80006c4:	2380      	movs	r3, #128	@ 0x80
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	480e      	ldr	r0, [pc, #56]	@ (8000704 <motors_backward+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	0019      	movs	r1, r3
 80006ce:	f001 fa08 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_SET);
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <motors_backward+0x64>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	2140      	movs	r1, #64	@ 0x40
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 fa02 	bl	8001ae2 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 80006de:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <motors_backward+0x68>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <motors_backward+0x68>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	639a      	str	r2, [r3, #56]	@ 0x38
    current_duty_M1 = speed;
 80006ee:	4b07      	ldr	r3, [pc, #28]	@ (800070c <motors_backward+0x6c>)
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	601a      	str	r2, [r3, #0]
    current_duty_M2 = speed;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <motors_backward+0x70>)
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	601a      	str	r2, [r3, #0]
}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	50000800 	.word	0x50000800
 8000708:	20000078 	.word	0x20000078
 800070c:	20000104 	.word	0x20000104
 8000710:	20000108 	.word	0x20000108

08000714 <motors_turn_left>:

// Gentle turn: one motor slower than the other
void motors_turn_left(uint32_t speed_M1_outer, uint32_t speed_M2_inner) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);   // M1 (Right wheel) Forward
 800071e:	2380      	movs	r3, #128	@ 0x80
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	4815      	ldr	r0, [pc, #84]	@ (8000778 <motors_turn_left+0x64>)
 8000724:	2201      	movs	r2, #1
 8000726:	0019      	movs	r1, r3
 8000728:	f001 f9db 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 800072c:	2380      	movs	r3, #128	@ 0x80
 800072e:	015b      	lsls	r3, r3, #5
 8000730:	4811      	ldr	r0, [pc, #68]	@ (8000778 <motors_turn_left+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	0019      	movs	r1, r3
 8000736:	f001 f9d4 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);   // M2 (Left wheel) Forward
 800073a:	2380      	movs	r3, #128	@ 0x80
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	480e      	ldr	r0, [pc, #56]	@ (8000778 <motors_turn_left+0x64>)
 8000740:	2201      	movs	r2, #1
 8000742:	0019      	movs	r1, r3
 8000744:	f001 f9cd 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 8000748:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <motors_turn_left+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	2140      	movs	r1, #64	@ 0x40
 800074e:	0018      	movs	r0, r3
 8000750:	f001 f9c7 	bl	8001ae2 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed_M1_outer); // M1 (Right)
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <motors_turn_left+0x68>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed_M2_inner); // M2 (Left)
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <motors_turn_left+0x68>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	639a      	str	r2, [r3, #56]	@ 0x38
    current_duty_M1 = speed_M1_outer;
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <motors_turn_left+0x6c>)
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	601a      	str	r2, [r3, #0]
    current_duty_M2 = speed_M2_inner;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <motors_turn_left+0x70>)
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	601a      	str	r2, [r3, #0]
}
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b002      	add	sp, #8
 8000776:	bd80      	pop	{r7, pc}
 8000778:	50000800 	.word	0x50000800
 800077c:	20000078 	.word	0x20000078
 8000780:	20000104 	.word	0x20000104
 8000784:	20000108 	.word	0x20000108

08000788 <motors_turn_right>:

void motors_turn_right(uint32_t speed_M1_inner, uint32_t speed_M2_outer) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);   // M1 (Right wheel) Forward
 8000792:	2380      	movs	r3, #128	@ 0x80
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	4815      	ldr	r0, [pc, #84]	@ (80007ec <motors_turn_right+0x64>)
 8000798:	2201      	movs	r2, #1
 800079a:	0019      	movs	r1, r3
 800079c:	f001 f9a1 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 80007a0:	2380      	movs	r3, #128	@ 0x80
 80007a2:	015b      	lsls	r3, r3, #5
 80007a4:	4811      	ldr	r0, [pc, #68]	@ (80007ec <motors_turn_right+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	0019      	movs	r1, r3
 80007aa:	f001 f99a 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);   // M2 (Left wheel) Forward
 80007ae:	2380      	movs	r3, #128	@ 0x80
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	480e      	ldr	r0, [pc, #56]	@ (80007ec <motors_turn_right+0x64>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	0019      	movs	r1, r3
 80007b8:	f001 f993 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 80007bc:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <motors_turn_right+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	2140      	movs	r1, #64	@ 0x40
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 f98d 	bl	8001ae2 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed_M1_inner); // M1 (Right)
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <motors_turn_right+0x68>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed_M2_outer); // M2 (Left)
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <motors_turn_right+0x68>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	639a      	str	r2, [r3, #56]	@ 0x38
    current_duty_M1 = speed_M1_inner;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <motors_turn_right+0x6c>)
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
    current_duty_M2 = speed_M2_outer;
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <motors_turn_right+0x70>)
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	601a      	str	r2, [r3, #0]
}
 80007e4:	46c0      	nop			@ (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	50000800 	.word	0x50000800
 80007f0:	20000078 	.word	0x20000078
 80007f4:	20000104 	.word	0x20000104
 80007f8:	20000108 	.word	0x20000108

080007fc <motors_pivot_left>:


void motors_pivot_left(uint32_t speed, uint32_t delay_ms) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);   // M1 (Right wheel) Forward
 8000806:	2380      	movs	r3, #128	@ 0x80
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	481a      	ldr	r0, [pc, #104]	@ (8000874 <motors_pivot_left+0x78>)
 800080c:	2201      	movs	r2, #1
 800080e:	0019      	movs	r1, r3
 8000810:	f001 f967 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 8000814:	2380      	movs	r3, #128	@ 0x80
 8000816:	015b      	lsls	r3, r3, #5
 8000818:	4816      	ldr	r0, [pc, #88]	@ (8000874 <motors_pivot_left+0x78>)
 800081a:	2200      	movs	r2, #0
 800081c:	0019      	movs	r1, r3
 800081e:	f001 f960 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET); // M2 (Left wheel) Backward
 8000822:	2380      	movs	r3, #128	@ 0x80
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4813      	ldr	r0, [pc, #76]	@ (8000874 <motors_pivot_left+0x78>)
 8000828:	2200      	movs	r2, #0
 800082a:	0019      	movs	r1, r3
 800082c:	f001 f959 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_SET);
 8000830:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <motors_pivot_left+0x78>)
 8000832:	2201      	movs	r2, #1
 8000834:	2140      	movs	r1, #64	@ 0x40
 8000836:	0018      	movs	r0, r3
 8000838:	f001 f953 	bl	8001ae2 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 800083c:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <motors_pivot_left+0x7c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <motors_pivot_left+0x7c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	639a      	str	r2, [r3, #56]	@ 0x38
    current_duty_M1 = speed;
 800084c:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <motors_pivot_left+0x80>)
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	601a      	str	r2, [r3, #0]
    current_duty_M2 = speed;
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <motors_pivot_left+0x84>)
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	601a      	str	r2, [r3, #0]
    if(delay_ms > 0) {
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d005      	beq.n	800086a <motors_pivot_left+0x6e>
        HAL_Delay(delay_ms);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	0018      	movs	r0, r3
 8000862:	f000 fe6f 	bl	8001544 <HAL_Delay>
        motors_stop(); // Stop after delay if specified
 8000866:	f000 f851 	bl	800090c <motors_stop>
    }
}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	50000800 	.word	0x50000800
 8000878:	20000078 	.word	0x20000078
 800087c:	20000104 	.word	0x20000104
 8000880:	20000108 	.word	0x20000108

08000884 <motors_pivot_right>:

void motors_pivot_right(uint32_t speed, uint32_t delay_ms) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET); // M1 (Right wheel) Backward
 800088e:	2380      	movs	r3, #128	@ 0x80
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	481a      	ldr	r0, [pc, #104]	@ (80008fc <motors_pivot_right+0x78>)
 8000894:	2200      	movs	r2, #0
 8000896:	0019      	movs	r1, r3
 8000898:	f001 f923 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_SET);
 800089c:	2380      	movs	r3, #128	@ 0x80
 800089e:	015b      	lsls	r3, r3, #5
 80008a0:	4816      	ldr	r0, [pc, #88]	@ (80008fc <motors_pivot_right+0x78>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	0019      	movs	r1, r3
 80008a6:	f001 f91c 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);   // M2 (Left wheel) Forward
 80008aa:	2380      	movs	r3, #128	@ 0x80
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4813      	ldr	r0, [pc, #76]	@ (80008fc <motors_pivot_right+0x78>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	0019      	movs	r1, r3
 80008b4:	f001 f915 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 80008b8:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <motors_pivot_right+0x78>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	2140      	movs	r1, #64	@ 0x40
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 f90f 	bl	8001ae2 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 80008c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <motors_pivot_right+0x7c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <motors_pivot_right+0x7c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	639a      	str	r2, [r3, #56]	@ 0x38
    current_duty_M1 = speed;
 80008d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <motors_pivot_right+0x80>)
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	601a      	str	r2, [r3, #0]
    current_duty_M2 = speed;
 80008da:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <motors_pivot_right+0x84>)
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	601a      	str	r2, [r3, #0]
    if(delay_ms > 0) {
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d005      	beq.n	80008f2 <motors_pivot_right+0x6e>
        HAL_Delay(delay_ms);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	0018      	movs	r0, r3
 80008ea:	f000 fe2b 	bl	8001544 <HAL_Delay>
        motors_stop(); // Stop after delay if specified
 80008ee:	f000 f80d 	bl	800090c <motors_stop>
    }
}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b002      	add	sp, #8
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	50000800 	.word	0x50000800
 8000900:	20000078 	.word	0x20000078
 8000904:	20000104 	.word	0x20000104
 8000908:	20000108 	.word	0x20000108

0800090c <motors_stop>:

void motors_stop(void) {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET); // Coast/Stop
 8000910:	2380      	movs	r3, #128	@ 0x80
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	4814      	ldr	r0, [pc, #80]	@ (8000968 <motors_stop+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	0019      	movs	r1, r3
 800091a:	f001 f8e2 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 800091e:	2380      	movs	r3, #128	@ 0x80
 8000920:	015b      	lsls	r3, r3, #5
 8000922:	4811      	ldr	r0, [pc, #68]	@ (8000968 <motors_stop+0x5c>)
 8000924:	2200      	movs	r2, #0
 8000926:	0019      	movs	r1, r3
 8000928:	f001 f8db 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET); // Coast/Stop
 800092c:	2380      	movs	r3, #128	@ 0x80
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	480d      	ldr	r0, [pc, #52]	@ (8000968 <motors_stop+0x5c>)
 8000932:	2200      	movs	r2, #0
 8000934:	0019      	movs	r1, r3
 8000936:	f001 f8d4 	bl	8001ae2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <motors_stop+0x5c>)
 800093c:	2200      	movs	r2, #0
 800093e:	2140      	movs	r1, #64	@ 0x40
 8000940:	0018      	movs	r0, r3
 8000942:	f001 f8ce 	bl	8001ae2 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, DUTY_STOP);
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <motors_stop+0x60>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2200      	movs	r2, #0
 800094c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, DUTY_STOP);
 800094e:	4b07      	ldr	r3, [pc, #28]	@ (800096c <motors_stop+0x60>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2200      	movs	r2, #0
 8000954:	639a      	str	r2, [r3, #56]	@ 0x38
    current_duty_M1 = DUTY_STOP;
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <motors_stop+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
    current_duty_M2 = DUTY_STOP;
 800095c:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <motors_stop+0x68>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	50000800 	.word	0x50000800
 800096c:	20000078 	.word	0x20000078
 8000970:	20000104 	.word	0x20000104
 8000974:	20000108 	.word	0x20000108

08000978 <search_line_robot>:

void search_line_robot(void) { // Your original searchLine logic
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
    uint32_t speed = DUTY_FORWARD_SLOW; // Or a specific search speed
 800097e:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <search_line_robot+0x44>)
 8000980:	607b      	str	r3, [r7, #4]
    if (last_turn_direction == 1) { // Last known direction was left, so search right
 8000982:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <search_line_robot+0x48>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d105      	bne.n	8000996 <search_line_robot+0x1e>
        motors_pivot_right(speed, 0); // Continuous turn, no delay
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2100      	movs	r1, #0
 800098e:	0018      	movs	r0, r3
 8000990:	f7ff ff78 	bl	8000884 <motors_pivot_right>
    } else if (last_turn_direction == -1) { // Last known direction was right, so search left
        motors_pivot_left(speed, 0);  // Continuous turn, no delay
    } else { // No known last direction, default to one (e.g., left)
        motors_pivot_left(speed, 0);
    }
}
 8000994:	e00e      	b.n	80009b4 <search_line_robot+0x3c>
    } else if (last_turn_direction == -1) { // Last known direction was right, so search left
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <search_line_robot+0x48>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	d105      	bne.n	80009aa <search_line_robot+0x32>
        motors_pivot_left(speed, 0);  // Continuous turn, no delay
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2100      	movs	r1, #0
 80009a2:	0018      	movs	r0, r3
 80009a4:	f7ff ff2a 	bl	80007fc <motors_pivot_left>
}
 80009a8:	e004      	b.n	80009b4 <search_line_robot+0x3c>
        motors_pivot_left(speed, 0);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2100      	movs	r1, #0
 80009ae:	0018      	movs	r0, r3
 80009b0:	f7ff ff24 	bl	80007fc <motors_pivot_left>
}
 80009b4:	46c0      	nop			@ (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b002      	add	sp, #8
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	0000047e 	.word	0x0000047e
 80009c0:	2000010c 	.word	0x2000010c

080009c4 <process_ir_command>:

void process_ir_command(uint32_t ir_code_value) {
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b089      	sub	sp, #36	@ 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
    char lcd_buf[17];
    sprintf(lcd_buf, "IR:0x%08X", (unsigned int)ir_code_value);
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	4957      	ldr	r1, [pc, #348]	@ (8000b2c <process_ir_command+0x168>)
 80009d0:	240c      	movs	r4, #12
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	0018      	movs	r0, r3
 80009d6:	f002 fb8d 	bl	80030f4 <siprintf>
    LCD_SetCursor(1, 0);
 80009da:	2100      	movs	r1, #0
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff fd02 	bl	80003e6 <LCD_SetCursor>
    LCD_SendString("                "); // Clear previous
 80009e2:	4b53      	ldr	r3, [pc, #332]	@ (8000b30 <process_ir_command+0x16c>)
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff fd24 	bl	8000432 <LCD_SendString>
    LCD_SetCursor(1, 0);
 80009ea:	2100      	movs	r1, #0
 80009ec:	2001      	movs	r0, #1
 80009ee:	f7ff fcfa 	bl	80003e6 <LCD_SetCursor>
    LCD_SendString(lcd_buf);
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff fd1c 	bl	8000432 <LCD_SendString>

    last_ir_code = ir_code_value; // Store for display or logic
 80009fa:	4b4e      	ldr	r3, [pc, #312]	@ (8000b34 <process_ir_command+0x170>)
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	601a      	str	r2, [r3, #0]

    if (current_robot_mode == MODE_MANUAL_IR || ir_code_value == IR_CODE_OK) {
 8000a00:	4b4d      	ldr	r3, [pc, #308]	@ (8000b38 <process_ir_command+0x174>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d004      	beq.n	8000a12 <process_ir_command+0x4e>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a4c      	ldr	r2, [pc, #304]	@ (8000b3c <process_ir_command+0x178>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d000      	beq.n	8000a12 <process_ir_command+0x4e>
 8000a10:	e087      	b.n	8000b22 <process_ir_command+0x15e>
        switch (ir_code_value) {
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4a      	ldr	r2, [pc, #296]	@ (8000b40 <process_ir_command+0x17c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d100      	bne.n	8000a1c <process_ir_command+0x58>
 8000a1a:	e078      	b.n	8000b0e <process_ir_command+0x14a>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a48      	ldr	r2, [pc, #288]	@ (8000b40 <process_ir_command+0x17c>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d900      	bls.n	8000a26 <process_ir_command+0x62>
 8000a24:	e07c      	b.n	8000b20 <process_ir_command+0x15c>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a46      	ldr	r2, [pc, #280]	@ (8000b44 <process_ir_command+0x180>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d100      	bne.n	8000a30 <process_ir_command+0x6c>
 8000a2e:	e060      	b.n	8000af2 <process_ir_command+0x12e>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a44      	ldr	r2, [pc, #272]	@ (8000b44 <process_ir_command+0x180>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d900      	bls.n	8000a3a <process_ir_command+0x76>
 8000a38:	e072      	b.n	8000b20 <process_ir_command+0x15c>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a42      	ldr	r2, [pc, #264]	@ (8000b48 <process_ir_command+0x184>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d05c      	beq.n	8000afc <process_ir_command+0x138>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a40      	ldr	r2, [pc, #256]	@ (8000b48 <process_ir_command+0x184>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d900      	bls.n	8000a4c <process_ir_command+0x88>
 8000a4a:	e069      	b.n	8000b20 <process_ir_command+0x15c>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a3f      	ldr	r2, [pc, #252]	@ (8000b4c <process_ir_command+0x188>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d02e      	beq.n	8000ab2 <process_ir_command+0xee>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a3d      	ldr	r2, [pc, #244]	@ (8000b4c <process_ir_command+0x188>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d861      	bhi.n	8000b20 <process_ir_command+0x15c>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a3c      	ldr	r2, [pc, #240]	@ (8000b50 <process_ir_command+0x18c>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d019      	beq.n	8000a98 <process_ir_command+0xd4>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a3a      	ldr	r2, [pc, #232]	@ (8000b50 <process_ir_command+0x18c>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d859      	bhi.n	8000b20 <process_ir_command+0x15c>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a33      	ldr	r2, [pc, #204]	@ (8000b3c <process_ir_command+0x178>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d025      	beq.n	8000ac0 <process_ir_command+0xfc>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a31      	ldr	r2, [pc, #196]	@ (8000b3c <process_ir_command+0x178>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d851      	bhi.n	8000b20 <process_ir_command+0x15c>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a35      	ldr	r2, [pc, #212]	@ (8000b54 <process_ir_command+0x190>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d00f      	beq.n	8000aa4 <process_ir_command+0xe0>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a34      	ldr	r2, [pc, #208]	@ (8000b58 <process_ir_command+0x194>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d149      	bne.n	8000b20 <process_ir_command+0x15c>
            case IR_CODE_UP: // Arrow Up
                motors_forward(DUTY_FORWARD_FAST);
 8000a8c:	23af      	movs	r3, #175	@ 0xaf
 8000a8e:	00db      	lsls	r3, r3, #3
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff fdcb 	bl	800062c <motors_forward>
                break;
 8000a96:	e044      	b.n	8000b22 <process_ir_command+0x15e>
            case IR_CODE_DOWN: // Arrow Down
                motors_backward(DUTY_FORWARD_FAST);
 8000a98:	23af      	movs	r3, #175	@ 0xaf
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f7ff fdff 	bl	80006a0 <motors_backward>
                break;
 8000aa2:	e03e      	b.n	8000b22 <process_ir_command+0x15e>
            case IR_CODE_LEFT: // Arrow Left
                motors_pivot_left(DUTY_TURN, 0); // Continuous turn
 8000aa4:	2396      	movs	r3, #150	@ 0x96
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff fea6 	bl	80007fc <motors_pivot_left>
                break;
 8000ab0:	e037      	b.n	8000b22 <process_ir_command+0x15e>
            case IR_CODE_RIGHT: // Arrow Right
                motors_pivot_right(DUTY_TURN, 0); // Continuous turn
 8000ab2:	2396      	movs	r3, #150	@ 0x96
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff fee3 	bl	8000884 <motors_pivot_right>
                break;
 8000abe:	e030      	b.n	8000b22 <process_ir_command+0x15e>
            case IR_CODE_OK: // OK button - Toggle mode or Stop
                if (current_robot_mode == MODE_MANUAL_IR) {
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <process_ir_command+0x174>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d10e      	bne.n	8000ae6 <process_ir_command+0x122>
                     if (current_duty_M1 != 0 || current_duty_M2 != 0) {
 8000ac8:	4b24      	ldr	r3, [pc, #144]	@ (8000b5c <process_ir_command+0x198>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d103      	bne.n	8000ad8 <process_ir_command+0x114>
 8000ad0:	4b23      	ldr	r3, [pc, #140]	@ (8000b60 <process_ir_command+0x19c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <process_ir_command+0x11a>
                        motors_stop(); // If in manual and moving, OK stops
 8000ad8:	f7ff ff18 	bl	800090c <motors_stop>
                    }
                } else { // Was in line follow
                    current_robot_mode = MODE_MANUAL_IR;
                    motors_stop(); // Stop before entering manual mode
                }
                break;
 8000adc:	e021      	b.n	8000b22 <process_ir_command+0x15e>
                        current_robot_mode = MODE_LINE_FOLLOW; // If stopped, switch to line follow
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <process_ir_command+0x174>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
                break;
 8000ae4:	e01d      	b.n	8000b22 <process_ir_command+0x15e>
                    current_robot_mode = MODE_MANUAL_IR;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <process_ir_command+0x174>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
                    motors_stop(); // Stop before entering manual mode
 8000aec:	f7ff ff0e 	bl	800090c <motors_stop>
                break;
 8000af0:	e017      	b.n	8000b22 <process_ir_command+0x15e>
            // Number buttons for specific actions
            case IR_CODE_1: // Example: Slow forward
                motors_forward(DUTY_FORWARD_SLOW);
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <process_ir_command+0x1a0>)
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff fd99 	bl	800062c <motors_forward>
                break;
 8000afa:	e012      	b.n	8000b22 <process_ir_command+0x15e>
            case IR_CODE_2: // Example: Pivot Left 90 deg (approx)
                motors_pivot_left(DUTY_TURN, 300); // 300ms delay, then stop
 8000afc:	2396      	movs	r3, #150	@ 0x96
 8000afe:	005a      	lsls	r2, r3, #1
 8000b00:	2396      	movs	r3, #150	@ 0x96
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	0011      	movs	r1, r2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff fe78 	bl	80007fc <motors_pivot_left>
                break;
 8000b0c:	e009      	b.n	8000b22 <process_ir_command+0x15e>
            case IR_CODE_3: // Example: Pivot Right 90 deg (approx)
                motors_pivot_right(DUTY_TURN, 300); // 300ms delay, then stop
 8000b0e:	2396      	movs	r3, #150	@ 0x96
 8000b10:	005a      	lsls	r2, r3, #1
 8000b12:	2396      	movs	r3, #150	@ 0x96
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	0011      	movs	r1, r2
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f7ff feb3 	bl	8000884 <motors_pivot_right>
                break;
 8000b1e:	e000      	b.n	8000b22 <process_ir_command+0x15e>
            default:
                // Optional: If in manual mode and an unassigned movement key is pressed, stop.
                // if (current_duty_M1 != 0 || current_duty_M2 != 0) {
                // motors_stop();
                // }
                break;
 8000b20:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b009      	add	sp, #36	@ 0x24
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	08003a44 	.word	0x08003a44
 8000b30:	08003a50 	.word	0x08003a50
 8000b34:	20000114 	.word	0x20000114
 8000b38:	20000110 	.word	0x20000110
 8000b3c:	00ff38c7 	.word	0x00ff38c7
 8000b40:	00ffe21d 	.word	0x00ffe21d
 8000b44:	00ffa25d 	.word	0x00ffa25d
 8000b48:	00ff629d 	.word	0x00ff629d
 8000b4c:	00ff5aa5 	.word	0x00ff5aa5
 8000b50:	00ff4ab5 	.word	0x00ff4ab5
 8000b54:	00ff10ef 	.word	0x00ff10ef
 8000b58:	00ff18e7 	.word	0x00ff18e7
 8000b5c:	20000104 	.word	0x20000104
 8000b60:	20000108 	.word	0x20000108
 8000b64:	0000047e 	.word	0x0000047e

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6e:	f000 fc79 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b72:	f000 f973 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b76:	f000 faa3 	bl	80010c0 <MX_GPIO_Init>
  MX_TIM2_Init();     // Initialize PWM Timer
 8000b7a:	f000 f9c9 	bl	8000f10 <MX_TIM2_Init>
  MX_TIM_IR_Init(); // Initialize IR Decoder Timer
 8000b7e:	f000 fa49 	bl	8001014 <MX_TIM_IR_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000b82:	f7ff fc6b 	bl	800045c <LCD_Init>
  LCD_Clear();
 8000b86:	f7ff fc23 	bl	80003d0 <LCD_Clear>
  LCD_SetCursor(0, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f7ff fc2a 	bl	80003e6 <LCD_SetCursor>
  LCD_SendString("Robot Ready!");
 8000b92:	4b9c      	ldr	r3, [pc, #624]	@ (8000e04 <main+0x29c>)
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff fc4c 	bl	8000432 <LCD_SendString>
  LCD_SetCursor(1, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f7ff fc22 	bl	80003e6 <LCD_SetCursor>
  LCD_SendString("Mode: LineFollow");
 8000ba2:	4b99      	ldr	r3, [pc, #612]	@ (8000e08 <main+0x2a0>)
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f7ff fc44 	bl	8000432 <LCD_SendString>


  // Start PWM channels
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000baa:	4b98      	ldr	r3, [pc, #608]	@ (8000e0c <main+0x2a4>)
 8000bac:	2100      	movs	r1, #0
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f001 fe06 	bl	80027c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000bb4:	4b95      	ldr	r3, [pc, #596]	@ (8000e0c <main+0x2a4>)
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f001 fe01 	bl	80027c0 <HAL_TIM_PWM_Start>
  motors_stop(); // Ensure motors are stopped initially
 8000bbe:	f7ff fea5 	bl	800090c <motors_stop>

  // Start IR Decoder Timer
  HAL_TIM_Base_Start(&htim_ir);
 8000bc2:	4b93      	ldr	r3, [pc, #588]	@ (8000e10 <main+0x2a8>)
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f001 fd6f 	bl	80026a8 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim_ir, 0);
 8000bca:	4b91      	ldr	r3, [pc, #580]	@ (8000e10 <main+0x2a8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	@ 0x24
  ir_last_edge_time = __HAL_TIM_GET_COUNTER(&htim_ir);
 8000bd2:	4b8f      	ldr	r3, [pc, #572]	@ (8000e10 <main+0x2a8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bd8:	4b8e      	ldr	r3, [pc, #568]	@ (8000e14 <main+0x2ac>)
 8000bda:	601a      	str	r2, [r3, #0]
  ir_pulse_index = 0;
 8000bdc:	4b8e      	ldr	r3, [pc, #568]	@ (8000e18 <main+0x2b0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
  ir_frame_ready = 0;
 8000be2:	4b8e      	ldr	r3, [pc, #568]	@ (8000e1c <main+0x2b4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
  ir_capture_started = 0;
 8000be8:	4b8d      	ldr	r3, [pc, #564]	@ (8000e20 <main+0x2b8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_EnableIRQ(IR_EXTI_IRQn); // Enable EXTI interrupt for IR pin
 8000bee:	2005      	movs	r0, #5
 8000bf0:	f000 fdaf 	bl	8001752 <HAL_NVIC_EnableIRQ>

  // Wait for B1 press (as in original code)
  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) // Assuming B1_Pin is active LOW
 8000bf4:	e008      	b.n	8000c08 <main+0xa0>
  {
    HAL_Delay(100); // Small delay while waiting
 8000bf6:	2064      	movs	r0, #100	@ 0x64
 8000bf8:	f000 fca4 	bl	8001544 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 8000bfc:	23a0      	movs	r3, #160	@ 0xa0
 8000bfe:	05db      	lsls	r3, r3, #23
 8000c00:	2120      	movs	r1, #32
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 ff8a 	bl	8001b1c <HAL_GPIO_TogglePin>
  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) // Assuming B1_Pin is active LOW
 8000c08:	2380      	movs	r3, #128	@ 0x80
 8000c0a:	019b      	lsls	r3, r3, #6
 8000c0c:	4a85      	ldr	r2, [pc, #532]	@ (8000e24 <main+0x2bc>)
 8000c0e:	0019      	movs	r1, r3
 8000c10:	0010      	movs	r0, r2
 8000c12:	f000 ff49 	bl	8001aa8 <HAL_GPIO_ReadPin>
 8000c16:	0003      	movs	r3, r0
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d0ec      	beq.n	8000bf6 <main+0x8e>
  }
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // LED off after B1
 8000c1c:	23a0      	movs	r3, #160	@ 0xa0
 8000c1e:	05db      	lsls	r3, r3, #23
 8000c20:	2200      	movs	r2, #0
 8000c22:	2120      	movs	r1, #32
 8000c24:	0018      	movs	r0, r3
 8000c26:	f000 ff5c 	bl	8001ae2 <HAL_GPIO_WritePin>
  LCD_Clear();
 8000c2a:	f7ff fbd1 	bl	80003d0 <LCD_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // --- IR Command Processing ---
    if (ir_frame_ready)
 8000c2e:	4b7b      	ldr	r3, [pc, #492]	@ (8000e1c <main+0x2b4>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d02d      	beq.n	8000c94 <main+0x12c>
    {
        uint32_t decoded_ir_code;
        // Temporarily disable IR EXTI to safely access shared buffer
        HAL_NVIC_DisableIRQ(IR_EXTI_IRQn);
 8000c38:	2005      	movs	r0, #5
 8000c3a:	f000 fd9a 	bl	8001772 <HAL_NVIC_DisableIRQ>
        // It's safer to copy the buffer if decoding is complex, but for NEC it's usually quick
        decoded_ir_code = decode_nec_ir(ir_pulse_widths, ir_pulse_index);
 8000c3e:	4b76      	ldr	r3, [pc, #472]	@ (8000e18 <main+0x2b0>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b78      	ldr	r3, [pc, #480]	@ (8000e28 <main+0x2c0>)
 8000c46:	0011      	movs	r1, r2
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff fc71 	bl	8000530 <decode_nec_ir>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	617b      	str	r3, [r7, #20]
        ir_frame_ready = 0;
 8000c52:	4b72      	ldr	r3, [pc, #456]	@ (8000e1c <main+0x2b4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
        ir_pulse_index = 0;
 8000c58:	4b6f      	ldr	r3, [pc, #444]	@ (8000e18 <main+0x2b0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
        // ir_capture_started will be set by the next long gap in ISR
        HAL_NVIC_EnableIRQ(IR_EXTI_IRQn);
 8000c5e:	2005      	movs	r0, #5
 8000c60:	f000 fd77 	bl	8001752 <HAL_NVIC_EnableIRQ>

        if (decoded_ir_code != 0xFFFFFFFF)
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	3301      	adds	r3, #1
 8000c68:	d004      	beq.n	8000c74 <main+0x10c>
        {
            process_ir_command(decoded_ir_code);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff fea9 	bl	80009c4 <process_ir_command>
 8000c72:	e00f      	b.n	8000c94 <main+0x12c>
        } else {
            LCD_SetCursor(1, 0);
 8000c74:	2100      	movs	r1, #0
 8000c76:	2001      	movs	r0, #1
 8000c78:	f7ff fbb5 	bl	80003e6 <LCD_SetCursor>
            LCD_SendString("                "); // Clear previous
 8000c7c:	4b6b      	ldr	r3, [pc, #428]	@ (8000e2c <main+0x2c4>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff fbd7 	bl	8000432 <LCD_SendString>
            LCD_SetCursor(1, 0);
 8000c84:	2100      	movs	r1, #0
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff fbad 	bl	80003e6 <LCD_SetCursor>
            LCD_SendString("IR Decode Err");
 8000c8c:	4b68      	ldr	r3, [pc, #416]	@ (8000e30 <main+0x2c8>)
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff fbcf 	bl	8000432 <LCD_SendString>
        }
    }

    // --- Robot Logic based on Mode ---
    LCD_SetCursor(0,0); // Update mode display
 8000c94:	2100      	movs	r1, #0
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff fba5 	bl	80003e6 <LCD_SetCursor>
    if(current_robot_mode == MODE_LINE_FOLLOW) {
 8000c9c:	4b65      	ldr	r3, [pc, #404]	@ (8000e34 <main+0x2cc>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d000      	beq.n	8000ca6 <main+0x13e>
 8000ca4:	e0a5      	b.n	8000df2 <main+0x28a>
        LCD_SendString("Mode:LineFollow "); // Note trailing space for clearing
 8000ca6:	4b64      	ldr	r3, [pc, #400]	@ (8000e38 <main+0x2d0>)
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff fbc2 	bl	8000432 <LCD_SendString>

        lewy_sensor   = HAL_GPIO_ReadPin(IR1_GPIO_Port, IR1_Pin);
 8000cae:	4b63      	ldr	r3, [pc, #396]	@ (8000e3c <main+0x2d4>)
 8000cb0:	2108      	movs	r1, #8
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f000 fef8 	bl	8001aa8 <HAL_GPIO_ReadPin>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	001a      	movs	r2, r3
 8000cbc:	4b60      	ldr	r3, [pc, #384]	@ (8000e40 <main+0x2d8>)
 8000cbe:	601a      	str	r2, [r3, #0]
        srodek_sensor = HAL_GPIO_ReadPin(IR2_GPIO_Port, IR2_Pin);
 8000cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8000e3c <main+0x2d4>)
 8000cc2:	2120      	movs	r1, #32
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 feef 	bl	8001aa8 <HAL_GPIO_ReadPin>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	001a      	movs	r2, r3
 8000cce:	4b5d      	ldr	r3, [pc, #372]	@ (8000e44 <main+0x2dc>)
 8000cd0:	601a      	str	r2, [r3, #0]
        prawy_sensor  = HAL_GPIO_ReadPin(IR3_GPIO_Port, IR3_Pin);
 8000cd2:	4b5a      	ldr	r3, [pc, #360]	@ (8000e3c <main+0x2d4>)
 8000cd4:	2110      	movs	r1, #16
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 fee6 	bl	8001aa8 <HAL_GPIO_ReadPin>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	001a      	movs	r2, r3
 8000ce0:	4b59      	ldr	r3, [pc, #356]	@ (8000e48 <main+0x2e0>)
 8000ce2:	601a      	str	r2, [r3, #0]

        // Assuming sensors are HIGH when on line, LOW when off line
        // (Adjust if your sensor logic is inverted)
        if (!lewy_sensor && srodek_sensor && !prawy_sensor) { // Center on line
 8000ce4:	4b56      	ldr	r3, [pc, #344]	@ (8000e40 <main+0x2d8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d110      	bne.n	8000d0e <main+0x1a6>
 8000cec:	4b55      	ldr	r3, [pc, #340]	@ (8000e44 <main+0x2dc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d00c      	beq.n	8000d0e <main+0x1a6>
 8000cf4:	4b54      	ldr	r3, [pc, #336]	@ (8000e48 <main+0x2e0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d108      	bne.n	8000d0e <main+0x1a6>
            motors_forward(DUTY_FORWARD_FAST);
 8000cfc:	23af      	movs	r3, #175	@ 0xaf
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff fc93 	bl	800062c <motors_forward>
            last_turn_direction = 0;
 8000d06:	4b51      	ldr	r3, [pc, #324]	@ (8000e4c <main+0x2e4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	e075      	b.n	8000dfa <main+0x292>
        } else if (!lewy_sensor && srodek_sensor && prawy_sensor) { // Veering right, turn left
 8000d0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000e40 <main+0x2d8>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d111      	bne.n	8000d3a <main+0x1d2>
 8000d16:	4b4b      	ldr	r3, [pc, #300]	@ (8000e44 <main+0x2dc>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00d      	beq.n	8000d3a <main+0x1d2>
 8000d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e48 <main+0x2e0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d009      	beq.n	8000d3a <main+0x1d2>
            motors_turn_left(DUTY_FORWARD_SLOW, DUTY_FORWARD_SLOW / 2); // Example gentle turn
 8000d26:	4a4a      	ldr	r2, [pc, #296]	@ (8000e50 <main+0x2e8>)
 8000d28:	4b4a      	ldr	r3, [pc, #296]	@ (8000e54 <main+0x2ec>)
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff fcf1 	bl	8000714 <motors_turn_left>
            last_turn_direction = 1;
 8000d32:	4b46      	ldr	r3, [pc, #280]	@ (8000e4c <main+0x2e4>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	e05f      	b.n	8000dfa <main+0x292>
        } else if (lewy_sensor && srodek_sensor && !prawy_sensor) { // Veering left, turn right
 8000d3a:	4b41      	ldr	r3, [pc, #260]	@ (8000e40 <main+0x2d8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d012      	beq.n	8000d68 <main+0x200>
 8000d42:	4b40      	ldr	r3, [pc, #256]	@ (8000e44 <main+0x2dc>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00e      	beq.n	8000d68 <main+0x200>
 8000d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e48 <main+0x2e0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10a      	bne.n	8000d68 <main+0x200>
            motors_turn_right(DUTY_FORWARD_SLOW / 2, DUTY_FORWARD_SLOW); // Example gentle turn
 8000d52:	4a40      	ldr	r2, [pc, #256]	@ (8000e54 <main+0x2ec>)
 8000d54:	4b3e      	ldr	r3, [pc, #248]	@ (8000e50 <main+0x2e8>)
 8000d56:	0011      	movs	r1, r2
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff fd15 	bl	8000788 <motors_turn_right>
            last_turn_direction = -1;
 8000d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e4c <main+0x2e4>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	4252      	negs	r2, r2
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e048      	b.n	8000dfa <main+0x292>
        } else if (!lewy_sensor && !srodek_sensor && prawy_sensor) { // Sharp right needed
 8000d68:	4b35      	ldr	r3, [pc, #212]	@ (8000e40 <main+0x2d8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10d      	bne.n	8000d8c <main+0x224>
 8000d70:	4b34      	ldr	r3, [pc, #208]	@ (8000e44 <main+0x2dc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d109      	bne.n	8000d8c <main+0x224>
 8000d78:	4b33      	ldr	r3, [pc, #204]	@ (8000e48 <main+0x2e0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d005      	beq.n	8000d8c <main+0x224>
            skretWPrawo(DUTY_TURN); // Uses your existing sharp turn
 8000d80:	2396      	movs	r3, #150	@ 0x96
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff fbbf 	bl	8000508 <skretWPrawo>
 8000d8a:	e036      	b.n	8000dfa <main+0x292>
        } else if (lewy_sensor && !srodek_sensor && !prawy_sensor) { // Sharp left needed
 8000d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e40 <main+0x2d8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00d      	beq.n	8000db0 <main+0x248>
 8000d94:	4b2b      	ldr	r3, [pc, #172]	@ (8000e44 <main+0x2dc>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d109      	bne.n	8000db0 <main+0x248>
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e48 <main+0x2e0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d105      	bne.n	8000db0 <main+0x248>
            skretWLewo(DUTY_TURN); // Uses your existing sharp turn
 8000da4:	2396      	movs	r3, #150	@ 0x96
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff fb9b 	bl	80004e4 <skretWLewo>
 8000dae:	e024      	b.n	8000dfa <main+0x292>
        }
        // All sensors off line (lewy_sensor && !srodek_sensor && prawy_sensor) or other complex cases
        else if (lewy_sensor && prawy_sensor && srodek_sensor) { // All sensors off line (assuming low active)
 8000db0:	4b23      	ldr	r3, [pc, #140]	@ (8000e40 <main+0x2d8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00a      	beq.n	8000dce <main+0x266>
 8000db8:	4b23      	ldr	r3, [pc, #140]	@ (8000e48 <main+0x2e0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d006      	beq.n	8000dce <main+0x266>
 8000dc0:	4b20      	ldr	r3, [pc, #128]	@ (8000e44 <main+0x2dc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d002      	beq.n	8000dce <main+0x266>
             search_line_robot();
 8000dc8:	f7ff fdd6 	bl	8000978 <search_line_robot>
 8000dcc:	e015      	b.n	8000dfa <main+0x292>
        }
        else if (lewy_sensor && prawy_sensor && !srodek_sensor) { // Lost line completely or at T-junction/cross
 8000dce:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <main+0x2d8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d00a      	beq.n	8000dec <main+0x284>
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <main+0x2e0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d006      	beq.n	8000dec <main+0x284>
 8000dde:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <main+0x2dc>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d102      	bne.n	8000dec <main+0x284>
            search_line_robot(); // Or a specific stop/search routine
 8000de6:	f7ff fdc7 	bl	8000978 <search_line_robot>
 8000dea:	e006      	b.n	8000dfa <main+0x292>
        }
         else { // Default if completely lost or all on white (assuming sensors LOW on white)
             search_line_robot(); // Or stop: motors_stop();
 8000dec:	f7ff fdc4 	bl	8000978 <search_line_robot>
 8000df0:	e003      	b.n	8000dfa <main+0x292>
         }

    } else { // MODE_MANUAL_IR
        LCD_SendString("Mode:Manual IR  ");
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <main+0x2f0>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff fb1c 	bl	8000432 <LCD_SendString>
        // Motor control is handled by process_ir_command().
        // If no new IR command, motors will continue their last action or be stopped.
    }

    HAL_Delay(50); // Main loop delay - adjust for responsiveness
 8000dfa:	2032      	movs	r0, #50	@ 0x32
 8000dfc:	f000 fba2 	bl	8001544 <HAL_Delay>
    if (ir_frame_ready)
 8000e00:	e715      	b.n	8000c2e <main+0xc6>
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	08003a64 	.word	0x08003a64
 8000e08:	08003a74 	.word	0x08003a74
 8000e0c:	20000078 	.word	0x20000078
 8000e10:	200000b8 	.word	0x200000b8
 8000e14:	20000118 	.word	0x20000118
 8000e18:	200002ac 	.word	0x200002ac
 8000e1c:	200002ad 	.word	0x200002ad
 8000e20:	200002ae 	.word	0x200002ae
 8000e24:	50000800 	.word	0x50000800
 8000e28:	2000011c 	.word	0x2000011c
 8000e2c:	08003a50 	.word	0x08003a50
 8000e30:	08003a88 	.word	0x08003a88
 8000e34:	20000110 	.word	0x20000110
 8000e38:	08003a98 	.word	0x08003a98
 8000e3c:	50000400 	.word	0x50000400
 8000e40:	200000f8 	.word	0x200000f8
 8000e44:	20000100 	.word	0x20000100
 8000e48:	200000fc 	.word	0x200000fc
 8000e4c:	2000010c 	.word	0x2000010c
 8000e50:	0000023f 	.word	0x0000023f
 8000e54:	0000047e 	.word	0x0000047e
 8000e58:	08003aac 	.word	0x08003aac

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b099      	sub	sp, #100	@ 0x64
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	242c      	movs	r4, #44	@ 0x2c
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	0018      	movs	r0, r3
 8000e68:	2334      	movs	r3, #52	@ 0x34
 8000e6a:	001a      	movs	r2, r3
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	f002 f963 	bl	8003138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e72:	2318      	movs	r3, #24
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	0018      	movs	r0, r3
 8000e78:	2314      	movs	r3, #20
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	f002 f95b 	bl	8003138 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0}; // For LPUART1/I2C if used
 8000e82:	003b      	movs	r3, r7
 8000e84:	0018      	movs	r0, r3
 8000e86:	2318      	movs	r3, #24
 8000e88:	001a      	movs	r2, r3
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	f002 f954 	bl	8003138 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // Default for L0
 8000e90:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <SystemClock_Config+0xac>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1d      	ldr	r2, [pc, #116]	@ (8000f0c <SystemClock_Config+0xb0>)
 8000e96:	401a      	ands	r2, r3
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <SystemClock_Config+0xac>)
 8000e9a:	2180      	movs	r1, #128	@ 0x80
 8000e9c:	0109      	lsls	r1, r1, #4
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea2:	0021      	movs	r1, r4
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2201      	movs	r2, #1
 8000eae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2210      	movs	r2, #16
 8000eb4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE; // Using HSI directly (16MHz usually)
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24
  // If you need higher speed, configure PLL here. E.g.
  // RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  // RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  // RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4; // HSI(16)*4 = 64MHz -> too high for L0 (max 32MHz)
  // RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2; // HSI(16)*4/2 = 32MHz SYSCLK
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f000 fe48 	bl	8001b54 <HAL_RCC_OscConfig>
 8000ec4:	1e03      	subs	r3, r0, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000ec8:	f000 f9bc 	bl	8001244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ecc:	2118      	movs	r1, #24
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI; // Or RCC_SYSCLKSOURCE_PLLCLK if PLL is ON
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) // Latency 0 for HSI <= 16MHz
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2100      	movs	r1, #0
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f001 f9ab 	bl	800224c <HAL_RCC_ClockConfig>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0xa2>
                                                                        // Latency 1 for SYSCLK > 16MHz up to 32MHz
  {
    Error_Handler();
 8000efa:	f000 f9a3 	bl	8001244 <Error_Handler>
  // PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  // if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  // {
  //   Error_Handler();
  // }
}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b019      	add	sp, #100	@ 0x64
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	40007000 	.word	0x40007000
 8000f0c:	ffffe7ff 	.word	0xffffe7ff

08000f10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function (PWM for Motors)
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void) // This is your existing PWM timer config
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f16:	2318      	movs	r3, #24
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	001a      	movs	r2, r3
 8000f20:	2100      	movs	r1, #0
 8000f22:	f002 f909 	bl	8003138 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f26:	2310      	movs	r3, #16
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	001a      	movs	r2, r3
 8000f30:	2100      	movs	r1, #0
 8000f32:	f002 f901 	bl	8003138 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f36:	003b      	movs	r3, r7
 8000f38:	0018      	movs	r0, r3
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f002 f8fa 	bl	8003138 <memset>
  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f44:	4b31      	ldr	r3, [pc, #196]	@ (800100c <MX_TIM2_Init+0xfc>)
 8000f46:	2280      	movs	r2, #128	@ 0x80
 8000f48:	05d2      	lsls	r2, r2, #23
 8000f4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0; // Results in 16MHz/ (1599+1) = 10kHz PWM freq if HSI=16MHz
 8000f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800100c <MX_TIM2_Init+0xfc>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b2e      	ldr	r3, [pc, #184]	@ (800100c <MX_TIM2_Init+0xfc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1599; // PWM period (ARR)
 8000f58:	4b2c      	ldr	r3, [pc, #176]	@ (800100c <MX_TIM2_Init+0xfc>)
 8000f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001010 <MX_TIM2_Init+0x100>)
 8000f5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800100c <MX_TIM2_Init+0xfc>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b29      	ldr	r3, [pc, #164]	@ (800100c <MX_TIM2_Init+0xfc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) // Changed from Base_Init to PWM_Init
 8000f6a:	4b28      	ldr	r3, [pc, #160]	@ (800100c <MX_TIM2_Init+0xfc>)
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f001 fbdf 	bl	8002730 <HAL_TIM_PWM_Init>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f76:	f000 f965 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7a:	2118      	movs	r1, #24
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	2280      	movs	r2, #128	@ 0x80
 8000f80:	0152      	lsls	r2, r2, #5
 8000f82:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f84:	187a      	adds	r2, r7, r1
 8000f86:	4b21      	ldr	r3, [pc, #132]	@ (800100c <MX_TIM2_Init+0xfc>)
 8000f88:	0011      	movs	r1, r2
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f001 fd6a 	bl	8002a64 <HAL_TIM_ConfigClockSource>
 8000f90:	1e03      	subs	r3, r0, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000f94:	f000 f956 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f98:	2110      	movs	r1, #16
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa6:	187a      	adds	r2, r7, r1
 8000fa8:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_TIM2_Init+0xfc>)
 8000faa:	0011      	movs	r1, r2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f002 f849 	bl	8003044 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	1e03      	subs	r3, r0, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000fb6:	f000 f945 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fba:	003b      	movs	r3, r7
 8000fbc:	2260      	movs	r2, #96	@ 0x60
 8000fbe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0; // Initial duty cycle
 8000fc0:	003b      	movs	r3, r7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fcc:	003b      	movs	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd2:	0039      	movs	r1, r7
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <MX_TIM2_Init+0xfc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f001 fc7d 	bl	80028d8 <HAL_TIM_PWM_ConfigChannel>
 8000fde:	1e03      	subs	r3, r0, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000fe2:	f000 f92f 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fe6:	0039      	movs	r1, r7
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <MX_TIM2_Init+0xfc>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	0018      	movs	r0, r3
 8000fee:	f001 fc73 	bl	80028d8 <HAL_TIM_PWM_ConfigChannel>
 8000ff2:	1e03      	subs	r3, r0, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8000ff6:	f000 f925 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ffa:	4b04      	ldr	r3, [pc, #16]	@ (800100c <MX_TIM2_Init+0xfc>)
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f000 f95d 	bl	80012bc <HAL_TIM_MspPostInit>
}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b00a      	add	sp, #40	@ 0x28
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	20000078 	.word	0x20000078
 8001010:	0000063f 	.word	0x0000063f

08001014 <MX_TIM_IR_Init>:
  * @brief TIM_IR Initialization Function (e.g., TIM21 for IR NEC pulse measurement)
  * @param None
  * @retval None
  */
static void MX_TIM_IR_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM_IR_Init 0 */
  // IMPORTANT: Enable TIM21 clock in RCC if not already done by CubeMX
  // __HAL_RCC_TIM21_CLK_ENABLE(); // Example for TIM21
  /* USER CODE END TIM_IR_Init 0 */
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	003b      	movs	r3, r7
 800101c:	0018      	movs	r0, r3
 800101e:	2310      	movs	r3, #16
 8001020:	001a      	movs	r2, r3
 8001022:	2100      	movs	r1, #0
 8001024:	f002 f888 	bl	8003138 <memset>

  /* USER CODE BEGIN TIM_IR_Init 1 */
  /* USER CODE END TIM_IR_Init 1 */
  htim_ir.Instance = TIM21; // Or another suitable timer like TIM6, TIM22
 8001028:	4b20      	ldr	r3, [pc, #128]	@ (80010ac <MX_TIM_IR_Init+0x98>)
 800102a:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <MX_TIM_IR_Init+0x9c>)
 800102c:	601a      	str	r2, [r3, #0]
  // Assuming HSI = 16MHz and APB1 prescaler = 1, so TIM_CLK = 16MHz.
  // To get 1µs tick: Prescaler = (16MHz / 1MHz) - 1 = 15
  uint32_t apb1_freq = HAL_RCC_GetPCLK1Freq();
 800102e:	f001 fae5 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 8001032:	0003      	movs	r3, r0
 8001034:	613b      	str	r3, [r7, #16]
  uint32_t tim_ir_clk_freq = apb1_freq;
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	617b      	str	r3, [r7, #20]
  // For L0, if APB1 prescaler > 1, timer clock can be 2*PCLK1.
  // Let's assume PCLK1 = HCLK for simplicity with HCLK_DIV1.
  // This logic might need adjustment based on specific L0 clock tree if APB1PSC > 1
    if ((RCC->CFGR & RCC_CFGR_PPRE1) != RCC_CFGR_PPRE1_DIV1) { // If APB1 prescaler is not 1
 800103a:	4b1e      	ldr	r3, [pc, #120]	@ (80010b4 <MX_TIM_IR_Init+0xa0>)
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	23e0      	movs	r3, #224	@ 0xe0
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4013      	ands	r3, r2
 8001044:	d002      	beq.n	800104c <MX_TIM_IR_Init+0x38>
        tim_ir_clk_freq *= 2; // Timer clock is typically 2x PCLK1 in this case
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	617b      	str	r3, [r7, #20]
    }

  htim_ir.Init.Prescaler = (tim_ir_clk_freq / 1000000) - 1;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	491a      	ldr	r1, [pc, #104]	@ (80010b8 <MX_TIM_IR_Init+0xa4>)
 8001050:	0018      	movs	r0, r3
 8001052:	f7ff f863 	bl	800011c <__udivsi3>
 8001056:	0003      	movs	r3, r0
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_TIM_IR_Init+0x98>)
 800105c:	605a      	str	r2, [r3, #4]
  htim_ir.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <MX_TIM_IR_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim_ir.Init.Period = 0xFFFF; // Max for 16-bit timer (65ms). For longer, use 32-bit timer or handle overflow.
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_TIM_IR_Init+0x98>)
 8001066:	4a15      	ldr	r2, [pc, #84]	@ (80010bc <MX_TIM_IR_Init+0xa8>)
 8001068:	60da      	str	r2, [r3, #12]
                               // NEC pulses are short, so 16-bit timer is usually fine for individual pulse widths.
  htim_ir.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <MX_TIM_IR_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim_ir.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE; // Not relevant for free-running counter
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_TIM_IR_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim_ir) != HAL_OK)
 8001076:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <MX_TIM_IR_Init+0x98>)
 8001078:	0018      	movs	r0, r3
 800107a:	f001 fad5 	bl	8002628 <HAL_TIM_Base_Init>
 800107e:	1e03      	subs	r3, r0, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM_IR_Init+0x72>
  {
    Error_Handler();
 8001082:	f000 f8df 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001086:	003b      	movs	r3, r7
 8001088:	2280      	movs	r2, #128	@ 0x80
 800108a:	0152      	lsls	r2, r2, #5
 800108c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim_ir, &sClockSourceConfig) != HAL_OK)
 800108e:	003a      	movs	r2, r7
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_TIM_IR_Init+0x98>)
 8001092:	0011      	movs	r1, r2
 8001094:	0018      	movs	r0, r3
 8001096:	f001 fce5 	bl	8002a64 <HAL_TIM_ConfigClockSource>
 800109a:	1e03      	subs	r3, r0, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM_IR_Init+0x8e>
  {
    Error_Handler();
 800109e:	f000 f8d1 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM_IR_Init 2 */
  /* USER CODE END TIM_IR_Init 2 */
}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b006      	add	sp, #24
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	200000b8 	.word	0x200000b8
 80010b0:	40010800 	.word	0x40010800
 80010b4:	40021000 	.word	0x40021000
 80010b8:	000f4240 	.word	0x000f4240
 80010bc:	0000ffff 	.word	0x0000ffff

080010c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b089      	sub	sp, #36	@ 0x24
 80010c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c6:	240c      	movs	r4, #12
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	0018      	movs	r0, r3
 80010cc:	2314      	movs	r3, #20
 80010ce:	001a      	movs	r2, r3
 80010d0:	2100      	movs	r1, #0
 80010d2:	f002 f831 	bl	8003138 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	4b56      	ldr	r3, [pc, #344]	@ (8001230 <MX_GPIO_Init+0x170>)
 80010d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010da:	4b55      	ldr	r3, [pc, #340]	@ (8001230 <MX_GPIO_Init+0x170>)
 80010dc:	2104      	movs	r1, #4
 80010de:	430a      	orrs	r2, r1
 80010e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010e2:	4b53      	ldr	r3, [pc, #332]	@ (8001230 <MX_GPIO_Init+0x170>)
 80010e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e6:	2204      	movs	r2, #4
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b50      	ldr	r3, [pc, #320]	@ (8001230 <MX_GPIO_Init+0x170>)
 80010f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001230 <MX_GPIO_Init+0x170>)
 80010f4:	2101      	movs	r1, #1
 80010f6:	430a      	orrs	r2, r1
 80010f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001230 <MX_GPIO_Init+0x170>)
 80010fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010fe:	2201      	movs	r2, #1
 8001100:	4013      	ands	r3, r2
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	4b4a      	ldr	r3, [pc, #296]	@ (8001230 <MX_GPIO_Init+0x170>)
 8001108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800110a:	4b49      	ldr	r3, [pc, #292]	@ (8001230 <MX_GPIO_Init+0x170>)
 800110c:	2102      	movs	r1, #2
 800110e:	430a      	orrs	r2, r1
 8001110:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001112:	4b47      	ldr	r3, [pc, #284]	@ (8001230 <MX_GPIO_Init+0x170>)
 8001114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001116:	2202      	movs	r2, #2
 8001118:	4013      	ands	r3, r2
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800111e:	4945      	ldr	r1, [pc, #276]	@ (8001234 <MX_GPIO_Init+0x174>)
 8001120:	4b45      	ldr	r3, [pc, #276]	@ (8001238 <MX_GPIO_Init+0x178>)
 8001122:	2200      	movs	r2, #0
 8001124:	0018      	movs	r0, r3
 8001126:	f000 fcdc 	bl	8001ae2 <HAL_GPIO_WritePin>
                          |IN4_Pin|IN3_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, LED_Pin|D4_Pin|D5_Pin|D6_Pin
 800112a:	4944      	ldr	r1, [pc, #272]	@ (800123c <MX_GPIO_Init+0x17c>)
 800112c:	23a0      	movs	r3, #160	@ 0xa0
 800112e:	05db      	lsls	r3, r3, #23
 8001130:	2200      	movs	r2, #0
 8001132:	0018      	movs	r0, r3
 8001134:	f000 fcd5 	bl	8001ae2 <HAL_GPIO_WritePin>
                          |D7_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, E_Pin|RS_Pin, GPIO_PIN_RESET);
 8001138:	23c0      	movs	r3, #192	@ 0xc0
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4840      	ldr	r0, [pc, #256]	@ (8001240 <MX_GPIO_Init+0x180>)
 800113e:	2200      	movs	r2, #0
 8001140:	0019      	movs	r1, r3
 8001142:	f000 fcce 	bl	8001ae2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin (User Button on PC13 for many Nucleo L0 boards) */
  GPIO_InitStruct.Pin = B1_Pin;
 8001146:	193b      	adds	r3, r7, r4
 8001148:	2280      	movs	r2, #128	@ 0x80
 800114a:	0192      	lsls	r2, r2, #6
 800114c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Or GPIO_MODE_IT_FALLING if used with interrupt
 800114e:	193b      	adds	r3, r7, r4
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;    // Or GPIO_PULLUP if button connects to GND
 8001154:	193b      	adds	r3, r7, r4
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800115a:	193b      	adds	r3, r7, r4
 800115c:	4a36      	ldr	r2, [pc, #216]	@ (8001238 <MX_GPIO_Init+0x178>)
 800115e:	0019      	movs	r1, r3
 8001160:	0010      	movs	r0, r2
 8001162:	f000 fb23 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin (LCD)
                           IN4_Pin IN3_Pin IN1_Pin IN2_Pin (Motors) */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001166:	193b      	adds	r3, r7, r4
 8001168:	4a32      	ldr	r2, [pc, #200]	@ (8001234 <MX_GPIO_Init+0x174>)
 800116a:	601a      	str	r2, [r3, #0]
                          |IN4_Pin|IN3_Pin|IN1_Pin|IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	193b      	adds	r3, r7, r4
 800116e:	2201      	movs	r2, #1
 8001170:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	193b      	adds	r3, r7, r4
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	193b      	adds	r3, r7, r4
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	193b      	adds	r3, r7, r4
 8001180:	4a2d      	ldr	r2, [pc, #180]	@ (8001238 <MX_GPIO_Init+0x178>)
 8001182:	0019      	movs	r1, r3
 8001184:	0010      	movs	r0, r2
 8001186:	f000 fb11 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin (User LED, e.g. PA5)
                           D4_Pin D5_Pin D6_Pin D7_Pin (LCD) */
  GPIO_InitStruct.Pin = LED_Pin|D4_Pin|D5_Pin|D6_Pin
 800118a:	193b      	adds	r3, r7, r4
 800118c:	4a2b      	ldr	r2, [pc, #172]	@ (800123c <MX_GPIO_Init+0x17c>)
 800118e:	601a      	str	r2, [r3, #0]
                          |D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	193b      	adds	r3, r7, r4
 8001192:	2201      	movs	r2, #1
 8001194:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	193b      	adds	r3, r7, r4
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	193b      	adds	r3, r7, r4
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	193a      	adds	r2, r7, r4
 80011a4:	23a0      	movs	r3, #160	@ 0xa0
 80011a6:	05db      	lsls	r3, r3, #23
 80011a8:	0011      	movs	r1, r2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 fafe 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Pin RS_Pin (LCD control) */
  GPIO_InitStruct.Pin = E_Pin|RS_Pin;
 80011b0:	0021      	movs	r1, r4
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	22c0      	movs	r2, #192	@ 0xc0
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	000c      	movs	r4, r1
 80011bc:	193b      	adds	r3, r7, r4
 80011be:	2201      	movs	r2, #1
 80011c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	193b      	adds	r3, r7, r4
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	193b      	adds	r3, r7, r4
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	193b      	adds	r3, r7, r4
 80011d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001240 <MX_GPIO_Init+0x180>)
 80011d2:	0019      	movs	r1, r3
 80011d4:	0010      	movs	r0, r2
 80011d6:	f000 fae9 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : IR1_Pin IR3_Pin IR2_Pin (Line Follower Sensors) */
  GPIO_InitStruct.Pin = IR1_Pin|IR3_Pin|IR2_Pin;
 80011da:	193b      	adds	r3, r7, r4
 80011dc:	2238      	movs	r2, #56	@ 0x38
 80011de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e0:	193b      	adds	r3, r7, r4
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // Or GPIO_PULLUP/PULLDOWN depending on sensor output
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IR1_GPIO_Port, &GPIO_InitStruct); // Assuming all on same port, otherwise split
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	4a14      	ldr	r2, [pc, #80]	@ (8001240 <MX_GPIO_Init+0x180>)
 80011f0:	0019      	movs	r1, r3
 80011f2:	0010      	movs	r0, r2
 80011f4:	f000 fada 	bl	80017ac <HAL_GPIO_Init>
  // HAL_GPIO_Init(IR2_GPIO_Port, &GPIO_InitStruct_for_IR2);
  // HAL_GPIO_Init(IR3_GPIO_Port, &GPIO_InitStruct_for_IR3);


  /*Configure GPIO pin : IR_RX_Pin (IR Remote Receiver) */
  GPIO_InitStruct.Pin = IR_RX_Pin; // Defined at the top
 80011f8:	0021      	movs	r1, r4
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING; // Interrupt on both edges
 8001200:	187b      	adds	r3, r7, r1
 8001202:	22c4      	movs	r2, #196	@ 0xc4
 8001204:	0392      	lsls	r2, r2, #14
 8001206:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP; // KY-022/TSOP usually need PULLUP
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2201      	movs	r2, #1
 800120c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IR_RX_GPIO_Port, &GPIO_InitStruct); // Defined at the top
 800120e:	187a      	adds	r2, r7, r1
 8001210:	23a0      	movs	r3, #160	@ 0xa0
 8001212:	05db      	lsls	r3, r3, #23
 8001214:	0011      	movs	r1, r2
 8001216:	0018      	movs	r0, r3
 8001218:	f000 fac8 	bl	80017ac <HAL_GPIO_Init>
  // Line 1 -> EXTI0_1_IRQn
  // Line 2 -> EXTI2_3_IRQn
  // Line 3 -> EXTI2_3_IRQn
  // Line 4 -> EXTI4_15_IRQn
  // Lines 5-15 -> EXTI4_15_IRQn
  HAL_NVIC_SetPriority(IR_EXTI_IRQn, 0, 0); // Set appropriate priority
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	2005      	movs	r0, #5
 8001222:	f000 fa81 	bl	8001728 <HAL_NVIC_SetPriority>
  // HAL_NVIC_EnableIRQ(IR_EXTI_IRQn); // Moved to main after timer start for IR

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b009      	add	sp, #36	@ 0x24
 800122c:	bd90      	pop	{r4, r7, pc}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	40021000 	.word	0x40021000
 8001234:	0000154f 	.word	0x0000154f
 8001238:	50000800 	.word	0x50000800
 800123c:	00003c20 	.word	0x00003c20
 8001240:	50000400 	.word	0x50000400

08001244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001248:	b672      	cpsid	i
}
 800124a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  LCD_Clear();
 800124c:	f7ff f8c0 	bl	80003d0 <LCD_Clear>
  LCD_SetCursor(0,0);
 8001250:	2100      	movs	r1, #0
 8001252:	2000      	movs	r0, #0
 8001254:	f7ff f8c7 	bl	80003e6 <LCD_SetCursor>
  LCD_SendString("Error_Handler!");
 8001258:	4b02      	ldr	r3, [pc, #8]	@ (8001264 <Error_Handler+0x20>)
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff f8e9 	bl	8000432 <LCD_SendString>
  while (1)
 8001260:	46c0      	nop			@ (mov r8, r8)
 8001262:	e7fd      	b.n	8001260 <Error_Handler+0x1c>
 8001264:	08003ac0 	.word	0x08003ac0

08001268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126c:	4b07      	ldr	r3, [pc, #28]	@ (800128c <HAL_MspInit+0x24>)
 800126e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_MspInit+0x24>)
 8001272:	2101      	movs	r1, #1
 8001274:	430a      	orrs	r2, r1
 8001276:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001278:	4b04      	ldr	r3, [pc, #16]	@ (800128c <HAL_MspInit+0x24>)
 800127a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <HAL_MspInit+0x24>)
 800127e:	2180      	movs	r1, #128	@ 0x80
 8001280:	0549      	lsls	r1, r1, #21
 8001282:	430a      	orrs	r2, r1
 8001284:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2380      	movs	r3, #128	@ 0x80
 800129e:	05db      	lsls	r3, r3, #23
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d105      	bne.n	80012b0 <HAL_TIM_Base_MspInit+0x20>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012a4:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <HAL_TIM_Base_MspInit+0x28>)
 80012a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <HAL_TIM_Base_MspInit+0x28>)
 80012aa:	2101      	movs	r1, #1
 80012ac:	430a      	orrs	r2, r1
 80012ae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012b0:	46c0      	nop			@ (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b002      	add	sp, #8
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b089      	sub	sp, #36	@ 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	240c      	movs	r4, #12
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	0018      	movs	r0, r3
 80012ca:	2314      	movs	r3, #20
 80012cc:	001a      	movs	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	f001 ff32 	bl	8003138 <memset>
  if(htim->Instance==TIM2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	2380      	movs	r3, #128	@ 0x80
 80012da:	05db      	lsls	r3, r3, #23
 80012dc:	429a      	cmp	r2, r3
 80012de:	d122      	bne.n	8001326 <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <HAL_TIM_MspPostInit+0x74>)
 80012e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <HAL_TIM_MspPostInit+0x74>)
 80012e6:	2101      	movs	r1, #1
 80012e8:	430a      	orrs	r2, r1
 80012ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <HAL_TIM_MspPostInit+0x74>)
 80012ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f0:	2201      	movs	r2, #1
 80012f2:	4013      	ands	r3, r2
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012f8:	0021      	movs	r1, r4
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	2203      	movs	r2, #3
 80012fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	187b      	adds	r3, r7, r1
 8001302:	2202      	movs	r2, #2
 8001304:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	187b      	adds	r3, r7, r1
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	187b      	adds	r3, r7, r1
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001312:	187b      	adds	r3, r7, r1
 8001314:	2202      	movs	r2, #2
 8001316:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	187a      	adds	r2, r7, r1
 800131a:	23a0      	movs	r3, #160	@ 0xa0
 800131c:	05db      	lsls	r3, r3, #23
 800131e:	0011      	movs	r1, r2
 8001320:	0018      	movs	r0, r3
 8001322:	f000 fa43 	bl	80017ac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	46bd      	mov	sp, r7
 800132a:	b009      	add	sp, #36	@ 0x24
 800132c:	bd90      	pop	{r4, r7, pc}
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	40021000 	.word	0x40021000

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001338:	46c0      	nop			@ (mov r8, r8)
 800133a:	e7fd      	b.n	8001338 <NMI_Handler+0x4>

0800133c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001340:	46c0      	nop			@ (mov r8, r8)
 8001342:	e7fd      	b.n	8001340 <HardFault_Handler+0x4>

08001344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001348:	46c0      	nop			@ (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135c:	f000 f8d6 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001360:	46c0      	nop			@ (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001370:	4a14      	ldr	r2, [pc, #80]	@ (80013c4 <_sbrk+0x5c>)
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <_sbrk+0x60>)
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137c:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <_sbrk+0x64>)
 8001386:	4a12      	ldr	r2, [pc, #72]	@ (80013d0 <_sbrk+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	18d3      	adds	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d207      	bcs.n	80013a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001398:	f001 fed6 	bl	8003148 <__errno>
 800139c:	0003      	movs	r3, r0
 800139e:	220c      	movs	r2, #12
 80013a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a2:	2301      	movs	r3, #1
 80013a4:	425b      	negs	r3, r3
 80013a6:	e009      	b.n	80013bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	18d2      	adds	r2, r2, r3
 80013b6:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <_sbrk+0x64>)
 80013b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b006      	add	sp, #24
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20005000 	.word	0x20005000
 80013c8:	00000400 	.word	0x00000400
 80013cc:	200002b0 	.word	0x200002b0
 80013d0:	20000400 	.word	0x20000400

080013d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d8:	46c0      	nop			@ (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80013e0:	4813      	ldr	r0, [pc, #76]	@ (8001430 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80013e2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013e4:	f7ff fff6 	bl	80013d4 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80013e8:	4812      	ldr	r0, [pc, #72]	@ (8001434 <LoopForever+0x6>)
    LDR R1, [R0]
 80013ea:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80013ec:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <LoopForever+0xa>)
    CMP R1, R2
 80013f0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80013f2:	d105      	bne.n	8001400 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80013f4:	4811      	ldr	r0, [pc, #68]	@ (800143c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80013f6:	4912      	ldr	r1, [pc, #72]	@ (8001440 <LoopForever+0x12>)
    STR R1, [R0]
 80013f8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80013fa:	4812      	ldr	r0, [pc, #72]	@ (8001444 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80013fc:	4912      	ldr	r1, [pc, #72]	@ (8001448 <LoopForever+0x1a>)
    STR R1, [R0]
 80013fe:	6001      	str	r1, [r0, #0]

08001400 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001400:	4812      	ldr	r0, [pc, #72]	@ (800144c <LoopForever+0x1e>)
  ldr r1, =_edata
 8001402:	4913      	ldr	r1, [pc, #76]	@ (8001450 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001404:	4a13      	ldr	r2, [pc, #76]	@ (8001454 <LoopForever+0x26>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a10      	ldr	r2, [pc, #64]	@ (8001458 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001418:	4c10      	ldr	r4, [pc, #64]	@ (800145c <LoopForever+0x2e>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001426:	f001 fe95 	bl	8003154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142a:	f7ff fb9d 	bl	8000b68 <main>

0800142e <LoopForever>:

LoopForever:
    b LoopForever
 800142e:	e7fe      	b.n	800142e <LoopForever>
   ldr   r0, =_estack
 8001430:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8001434:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001438:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800143c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001440:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001444:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001448:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001454:	08003b2c 	.word	0x08003b2c
  ldr r2, =_sbss
 8001458:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800145c:	20000400 	.word	0x20000400

08001460 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC1_IRQHandler>
	...

08001464 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <HAL_Init+0x3c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_Init+0x3c>)
 8001476:	2140      	movs	r1, #64	@ 0x40
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147c:	2003      	movs	r0, #3
 800147e:	f000 f811 	bl	80014a4 <HAL_InitTick>
 8001482:	1e03      	subs	r3, r0, #0
 8001484:	d003      	beq.n	800148e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e001      	b.n	8001492 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800148e:	f7ff feeb 	bl	8001268 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	781b      	ldrb	r3, [r3, #0]
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b002      	add	sp, #8
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <HAL_InitTick+0x5c>)
 80014ae:	681c      	ldr	r4, [r3, #0]
 80014b0:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <HAL_InitTick+0x60>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	0019      	movs	r1, r3
 80014b6:	23fa      	movs	r3, #250	@ 0xfa
 80014b8:	0098      	lsls	r0, r3, #2
 80014ba:	f7fe fe2f 	bl	800011c <__udivsi3>
 80014be:	0003      	movs	r3, r0
 80014c0:	0019      	movs	r1, r3
 80014c2:	0020      	movs	r0, r4
 80014c4:	f7fe fe2a 	bl	800011c <__udivsi3>
 80014c8:	0003      	movs	r3, r0
 80014ca:	0018      	movs	r0, r3
 80014cc:	f000 f961 	bl	8001792 <HAL_SYSTICK_Config>
 80014d0:	1e03      	subs	r3, r0, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e00f      	b.n	80014f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d80b      	bhi.n	80014f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	2301      	movs	r3, #1
 80014e2:	425b      	negs	r3, r3
 80014e4:	2200      	movs	r2, #0
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 f91e 	bl	8001728 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_InitTick+0x64>)
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b003      	add	sp, #12
 80014fe:	bd90      	pop	{r4, r7, pc}
 8001500:	20000000 	.word	0x20000000
 8001504:	20000008 	.word	0x20000008
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_IncTick+0x1c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	001a      	movs	r2, r3
 8001516:	4b05      	ldr	r3, [pc, #20]	@ (800152c <HAL_IncTick+0x20>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	18d2      	adds	r2, r2, r3
 800151c:	4b03      	ldr	r3, [pc, #12]	@ (800152c <HAL_IncTick+0x20>)
 800151e:	601a      	str	r2, [r3, #0]
}
 8001520:	46c0      	nop			@ (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	20000008 	.word	0x20000008
 800152c:	200002b4 	.word	0x200002b4

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b02      	ldr	r3, [pc, #8]	@ (8001540 <HAL_GetTick+0x10>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	200002b4 	.word	0x200002b4

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff fff0 	bl	8001530 <HAL_GetTick>
 8001550:	0003      	movs	r3, r0
 8001552:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3301      	adds	r3, #1
 800155c:	d005      	beq.n	800156a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <HAL_Delay+0x44>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	001a      	movs	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	189b      	adds	r3, r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	f7ff ffe0 	bl	8001530 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8f7      	bhi.n	800156c <HAL_Delay+0x28>
  {
  }
}
 800157c:	46c0      	nop			@ (mov r8, r8)
 800157e:	46c0      	nop			@ (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b004      	add	sp, #16
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	20000008 	.word	0x20000008

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	0002      	movs	r2, r0
 8001594:	1dfb      	adds	r3, r7, #7
 8001596:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001598:	1dfb      	adds	r3, r7, #7
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b7f      	cmp	r3, #127	@ 0x7f
 800159e:	d809      	bhi.n	80015b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	001a      	movs	r2, r3
 80015a6:	231f      	movs	r3, #31
 80015a8:	401a      	ands	r2, r3
 80015aa:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <__NVIC_EnableIRQ+0x30>)
 80015ac:	2101      	movs	r1, #1
 80015ae:	4091      	lsls	r1, r2
 80015b0:	000a      	movs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
  }
}
 80015b4:	46c0      	nop			@ (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b002      	add	sp, #8
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	0002      	movs	r2, r0
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	1dfb      	adds	r3, r7, #7
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80015d2:	d810      	bhi.n	80015f6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	001a      	movs	r2, r3
 80015da:	231f      	movs	r3, #31
 80015dc:	4013      	ands	r3, r2
 80015de:	4908      	ldr	r1, [pc, #32]	@ (8001600 <__NVIC_DisableIRQ+0x40>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	409a      	lsls	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	2280      	movs	r2, #128	@ 0x80
 80015e8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015ea:	f3bf 8f4f 	dsb	sy
}
 80015ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80015f0:	f3bf 8f6f 	isb	sy
}
 80015f4:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			@ (mov r8, r8)
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	0002      	movs	r2, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b7f      	cmp	r3, #127	@ 0x7f
 8001618:	d828      	bhi.n	800166c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800161a:	4a2f      	ldr	r2, [pc, #188]	@ (80016d8 <__NVIC_SetPriority+0xd4>)
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b25b      	sxtb	r3, r3
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	33c0      	adds	r3, #192	@ 0xc0
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	589b      	ldr	r3, [r3, r2]
 800162a:	1dfa      	adds	r2, r7, #7
 800162c:	7812      	ldrb	r2, [r2, #0]
 800162e:	0011      	movs	r1, r2
 8001630:	2203      	movs	r2, #3
 8001632:	400a      	ands	r2, r1
 8001634:	00d2      	lsls	r2, r2, #3
 8001636:	21ff      	movs	r1, #255	@ 0xff
 8001638:	4091      	lsls	r1, r2
 800163a:	000a      	movs	r2, r1
 800163c:	43d2      	mvns	r2, r2
 800163e:	401a      	ands	r2, r3
 8001640:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	019b      	lsls	r3, r3, #6
 8001646:	22ff      	movs	r2, #255	@ 0xff
 8001648:	401a      	ands	r2, r3
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	0018      	movs	r0, r3
 8001650:	2303      	movs	r3, #3
 8001652:	4003      	ands	r3, r0
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001658:	481f      	ldr	r0, [pc, #124]	@ (80016d8 <__NVIC_SetPriority+0xd4>)
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b25b      	sxtb	r3, r3
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	430a      	orrs	r2, r1
 8001664:	33c0      	adds	r3, #192	@ 0xc0
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800166a:	e031      	b.n	80016d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800166c:	4a1b      	ldr	r2, [pc, #108]	@ (80016dc <__NVIC_SetPriority+0xd8>)
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	0019      	movs	r1, r3
 8001674:	230f      	movs	r3, #15
 8001676:	400b      	ands	r3, r1
 8001678:	3b08      	subs	r3, #8
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3306      	adds	r3, #6
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	18d3      	adds	r3, r2, r3
 8001682:	3304      	adds	r3, #4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	1dfa      	adds	r2, r7, #7
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	0011      	movs	r1, r2
 800168c:	2203      	movs	r2, #3
 800168e:	400a      	ands	r2, r1
 8001690:	00d2      	lsls	r2, r2, #3
 8001692:	21ff      	movs	r1, #255	@ 0xff
 8001694:	4091      	lsls	r1, r2
 8001696:	000a      	movs	r2, r1
 8001698:	43d2      	mvns	r2, r2
 800169a:	401a      	ands	r2, r3
 800169c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	22ff      	movs	r2, #255	@ 0xff
 80016a4:	401a      	ands	r2, r3
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	0018      	movs	r0, r3
 80016ac:	2303      	movs	r3, #3
 80016ae:	4003      	ands	r3, r0
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016b4:	4809      	ldr	r0, [pc, #36]	@ (80016dc <__NVIC_SetPriority+0xd8>)
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	001c      	movs	r4, r3
 80016bc:	230f      	movs	r3, #15
 80016be:	4023      	ands	r3, r4
 80016c0:	3b08      	subs	r3, #8
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	430a      	orrs	r2, r1
 80016c6:	3306      	adds	r3, #6
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	18c3      	adds	r3, r0, r3
 80016cc:	3304      	adds	r3, #4
 80016ce:	601a      	str	r2, [r3, #0]
}
 80016d0:	46c0      	nop			@ (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b003      	add	sp, #12
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	e000e100 	.word	0xe000e100
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	1e5a      	subs	r2, r3, #1
 80016ec:	2380      	movs	r3, #128	@ 0x80
 80016ee:	045b      	lsls	r3, r3, #17
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d301      	bcc.n	80016f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f4:	2301      	movs	r3, #1
 80016f6:	e010      	b.n	800171a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <SysTick_Config+0x44>)
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	3a01      	subs	r2, #1
 80016fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001700:	2301      	movs	r3, #1
 8001702:	425b      	negs	r3, r3
 8001704:	2103      	movs	r1, #3
 8001706:	0018      	movs	r0, r3
 8001708:	f7ff ff7c 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <SysTick_Config+0x44>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <SysTick_Config+0x44>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	210f      	movs	r1, #15
 8001734:	187b      	adds	r3, r7, r1
 8001736:	1c02      	adds	r2, r0, #0
 8001738:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	187b      	adds	r3, r7, r1
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b25b      	sxtb	r3, r3
 8001742:	0011      	movs	r1, r2
 8001744:	0018      	movs	r0, r3
 8001746:	f7ff ff5d 	bl	8001604 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b004      	add	sp, #16
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	0002      	movs	r2, r0
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175e:	1dfb      	adds	r3, r7, #7
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b25b      	sxtb	r3, r3
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff ff11 	bl	800158c <__NVIC_EnableIRQ>
}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	0002      	movs	r2, r0
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b25b      	sxtb	r3, r3
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff ff1b 	bl	80015c0 <__NVIC_DisableIRQ>
}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b002      	add	sp, #8
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	0018      	movs	r0, r3
 800179e:	f7ff ff9f 	bl	80016e0 <SysTick_Config>
 80017a2:	0003      	movs	r3, r0
}
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b002      	add	sp, #8
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80017c2:	e155      	b.n	8001a70 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4091      	lsls	r1, r2
 80017ce:	000a      	movs	r2, r1
 80017d0:	4013      	ands	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d100      	bne.n	80017dc <HAL_GPIO_Init+0x30>
 80017da:	e146      	b.n	8001a6a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2203      	movs	r2, #3
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d005      	beq.n	80017f4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2203      	movs	r2, #3
 80017ee:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d130      	bne.n	8001856 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	409a      	lsls	r2, r3
 8001802:	0013      	movs	r3, r2
 8001804:	43da      	mvns	r2, r3
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	409a      	lsls	r2, r3
 8001816:	0013      	movs	r3, r2
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800182a:	2201      	movs	r2, #1
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	43da      	mvns	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	2201      	movs	r2, #1
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2203      	movs	r2, #3
 800185c:	4013      	ands	r3, r2
 800185e:	2b03      	cmp	r3, #3
 8001860:	d017      	beq.n	8001892 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	409a      	lsls	r2, r3
 8001870:	0013      	movs	r3, r2
 8001872:	43da      	mvns	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	409a      	lsls	r2, r3
 8001884:	0013      	movs	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2203      	movs	r2, #3
 8001898:	4013      	ands	r3, r2
 800189a:	2b02      	cmp	r3, #2
 800189c:	d123      	bne.n	80018e6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	08da      	lsrs	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3208      	adds	r2, #8
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	58d3      	ldr	r3, [r2, r3]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2207      	movs	r2, #7
 80018b0:	4013      	ands	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	220f      	movs	r2, #15
 80018b6:	409a      	lsls	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	43da      	mvns	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2107      	movs	r1, #7
 80018ca:	400b      	ands	r3, r1
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	08da      	lsrs	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3208      	adds	r2, #8
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	6939      	ldr	r1, [r7, #16]
 80018e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	409a      	lsls	r2, r3
 80018f4:	0013      	movs	r3, r2
 80018f6:	43da      	mvns	r2, r3
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2203      	movs	r2, #3
 8001904:	401a      	ands	r2, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	409a      	lsls	r2, r3
 800190c:	0013      	movs	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	23c0      	movs	r3, #192	@ 0xc0
 8001920:	029b      	lsls	r3, r3, #10
 8001922:	4013      	ands	r3, r2
 8001924:	d100      	bne.n	8001928 <HAL_GPIO_Init+0x17c>
 8001926:	e0a0      	b.n	8001a6a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001928:	4b57      	ldr	r3, [pc, #348]	@ (8001a88 <HAL_GPIO_Init+0x2dc>)
 800192a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800192c:	4b56      	ldr	r3, [pc, #344]	@ (8001a88 <HAL_GPIO_Init+0x2dc>)
 800192e:	2101      	movs	r1, #1
 8001930:	430a      	orrs	r2, r1
 8001932:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001934:	4a55      	ldr	r2, [pc, #340]	@ (8001a8c <HAL_GPIO_Init+0x2e0>)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	3302      	adds	r3, #2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	589b      	ldr	r3, [r3, r2]
 8001940:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2203      	movs	r2, #3
 8001946:	4013      	ands	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	220f      	movs	r2, #15
 800194c:	409a      	lsls	r2, r3
 800194e:	0013      	movs	r3, r2
 8001950:	43da      	mvns	r2, r3
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	23a0      	movs	r3, #160	@ 0xa0
 800195c:	05db      	lsls	r3, r3, #23
 800195e:	429a      	cmp	r2, r3
 8001960:	d01f      	beq.n	80019a2 <HAL_GPIO_Init+0x1f6>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4a      	ldr	r2, [pc, #296]	@ (8001a90 <HAL_GPIO_Init+0x2e4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d019      	beq.n	800199e <HAL_GPIO_Init+0x1f2>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a49      	ldr	r2, [pc, #292]	@ (8001a94 <HAL_GPIO_Init+0x2e8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d013      	beq.n	800199a <HAL_GPIO_Init+0x1ee>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a48      	ldr	r2, [pc, #288]	@ (8001a98 <HAL_GPIO_Init+0x2ec>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00d      	beq.n	8001996 <HAL_GPIO_Init+0x1ea>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a47      	ldr	r2, [pc, #284]	@ (8001a9c <HAL_GPIO_Init+0x2f0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d007      	beq.n	8001992 <HAL_GPIO_Init+0x1e6>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a46      	ldr	r2, [pc, #280]	@ (8001aa0 <HAL_GPIO_Init+0x2f4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_GPIO_Init+0x1e2>
 800198a:	2305      	movs	r3, #5
 800198c:	e00a      	b.n	80019a4 <HAL_GPIO_Init+0x1f8>
 800198e:	2306      	movs	r3, #6
 8001990:	e008      	b.n	80019a4 <HAL_GPIO_Init+0x1f8>
 8001992:	2304      	movs	r3, #4
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x1f8>
 8001996:	2303      	movs	r3, #3
 8001998:	e004      	b.n	80019a4 <HAL_GPIO_Init+0x1f8>
 800199a:	2302      	movs	r3, #2
 800199c:	e002      	b.n	80019a4 <HAL_GPIO_Init+0x1f8>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x1f8>
 80019a2:	2300      	movs	r3, #0
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	2103      	movs	r1, #3
 80019a8:	400a      	ands	r2, r1
 80019aa:	0092      	lsls	r2, r2, #2
 80019ac:	4093      	lsls	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b4:	4935      	ldr	r1, [pc, #212]	@ (8001a8c <HAL_GPIO_Init+0x2e0>)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019c2:	4b38      	ldr	r3, [pc, #224]	@ (8001aa4 <HAL_GPIO_Init+0x2f8>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	43da      	mvns	r2, r3
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	2380      	movs	r3, #128	@ 0x80
 80019d8:	035b      	lsls	r3, r3, #13
 80019da:	4013      	ands	r3, r2
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019e6:	4b2f      	ldr	r3, [pc, #188]	@ (8001aa4 <HAL_GPIO_Init+0x2f8>)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019ec:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <HAL_GPIO_Init+0x2f8>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43da      	mvns	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	039b      	lsls	r3, r3, #14
 8001a04:	4013      	ands	r3, r2
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a10:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_GPIO_Init+0x2f8>)
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001a16:	4b23      	ldr	r3, [pc, #140]	@ (8001aa4 <HAL_GPIO_Init+0x2f8>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	2380      	movs	r3, #128	@ 0x80
 8001a2c:	029b      	lsls	r3, r3, #10
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <HAL_GPIO_Init+0x2f8>)
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a40:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <HAL_GPIO_Init+0x2f8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43da      	mvns	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	2380      	movs	r3, #128	@ 0x80
 8001a56:	025b      	lsls	r3, r3, #9
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <HAL_GPIO_Init+0x2f8>)
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	40da      	lsrs	r2, r3
 8001a78:	1e13      	subs	r3, r2, #0
 8001a7a:	d000      	beq.n	8001a7e <HAL_GPIO_Init+0x2d2>
 8001a7c:	e6a2      	b.n	80017c4 <HAL_GPIO_Init+0x18>
  }
}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	46c0      	nop			@ (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b006      	add	sp, #24
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	50000400 	.word	0x50000400
 8001a94:	50000800 	.word	0x50000800
 8001a98:	50000c00 	.word	0x50000c00
 8001a9c:	50001000 	.word	0x50001000
 8001aa0:	50001c00 	.word	0x50001c00
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	000a      	movs	r2, r1
 8001ab2:	1cbb      	adds	r3, r7, #2
 8001ab4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	1cba      	adds	r2, r7, #2
 8001abc:	8812      	ldrh	r2, [r2, #0]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d004      	beq.n	8001acc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac2:	230f      	movs	r3, #15
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
 8001aca:	e003      	b.n	8001ad4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001acc:	230f      	movs	r3, #15
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	781b      	ldrb	r3, [r3, #0]
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b004      	add	sp, #16
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	0008      	movs	r0, r1
 8001aec:	0011      	movs	r1, r2
 8001aee:	1cbb      	adds	r3, r7, #2
 8001af0:	1c02      	adds	r2, r0, #0
 8001af2:	801a      	strh	r2, [r3, #0]
 8001af4:	1c7b      	adds	r3, r7, #1
 8001af6:	1c0a      	adds	r2, r1, #0
 8001af8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afa:	1c7b      	adds	r3, r7, #1
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b02:	1cbb      	adds	r3, r7, #2
 8001b04:	881a      	ldrh	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001b0a:	e003      	b.n	8001b14 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001b0c:	1cbb      	adds	r3, r7, #2
 8001b0e:	881a      	ldrh	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b14:	46c0      	nop			@ (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	000a      	movs	r2, r1
 8001b26:	1cbb      	adds	r3, r7, #2
 8001b28:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b30:	1cbb      	adds	r3, r7, #2
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4013      	ands	r3, r2
 8001b38:	041a      	lsls	r2, r3, #16
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	1cb9      	adds	r1, r7, #2
 8001b40:	8809      	ldrh	r1, [r1, #0]
 8001b42:	400b      	ands	r3, r1
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	619a      	str	r2, [r3, #24]
}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b004      	add	sp, #16
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b54:	b5b0      	push	{r4, r5, r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d102      	bne.n	8001b68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	f000 fb6c 	bl	8002240 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b68:	4bc8      	ldr	r3, [pc, #800]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	220c      	movs	r2, #12
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b72:	4bc6      	ldr	r3, [pc, #792]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	2380      	movs	r3, #128	@ 0x80
 8001b78:	025b      	lsls	r3, r3, #9
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2201      	movs	r2, #1
 8001b84:	4013      	ands	r3, r2
 8001b86:	d100      	bne.n	8001b8a <HAL_RCC_OscConfig+0x36>
 8001b88:	e07d      	b.n	8001c86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d007      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	d112      	bne.n	8001bbc <HAL_RCC_OscConfig+0x68>
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	025b      	lsls	r3, r3, #9
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d10d      	bne.n	8001bbc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	4bba      	ldr	r3, [pc, #744]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	029b      	lsls	r3, r3, #10
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d100      	bne.n	8001bae <HAL_RCC_OscConfig+0x5a>
 8001bac:	e06a      	b.n	8001c84 <HAL_RCC_OscConfig+0x130>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d166      	bne.n	8001c84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f000 fb42 	bl	8002240 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	025b      	lsls	r3, r3, #9
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x84>
 8001bc8:	4bb0      	ldr	r3, [pc, #704]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4baf      	ldr	r3, [pc, #700]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001bce:	2180      	movs	r1, #128	@ 0x80
 8001bd0:	0249      	lsls	r1, r1, #9
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e027      	b.n	8001c28 <HAL_RCC_OscConfig+0xd4>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	23a0      	movs	r3, #160	@ 0xa0
 8001bde:	02db      	lsls	r3, r3, #11
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d10e      	bne.n	8001c02 <HAL_RCC_OscConfig+0xae>
 8001be4:	4ba9      	ldr	r3, [pc, #676]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4ba8      	ldr	r3, [pc, #672]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001bea:	2180      	movs	r1, #128	@ 0x80
 8001bec:	02c9      	lsls	r1, r1, #11
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	4ba6      	ldr	r3, [pc, #664]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4ba5      	ldr	r3, [pc, #660]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001bf8:	2180      	movs	r1, #128	@ 0x80
 8001bfa:	0249      	lsls	r1, r1, #9
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e012      	b.n	8001c28 <HAL_RCC_OscConfig+0xd4>
 8001c02:	4ba2      	ldr	r3, [pc, #648]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4ba1      	ldr	r3, [pc, #644]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001c08:	49a1      	ldr	r1, [pc, #644]	@ (8001e90 <HAL_RCC_OscConfig+0x33c>)
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	4b9f      	ldr	r3, [pc, #636]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	025b      	lsls	r3, r3, #9
 8001c16:	4013      	ands	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4b9b      	ldr	r3, [pc, #620]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b9a      	ldr	r3, [pc, #616]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001c22:	499c      	ldr	r1, [pc, #624]	@ (8001e94 <HAL_RCC_OscConfig+0x340>)
 8001c24:	400a      	ands	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d014      	beq.n	8001c5a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fc7e 	bl	8001530 <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3a:	f7ff fc79 	bl	8001530 <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b64      	cmp	r3, #100	@ 0x64
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e2f9      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c4c:	4b8f      	ldr	r3, [pc, #572]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	029b      	lsls	r3, r3, #10
 8001c54:	4013      	ands	r3, r2
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0xe6>
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fc69 	bl	8001530 <HAL_GetTick>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff fc64 	bl	8001530 <HAL_GetTick>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	@ 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e2e4      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c76:	4b85      	ldr	r3, [pc, #532]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	2380      	movs	r3, #128	@ 0x80
 8001c7c:	029b      	lsls	r3, r3, #10
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x110>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d100      	bne.n	8001c92 <HAL_RCC_OscConfig+0x13e>
 8001c90:	e099      	b.n	8001dc6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d009      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001ca0:	4b7a      	ldr	r3, [pc, #488]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b79      	ldr	r3, [pc, #484]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001ca6:	2120      	movs	r1, #32
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cae:	2220      	movs	r2, #32
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d005      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	2b0c      	cmp	r3, #12
 8001cbe:	d13e      	bne.n	8001d3e <HAL_RCC_OscConfig+0x1ea>
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d13b      	bne.n	8001d3e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001cc6:	4b71      	ldr	r3, [pc, #452]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d004      	beq.n	8001cda <HAL_RCC_OscConfig+0x186>
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e2b2      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b6c      	ldr	r3, [pc, #432]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4a6e      	ldr	r2, [pc, #440]	@ (8001e98 <HAL_RCC_OscConfig+0x344>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	021a      	lsls	r2, r3, #8
 8001cea:	4b68      	ldr	r3, [pc, #416]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001cec:	430a      	orrs	r2, r1
 8001cee:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001cf0:	4b66      	ldr	r3, [pc, #408]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2209      	movs	r2, #9
 8001cf6:	4393      	bics	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	4b64      	ldr	r3, [pc, #400]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d02:	f000 fbeb 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8001d06:	0001      	movs	r1, r0
 8001d08:	4b60      	ldr	r3, [pc, #384]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	220f      	movs	r2, #15
 8001d10:	4013      	ands	r3, r2
 8001d12:	4a62      	ldr	r2, [pc, #392]	@ (8001e9c <HAL_RCC_OscConfig+0x348>)
 8001d14:	5cd3      	ldrb	r3, [r2, r3]
 8001d16:	000a      	movs	r2, r1
 8001d18:	40da      	lsrs	r2, r3
 8001d1a:	4b61      	ldr	r3, [pc, #388]	@ (8001ea0 <HAL_RCC_OscConfig+0x34c>)
 8001d1c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001d1e:	4b61      	ldr	r3, [pc, #388]	@ (8001ea4 <HAL_RCC_OscConfig+0x350>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2513      	movs	r5, #19
 8001d24:	197c      	adds	r4, r7, r5
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7ff fbbc 	bl	80014a4 <HAL_InitTick>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001d30:	197b      	adds	r3, r7, r5
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d046      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001d38:	197b      	adds	r3, r7, r5
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	e280      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d027      	beq.n	8001d94 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d44:	4b51      	ldr	r3, [pc, #324]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2209      	movs	r2, #9
 8001d4a:	4393      	bics	r3, r2
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	4b4f      	ldr	r3, [pc, #316]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7ff fbeb 	bl	8001530 <HAL_GetTick>
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff fbe6 	bl	8001530 <HAL_GetTick>
 8001d64:	0002      	movs	r2, r0
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e266      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d72:	4b46      	ldr	r3, [pc, #280]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2204      	movs	r2, #4
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d0f1      	beq.n	8001d60 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b43      	ldr	r3, [pc, #268]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a45      	ldr	r2, [pc, #276]	@ (8001e98 <HAL_RCC_OscConfig+0x344>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	021a      	lsls	r2, r3, #8
 8001d8c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	e018      	b.n	8001dc6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d94:	4b3d      	ldr	r3, [pc, #244]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b3c      	ldr	r3, [pc, #240]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	438a      	bics	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff fbc6 	bl	8001530 <HAL_GetTick>
 8001da4:	0003      	movs	r3, r0
 8001da6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff fbc1 	bl	8001530 <HAL_GetTick>
 8001dae:	0002      	movs	r2, r0
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e241      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dbc:	4b33      	ldr	r3, [pc, #204]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d1f1      	bne.n	8001daa <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2210      	movs	r2, #16
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d100      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x27e>
 8001dd0:	e0a1      	b.n	8001f16 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d140      	bne.n	8001e5a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	2380      	movs	r3, #128	@ 0x80
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4013      	ands	r3, r2
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_OscConfig+0x29c>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e227      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df0:	4b26      	ldr	r3, [pc, #152]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea8 <HAL_RCC_OscConfig+0x354>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	0019      	movs	r1, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1a      	ldr	r2, [r3, #32]
 8001dfe:	4b23      	ldr	r3, [pc, #140]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001e00:	430a      	orrs	r2, r1
 8001e02:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e04:	4b21      	ldr	r3, [pc, #132]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	0a19      	lsrs	r1, r3, #8
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	061a      	lsls	r2, r3, #24
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	0b5b      	lsrs	r3, r3, #13
 8001e1e:	3301      	adds	r3, #1
 8001e20:	2280      	movs	r2, #128	@ 0x80
 8001e22:	0212      	lsls	r2, r2, #8
 8001e24:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e26:	4b19      	ldr	r3, [pc, #100]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	091b      	lsrs	r3, r3, #4
 8001e2c:	210f      	movs	r1, #15
 8001e2e:	400b      	ands	r3, r1
 8001e30:	491a      	ldr	r1, [pc, #104]	@ (8001e9c <HAL_RCC_OscConfig+0x348>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <HAL_RCC_OscConfig+0x34c>)
 8001e38:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea4 <HAL_RCC_OscConfig+0x350>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2513      	movs	r5, #19
 8001e40:	197c      	adds	r4, r7, r5
 8001e42:	0018      	movs	r0, r3
 8001e44:	f7ff fb2e 	bl	80014a4 <HAL_InitTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001e4c:	197b      	adds	r3, r7, r5
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d060      	beq.n	8001f16 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001e54:	197b      	adds	r3, r7, r5
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	e1f2      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d03f      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e62:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001e68:	2180      	movs	r1, #128	@ 0x80
 8001e6a:	0049      	lsls	r1, r1, #1
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff fb5e 	bl	8001530 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e78:	e018      	b.n	8001eac <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e7a:	f7ff fb59 	bl	8001530 <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d911      	bls.n	8001eac <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e1d9      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	fffeffff 	.word	0xfffeffff
 8001e94:	fffbffff 	.word	0xfffbffff
 8001e98:	ffffe0ff 	.word	0xffffe0ff
 8001e9c:	08003ad0 	.word	0x08003ad0
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001eac:	4bc9      	ldr	r3, [pc, #804]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d0e0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb8:	4bc6      	ldr	r3, [pc, #792]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4ac6      	ldr	r2, [pc, #792]	@ (80021d8 <HAL_RCC_OscConfig+0x684>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1a      	ldr	r2, [r3, #32]
 8001ec6:	4bc3      	ldr	r3, [pc, #780]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ecc:	4bc1      	ldr	r3, [pc, #772]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	0a19      	lsrs	r1, r3, #8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	061a      	lsls	r2, r3, #24
 8001eda:	4bbe      	ldr	r3, [pc, #760]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	e019      	b.n	8001f16 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ee2:	4bbc      	ldr	r3, [pc, #752]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4bbb      	ldr	r3, [pc, #748]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001ee8:	49bc      	ldr	r1, [pc, #752]	@ (80021dc <HAL_RCC_OscConfig+0x688>)
 8001eea:	400a      	ands	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7ff fb1f 	bl	8001530 <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ef8:	f7ff fb1a 	bl	8001530 <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e19a      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f0a:	4bb2      	ldr	r3, [pc, #712]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	@ 0x80
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4013      	ands	r3, r2
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2208      	movs	r2, #8
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d036      	beq.n	8001f8e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d019      	beq.n	8001f5c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f28:	4baa      	ldr	r3, [pc, #680]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001f2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f2c:	4ba9      	ldr	r3, [pc, #676]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001f2e:	2101      	movs	r1, #1
 8001f30:	430a      	orrs	r2, r1
 8001f32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7ff fafc 	bl	8001530 <HAL_GetTick>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3e:	f7ff faf7 	bl	8001530 <HAL_GetTick>
 8001f42:	0002      	movs	r2, r0
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e177      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f50:	4ba0      	ldr	r3, [pc, #640]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f54:	2202      	movs	r2, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d0f1      	beq.n	8001f3e <HAL_RCC_OscConfig+0x3ea>
 8001f5a:	e018      	b.n	8001f8e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5c:	4b9d      	ldr	r3, [pc, #628]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001f5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f60:	4b9c      	ldr	r3, [pc, #624]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001f62:	2101      	movs	r1, #1
 8001f64:	438a      	bics	r2, r1
 8001f66:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7ff fae2 	bl	8001530 <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f72:	f7ff fadd 	bl	8001530 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e15d      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f84:	4b93      	ldr	r3, [pc, #588]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f88:	2202      	movs	r2, #2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d1f1      	bne.n	8001f72 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2204      	movs	r2, #4
 8001f94:	4013      	ands	r3, r2
 8001f96:	d100      	bne.n	8001f9a <HAL_RCC_OscConfig+0x446>
 8001f98:	e0ae      	b.n	80020f8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9a:	2023      	movs	r0, #35	@ 0x23
 8001f9c:	183b      	adds	r3, r7, r0
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa2:	4b8c      	ldr	r3, [pc, #560]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001fa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fa6:	2380      	movs	r3, #128	@ 0x80
 8001fa8:	055b      	lsls	r3, r3, #21
 8001faa:	4013      	ands	r3, r2
 8001fac:	d109      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	4b89      	ldr	r3, [pc, #548]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fb2:	4b88      	ldr	r3, [pc, #544]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8001fb4:	2180      	movs	r1, #128	@ 0x80
 8001fb6:	0549      	lsls	r1, r1, #21
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001fbc:	183b      	adds	r3, r7, r0
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc2:	4b87      	ldr	r3, [pc, #540]	@ (80021e0 <HAL_RCC_OscConfig+0x68c>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	2380      	movs	r3, #128	@ 0x80
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d11a      	bne.n	8002004 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fce:	4b84      	ldr	r3, [pc, #528]	@ (80021e0 <HAL_RCC_OscConfig+0x68c>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4b83      	ldr	r3, [pc, #524]	@ (80021e0 <HAL_RCC_OscConfig+0x68c>)
 8001fd4:	2180      	movs	r1, #128	@ 0x80
 8001fd6:	0049      	lsls	r1, r1, #1
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fdc:	f7ff faa8 	bl	8001530 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe6:	f7ff faa3 	bl	8001530 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b64      	cmp	r3, #100	@ 0x64
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e123      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	4b79      	ldr	r3, [pc, #484]	@ (80021e0 <HAL_RCC_OscConfig+0x68c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	@ 0x80
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4013      	ands	r3, r2
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	429a      	cmp	r2, r3
 800200e:	d107      	bne.n	8002020 <HAL_RCC_OscConfig+0x4cc>
 8002010:	4b70      	ldr	r3, [pc, #448]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8002012:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002014:	4b6f      	ldr	r3, [pc, #444]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8002016:	2180      	movs	r1, #128	@ 0x80
 8002018:	0049      	lsls	r1, r1, #1
 800201a:	430a      	orrs	r2, r1
 800201c:	651a      	str	r2, [r3, #80]	@ 0x50
 800201e:	e031      	b.n	8002084 <HAL_RCC_OscConfig+0x530>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10c      	bne.n	8002042 <HAL_RCC_OscConfig+0x4ee>
 8002028:	4b6a      	ldr	r3, [pc, #424]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 800202a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800202c:	4b69      	ldr	r3, [pc, #420]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 800202e:	496b      	ldr	r1, [pc, #428]	@ (80021dc <HAL_RCC_OscConfig+0x688>)
 8002030:	400a      	ands	r2, r1
 8002032:	651a      	str	r2, [r3, #80]	@ 0x50
 8002034:	4b67      	ldr	r3, [pc, #412]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8002036:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002038:	4b66      	ldr	r3, [pc, #408]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 800203a:	496a      	ldr	r1, [pc, #424]	@ (80021e4 <HAL_RCC_OscConfig+0x690>)
 800203c:	400a      	ands	r2, r1
 800203e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002040:	e020      	b.n	8002084 <HAL_RCC_OscConfig+0x530>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	23a0      	movs	r3, #160	@ 0xa0
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	429a      	cmp	r2, r3
 800204c:	d10e      	bne.n	800206c <HAL_RCC_OscConfig+0x518>
 800204e:	4b61      	ldr	r3, [pc, #388]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8002050:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002052:	4b60      	ldr	r3, [pc, #384]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8002054:	2180      	movs	r1, #128	@ 0x80
 8002056:	00c9      	lsls	r1, r1, #3
 8002058:	430a      	orrs	r2, r1
 800205a:	651a      	str	r2, [r3, #80]	@ 0x50
 800205c:	4b5d      	ldr	r3, [pc, #372]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 800205e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002060:	4b5c      	ldr	r3, [pc, #368]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8002062:	2180      	movs	r1, #128	@ 0x80
 8002064:	0049      	lsls	r1, r1, #1
 8002066:	430a      	orrs	r2, r1
 8002068:	651a      	str	r2, [r3, #80]	@ 0x50
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0x530>
 800206c:	4b59      	ldr	r3, [pc, #356]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 800206e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002070:	4b58      	ldr	r3, [pc, #352]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8002072:	495a      	ldr	r1, [pc, #360]	@ (80021dc <HAL_RCC_OscConfig+0x688>)
 8002074:	400a      	ands	r2, r1
 8002076:	651a      	str	r2, [r3, #80]	@ 0x50
 8002078:	4b56      	ldr	r3, [pc, #344]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 800207a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800207c:	4b55      	ldr	r3, [pc, #340]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 800207e:	4959      	ldr	r1, [pc, #356]	@ (80021e4 <HAL_RCC_OscConfig+0x690>)
 8002080:	400a      	ands	r2, r1
 8002082:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d015      	beq.n	80020b8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208c:	f7ff fa50 	bl	8001530 <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002094:	e009      	b.n	80020aa <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7ff fa4b 	bl	8001530 <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	4a51      	ldr	r2, [pc, #324]	@ (80021e8 <HAL_RCC_OscConfig+0x694>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e0ca      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020aa:	4b4a      	ldr	r3, [pc, #296]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 80020ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020ae:	2380      	movs	r3, #128	@ 0x80
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4013      	ands	r3, r2
 80020b4:	d0ef      	beq.n	8002096 <HAL_RCC_OscConfig+0x542>
 80020b6:	e014      	b.n	80020e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b8:	f7ff fa3a 	bl	8001530 <HAL_GetTick>
 80020bc:	0003      	movs	r3, r0
 80020be:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020c0:	e009      	b.n	80020d6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff fa35 	bl	8001530 <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	4a46      	ldr	r2, [pc, #280]	@ (80021e8 <HAL_RCC_OscConfig+0x694>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e0b4      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020d6:	4b3f      	ldr	r3, [pc, #252]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 80020d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020da:	2380      	movs	r3, #128	@ 0x80
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4013      	ands	r3, r2
 80020e0:	d1ef      	bne.n	80020c2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020e2:	2323      	movs	r3, #35	@ 0x23
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ec:	4b39      	ldr	r3, [pc, #228]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 80020ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020f0:	4b38      	ldr	r3, [pc, #224]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 80020f2:	493e      	ldr	r1, [pc, #248]	@ (80021ec <HAL_RCC_OscConfig+0x698>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d100      	bne.n	8002102 <HAL_RCC_OscConfig+0x5ae>
 8002100:	e09d      	b.n	800223e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	2b0c      	cmp	r3, #12
 8002106:	d100      	bne.n	800210a <HAL_RCC_OscConfig+0x5b6>
 8002108:	e076      	b.n	80021f8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	2b02      	cmp	r3, #2
 8002110:	d145      	bne.n	800219e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	4b30      	ldr	r3, [pc, #192]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4b2f      	ldr	r3, [pc, #188]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8002118:	4935      	ldr	r1, [pc, #212]	@ (80021f0 <HAL_RCC_OscConfig+0x69c>)
 800211a:	400a      	ands	r2, r1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff fa07 	bl	8001530 <HAL_GetTick>
 8002122:	0003      	movs	r3, r0
 8002124:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002128:	f7ff fa02 	bl	8001530 <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e082      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800213a:	4b26      	ldr	r3, [pc, #152]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	049b      	lsls	r3, r3, #18
 8002142:	4013      	ands	r3, r2
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002146:	4b23      	ldr	r3, [pc, #140]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	4a2a      	ldr	r2, [pc, #168]	@ (80021f4 <HAL_RCC_OscConfig+0x6a0>)
 800214c:	4013      	ands	r3, r2
 800214e:	0019      	movs	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	431a      	orrs	r2, r3
 8002160:	4b1c      	ldr	r3, [pc, #112]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8002162:	430a      	orrs	r2, r1
 8002164:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002166:	4b1b      	ldr	r3, [pc, #108]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4b1a      	ldr	r3, [pc, #104]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 800216c:	2180      	movs	r1, #128	@ 0x80
 800216e:	0449      	lsls	r1, r1, #17
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff f9dc 	bl	8001530 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217e:	f7ff f9d7 	bl	8001530 <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e057      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2380      	movs	r3, #128	@ 0x80
 8002196:	049b      	lsls	r3, r3, #18
 8002198:	4013      	ands	r3, r2
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x62a>
 800219c:	e04f      	b.n	800223e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219e:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 80021a4:	4912      	ldr	r1, [pc, #72]	@ (80021f0 <HAL_RCC_OscConfig+0x69c>)
 80021a6:	400a      	ands	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7ff f9c1 	bl	8001530 <HAL_GetTick>
 80021ae:	0003      	movs	r3, r0
 80021b0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b4:	f7ff f9bc 	bl	8001530 <HAL_GetTick>
 80021b8:	0002      	movs	r2, r0
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e03c      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021c6:	4b03      	ldr	r3, [pc, #12]	@ (80021d4 <HAL_RCC_OscConfig+0x680>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	049b      	lsls	r3, r3, #18
 80021ce:	4013      	ands	r3, r2
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x660>
 80021d2:	e034      	b.n	800223e <HAL_RCC_OscConfig+0x6ea>
 80021d4:	40021000 	.word	0x40021000
 80021d8:	ffff1fff 	.word	0xffff1fff
 80021dc:	fffffeff 	.word	0xfffffeff
 80021e0:	40007000 	.word	0x40007000
 80021e4:	fffffbff 	.word	0xfffffbff
 80021e8:	00001388 	.word	0x00001388
 80021ec:	efffffff 	.word	0xefffffff
 80021f0:	feffffff 	.word	0xfeffffff
 80021f4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e01d      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002204:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <HAL_RCC_OscConfig+0x6f4>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	2380      	movs	r3, #128	@ 0x80
 800220e:	025b      	lsls	r3, r3, #9
 8002210:	401a      	ands	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002216:	429a      	cmp	r2, r3
 8002218:	d10f      	bne.n	800223a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	23f0      	movs	r3, #240	@ 0xf0
 800221e:	039b      	lsls	r3, r3, #14
 8002220:	401a      	ands	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d107      	bne.n	800223a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	23c0      	movs	r3, #192	@ 0xc0
 800222e:	041b      	lsls	r3, r3, #16
 8002230:	401a      	ands	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	b00a      	add	sp, #40	@ 0x28
 8002246:	bdb0      	pop	{r4, r5, r7, pc}
 8002248:	40021000 	.word	0x40021000

0800224c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800224c:	b5b0      	push	{r4, r5, r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e128      	b.n	80024b2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002260:	4b96      	ldr	r3, [pc, #600]	@ (80024bc <HAL_RCC_ClockConfig+0x270>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2201      	movs	r2, #1
 8002266:	4013      	ands	r3, r2
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d91e      	bls.n	80022ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b93      	ldr	r3, [pc, #588]	@ (80024bc <HAL_RCC_ClockConfig+0x270>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2201      	movs	r2, #1
 8002274:	4393      	bics	r3, r2
 8002276:	0019      	movs	r1, r3
 8002278:	4b90      	ldr	r3, [pc, #576]	@ (80024bc <HAL_RCC_ClockConfig+0x270>)
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002280:	f7ff f956 	bl	8001530 <HAL_GetTick>
 8002284:	0003      	movs	r3, r0
 8002286:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002288:	e009      	b.n	800229e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228a:	f7ff f951 	bl	8001530 <HAL_GetTick>
 800228e:	0002      	movs	r2, r0
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	4a8a      	ldr	r2, [pc, #552]	@ (80024c0 <HAL_RCC_ClockConfig+0x274>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e109      	b.n	80024b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b87      	ldr	r3, [pc, #540]	@ (80024bc <HAL_RCC_ClockConfig+0x270>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2201      	movs	r2, #1
 80022a4:	4013      	ands	r3, r2
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d1ee      	bne.n	800228a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2202      	movs	r2, #2
 80022b2:	4013      	ands	r3, r2
 80022b4:	d009      	beq.n	80022ca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b6:	4b83      	ldr	r3, [pc, #524]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	22f0      	movs	r2, #240	@ 0xf0
 80022bc:	4393      	bics	r3, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	4b7f      	ldr	r3, [pc, #508]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 80022c6:	430a      	orrs	r2, r1
 80022c8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2201      	movs	r2, #1
 80022d0:	4013      	ands	r3, r2
 80022d2:	d100      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x8a>
 80022d4:	e089      	b.n	80023ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022de:	4b79      	ldr	r3, [pc, #484]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	@ 0x80
 80022e4:	029b      	lsls	r3, r3, #10
 80022e6:	4013      	ands	r3, r2
 80022e8:	d120      	bne.n	800232c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e0e1      	b.n	80024b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022f6:	4b73      	ldr	r3, [pc, #460]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	2380      	movs	r3, #128	@ 0x80
 80022fc:	049b      	lsls	r3, r3, #18
 80022fe:	4013      	ands	r3, r2
 8002300:	d114      	bne.n	800232c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0d5      	b.n	80024b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d106      	bne.n	800231c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800230e:	4b6d      	ldr	r3, [pc, #436]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2204      	movs	r2, #4
 8002314:	4013      	ands	r3, r2
 8002316:	d109      	bne.n	800232c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0ca      	b.n	80024b2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800231c:	4b69      	ldr	r3, [pc, #420]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4013      	ands	r3, r2
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0c2      	b.n	80024b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232c:	4b65      	ldr	r3, [pc, #404]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2203      	movs	r2, #3
 8002332:	4393      	bics	r3, r2
 8002334:	0019      	movs	r1, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4b62      	ldr	r3, [pc, #392]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 800233c:	430a      	orrs	r2, r1
 800233e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002340:	f7ff f8f6 	bl	8001530 <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d111      	bne.n	8002374 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002350:	e009      	b.n	8002366 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002352:	f7ff f8ed 	bl	8001530 <HAL_GetTick>
 8002356:	0002      	movs	r2, r0
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	4a58      	ldr	r2, [pc, #352]	@ (80024c0 <HAL_RCC_ClockConfig+0x274>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e0a5      	b.n	80024b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002366:	4b57      	ldr	r3, [pc, #348]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	220c      	movs	r2, #12
 800236c:	4013      	ands	r3, r2
 800236e:	2b08      	cmp	r3, #8
 8002370:	d1ef      	bne.n	8002352 <HAL_RCC_ClockConfig+0x106>
 8002372:	e03a      	b.n	80023ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d111      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800237c:	e009      	b.n	8002392 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800237e:	f7ff f8d7 	bl	8001530 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	4a4d      	ldr	r2, [pc, #308]	@ (80024c0 <HAL_RCC_ClockConfig+0x274>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e08f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002392:	4b4c      	ldr	r3, [pc, #304]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	220c      	movs	r2, #12
 8002398:	4013      	ands	r3, r2
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d1ef      	bne.n	800237e <HAL_RCC_ClockConfig+0x132>
 800239e:	e024      	b.n	80023ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d11b      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a8:	e009      	b.n	80023be <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023aa:	f7ff f8c1 	bl	8001530 <HAL_GetTick>
 80023ae:	0002      	movs	r2, r0
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	4a42      	ldr	r2, [pc, #264]	@ (80024c0 <HAL_RCC_ClockConfig+0x274>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e079      	b.n	80024b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023be:	4b41      	ldr	r3, [pc, #260]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	220c      	movs	r2, #12
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d1ef      	bne.n	80023aa <HAL_RCC_ClockConfig+0x15e>
 80023ca:	e00e      	b.n	80023ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7ff f8b0 	bl	8001530 <HAL_GetTick>
 80023d0:	0002      	movs	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	4a3a      	ldr	r2, [pc, #232]	@ (80024c0 <HAL_RCC_ClockConfig+0x274>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e068      	b.n	80024b2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80023e0:	4b38      	ldr	r3, [pc, #224]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	220c      	movs	r2, #12
 80023e6:	4013      	ands	r3, r2
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ea:	4b34      	ldr	r3, [pc, #208]	@ (80024bc <HAL_RCC_ClockConfig+0x270>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4013      	ands	r3, r2
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d21e      	bcs.n	8002436 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f8:	4b30      	ldr	r3, [pc, #192]	@ (80024bc <HAL_RCC_ClockConfig+0x270>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2201      	movs	r2, #1
 80023fe:	4393      	bics	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	4b2e      	ldr	r3, [pc, #184]	@ (80024bc <HAL_RCC_ClockConfig+0x270>)
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800240a:	f7ff f891 	bl	8001530 <HAL_GetTick>
 800240e:	0003      	movs	r3, r0
 8002410:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	e009      	b.n	8002428 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002414:	f7ff f88c 	bl	8001530 <HAL_GetTick>
 8002418:	0002      	movs	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	4a28      	ldr	r2, [pc, #160]	@ (80024c0 <HAL_RCC_ClockConfig+0x274>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e044      	b.n	80024b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002428:	4b24      	ldr	r3, [pc, #144]	@ (80024bc <HAL_RCC_ClockConfig+0x270>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2201      	movs	r2, #1
 800242e:	4013      	ands	r3, r2
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d1ee      	bne.n	8002414 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2204      	movs	r2, #4
 800243c:	4013      	ands	r3, r2
 800243e:	d009      	beq.n	8002454 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002440:	4b20      	ldr	r3, [pc, #128]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a20      	ldr	r2, [pc, #128]	@ (80024c8 <HAL_RCC_ClockConfig+0x27c>)
 8002446:	4013      	ands	r3, r2
 8002448:	0019      	movs	r1, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 8002450:	430a      	orrs	r2, r1
 8002452:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2208      	movs	r2, #8
 800245a:	4013      	ands	r3, r2
 800245c:	d00a      	beq.n	8002474 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800245e:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	4a1a      	ldr	r2, [pc, #104]	@ (80024cc <HAL_RCC_ClockConfig+0x280>)
 8002464:	4013      	ands	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	00da      	lsls	r2, r3, #3
 800246e:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 8002470:	430a      	orrs	r2, r1
 8002472:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002474:	f000 f832 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8002478:	0001      	movs	r1, r0
 800247a:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <HAL_RCC_ClockConfig+0x278>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	220f      	movs	r2, #15
 8002482:	4013      	ands	r3, r2
 8002484:	4a12      	ldr	r2, [pc, #72]	@ (80024d0 <HAL_RCC_ClockConfig+0x284>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	000a      	movs	r2, r1
 800248a:	40da      	lsrs	r2, r3
 800248c:	4b11      	ldr	r3, [pc, #68]	@ (80024d4 <HAL_RCC_ClockConfig+0x288>)
 800248e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002490:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <HAL_RCC_ClockConfig+0x28c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	250b      	movs	r5, #11
 8002496:	197c      	adds	r4, r7, r5
 8002498:	0018      	movs	r0, r3
 800249a:	f7ff f803 	bl	80014a4 <HAL_InitTick>
 800249e:	0003      	movs	r3, r0
 80024a0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80024a2:	197b      	adds	r3, r7, r5
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80024aa:	197b      	adds	r3, r7, r5
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	0018      	movs	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b004      	add	sp, #16
 80024b8:	bdb0      	pop	{r4, r5, r7, pc}
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	40022000 	.word	0x40022000
 80024c0:	00001388 	.word	0x00001388
 80024c4:	40021000 	.word	0x40021000
 80024c8:	fffff8ff 	.word	0xfffff8ff
 80024cc:	ffffc7ff 	.word	0xffffc7ff
 80024d0:	08003ad0 	.word	0x08003ad0
 80024d4:	20000000 	.word	0x20000000
 80024d8:	20000004 	.word	0x20000004

080024dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80024e2:	4b3c      	ldr	r3, [pc, #240]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	220c      	movs	r2, #12
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b0c      	cmp	r3, #12
 80024f0:	d013      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x3e>
 80024f2:	d85c      	bhi.n	80025ae <HAL_RCC_GetSysClockFreq+0xd2>
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d002      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x22>
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d00b      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x38>
 80024fc:	e057      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024fe:	4b35      	ldr	r3, [pc, #212]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2210      	movs	r2, #16
 8002504:	4013      	ands	r3, r2
 8002506:	d002      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002508:	4b33      	ldr	r3, [pc, #204]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800250a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800250c:	e05d      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800250e:	4b33      	ldr	r3, [pc, #204]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x100>)
 8002510:	613b      	str	r3, [r7, #16]
      break;
 8002512:	e05a      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002514:	4b32      	ldr	r3, [pc, #200]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002516:	613b      	str	r3, [r7, #16]
      break;
 8002518:	e057      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	0c9b      	lsrs	r3, r3, #18
 800251e:	220f      	movs	r2, #15
 8002520:	4013      	ands	r3, r2
 8002522:	4a30      	ldr	r2, [pc, #192]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002524:	5cd3      	ldrb	r3, [r2, r3]
 8002526:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	0d9b      	lsrs	r3, r3, #22
 800252c:	2203      	movs	r2, #3
 800252e:	4013      	ands	r3, r2
 8002530:	3301      	adds	r3, #1
 8002532:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002534:	4b27      	ldr	r3, [pc, #156]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	025b      	lsls	r3, r3, #9
 800253c:	4013      	ands	r3, r2
 800253e:	d00f      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	000a      	movs	r2, r1
 8002544:	0152      	lsls	r2, r2, #5
 8002546:	1a52      	subs	r2, r2, r1
 8002548:	0193      	lsls	r3, r2, #6
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	185b      	adds	r3, r3, r1
 8002550:	025b      	lsls	r3, r3, #9
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	0018      	movs	r0, r3
 8002556:	f7fd fde1 	bl	800011c <__udivsi3>
 800255a:	0003      	movs	r3, r0
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	e023      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002560:	4b1c      	ldr	r3, [pc, #112]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2210      	movs	r2, #16
 8002566:	4013      	ands	r3, r2
 8002568:	d00f      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	000a      	movs	r2, r1
 800256e:	0152      	lsls	r2, r2, #5
 8002570:	1a52      	subs	r2, r2, r1
 8002572:	0193      	lsls	r3, r2, #6
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	185b      	adds	r3, r3, r1
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	0018      	movs	r0, r3
 8002580:	f7fd fdcc 	bl	800011c <__udivsi3>
 8002584:	0003      	movs	r3, r0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	e00e      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	000a      	movs	r2, r1
 800258e:	0152      	lsls	r2, r2, #5
 8002590:	1a52      	subs	r2, r2, r1
 8002592:	0193      	lsls	r3, r2, #6
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	185b      	adds	r3, r3, r1
 800259a:	029b      	lsls	r3, r3, #10
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	0018      	movs	r0, r3
 80025a0:	f7fd fdbc 	bl	800011c <__udivsi3>
 80025a4:	0003      	movs	r3, r0
 80025a6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	613b      	str	r3, [r7, #16]
      break;
 80025ac:	e00d      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80025ae:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	0b5b      	lsrs	r3, r3, #13
 80025b4:	2207      	movs	r2, #7
 80025b6:	4013      	ands	r3, r2
 80025b8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	2280      	movs	r2, #128	@ 0x80
 80025c0:	0212      	lsls	r2, r2, #8
 80025c2:	409a      	lsls	r2, r3
 80025c4:	0013      	movs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
      break;
 80025c8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025ca:	693b      	ldr	r3, [r7, #16]
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b006      	add	sp, #24
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	003d0900 	.word	0x003d0900
 80025dc:	00f42400 	.word	0x00f42400
 80025e0:	007a1200 	.word	0x007a1200
 80025e4:	08003ae8 	.word	0x08003ae8

080025e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ec:	4b02      	ldr	r3, [pc, #8]	@ (80025f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	0018      	movs	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	20000000 	.word	0x20000000

080025fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002600:	f7ff fff2 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002604:	0001      	movs	r1, r0
 8002606:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	2207      	movs	r2, #7
 800260e:	4013      	ands	r3, r2
 8002610:	4a04      	ldr	r2, [pc, #16]	@ (8002624 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	40d9      	lsrs	r1, r3
 8002616:	000b      	movs	r3, r1
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	40021000 	.word	0x40021000
 8002624:	08003ae0 	.word	0x08003ae0

08002628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e032      	b.n	80026a0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2239      	movs	r2, #57	@ 0x39
 800263e:	5c9b      	ldrb	r3, [r3, r2]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d107      	bne.n	8002656 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2238      	movs	r2, #56	@ 0x38
 800264a:	2100      	movs	r1, #0
 800264c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0018      	movs	r0, r3
 8002652:	f7fe fe1d 	bl	8001290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2239      	movs	r2, #57	@ 0x39
 800265a:	2102      	movs	r1, #2
 800265c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3304      	adds	r3, #4
 8002666:	0019      	movs	r1, r3
 8002668:	0010      	movs	r0, r2
 800266a:	f000 facf 	bl	8002c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	223e      	movs	r2, #62	@ 0x3e
 8002672:	2101      	movs	r1, #1
 8002674:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	223a      	movs	r2, #58	@ 0x3a
 800267a:	2101      	movs	r1, #1
 800267c:	5499      	strb	r1, [r3, r2]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	223b      	movs	r2, #59	@ 0x3b
 8002682:	2101      	movs	r1, #1
 8002684:	5499      	strb	r1, [r3, r2]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	223c      	movs	r2, #60	@ 0x3c
 800268a:	2101      	movs	r1, #1
 800268c:	5499      	strb	r1, [r3, r2]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	223d      	movs	r2, #61	@ 0x3d
 8002692:	2101      	movs	r1, #1
 8002694:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2239      	movs	r2, #57	@ 0x39
 800269a:	2101      	movs	r1, #1
 800269c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b002      	add	sp, #8
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2239      	movs	r2, #57	@ 0x39
 80026b4:	5c9b      	ldrb	r3, [r3, r2]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d001      	beq.n	80026c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e02e      	b.n	800271e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2239      	movs	r2, #57	@ 0x39
 80026c4:	2102      	movs	r1, #2
 80026c6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	05db      	lsls	r3, r3, #23
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d009      	beq.n	80026e8 <HAL_TIM_Base_Start+0x40>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a13      	ldr	r2, [pc, #76]	@ (8002728 <HAL_TIM_Base_Start+0x80>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_TIM_Base_Start+0x40>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a12      	ldr	r2, [pc, #72]	@ (800272c <HAL_TIM_Base_Start+0x84>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d111      	bne.n	800270c <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2207      	movs	r2, #7
 80026f0:	4013      	ands	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b06      	cmp	r3, #6
 80026f8:	d010      	beq.n	800271c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2101      	movs	r1, #1
 8002706:	430a      	orrs	r2, r1
 8002708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270a:	e007      	b.n	800271c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2101      	movs	r1, #1
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	0018      	movs	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	b004      	add	sp, #16
 8002724:	bd80      	pop	{r7, pc}
 8002726:	46c0      	nop			@ (mov r8, r8)
 8002728:	40010800 	.word	0x40010800
 800272c:	40011400 	.word	0x40011400

08002730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e032      	b.n	80027a8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2239      	movs	r2, #57	@ 0x39
 8002746:	5c9b      	ldrb	r3, [r3, r2]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d107      	bne.n	800275e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2238      	movs	r2, #56	@ 0x38
 8002752:	2100      	movs	r1, #0
 8002754:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	0018      	movs	r0, r3
 800275a:	f000 f829 	bl	80027b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2239      	movs	r2, #57	@ 0x39
 8002762:	2102      	movs	r1, #2
 8002764:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3304      	adds	r3, #4
 800276e:	0019      	movs	r1, r3
 8002770:	0010      	movs	r0, r2
 8002772:	f000 fa4b 	bl	8002c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	223e      	movs	r2, #62	@ 0x3e
 800277a:	2101      	movs	r1, #1
 800277c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	223a      	movs	r2, #58	@ 0x3a
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	223b      	movs	r2, #59	@ 0x3b
 800278a:	2101      	movs	r1, #1
 800278c:	5499      	strb	r1, [r3, r2]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	223c      	movs	r2, #60	@ 0x3c
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	223d      	movs	r2, #61	@ 0x3d
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2239      	movs	r2, #57	@ 0x39
 80027a2:	2101      	movs	r1, #1
 80027a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027b8:	46c0      	nop			@ (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d108      	bne.n	80027e2 <HAL_TIM_PWM_Start+0x22>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	223a      	movs	r2, #58	@ 0x3a
 80027d4:	5c9b      	ldrb	r3, [r3, r2]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	1e5a      	subs	r2, r3, #1
 80027dc:	4193      	sbcs	r3, r2
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	e01f      	b.n	8002822 <HAL_TIM_PWM_Start+0x62>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d108      	bne.n	80027fa <HAL_TIM_PWM_Start+0x3a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	223b      	movs	r2, #59	@ 0x3b
 80027ec:	5c9b      	ldrb	r3, [r3, r2]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	1e5a      	subs	r2, r3, #1
 80027f4:	4193      	sbcs	r3, r2
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	e013      	b.n	8002822 <HAL_TIM_PWM_Start+0x62>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d108      	bne.n	8002812 <HAL_TIM_PWM_Start+0x52>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	223c      	movs	r2, #60	@ 0x3c
 8002804:	5c9b      	ldrb	r3, [r3, r2]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	1e5a      	subs	r2, r3, #1
 800280c:	4193      	sbcs	r3, r2
 800280e:	b2db      	uxtb	r3, r3
 8002810:	e007      	b.n	8002822 <HAL_TIM_PWM_Start+0x62>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	223d      	movs	r2, #61	@ 0x3d
 8002816:	5c9b      	ldrb	r3, [r3, r2]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	1e5a      	subs	r2, r3, #1
 800281e:	4193      	sbcs	r3, r2
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e04d      	b.n	80028c6 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d104      	bne.n	800283a <HAL_TIM_PWM_Start+0x7a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	223a      	movs	r2, #58	@ 0x3a
 8002834:	2102      	movs	r1, #2
 8002836:	5499      	strb	r1, [r3, r2]
 8002838:	e013      	b.n	8002862 <HAL_TIM_PWM_Start+0xa2>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d104      	bne.n	800284a <HAL_TIM_PWM_Start+0x8a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	223b      	movs	r2, #59	@ 0x3b
 8002844:	2102      	movs	r1, #2
 8002846:	5499      	strb	r1, [r3, r2]
 8002848:	e00b      	b.n	8002862 <HAL_TIM_PWM_Start+0xa2>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b08      	cmp	r3, #8
 800284e:	d104      	bne.n	800285a <HAL_TIM_PWM_Start+0x9a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	223c      	movs	r2, #60	@ 0x3c
 8002854:	2102      	movs	r1, #2
 8002856:	5499      	strb	r1, [r3, r2]
 8002858:	e003      	b.n	8002862 <HAL_TIM_PWM_Start+0xa2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	223d      	movs	r2, #61	@ 0x3d
 800285e:	2102      	movs	r1, #2
 8002860:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	2201      	movs	r2, #1
 800286a:	0018      	movs	r0, r3
 800286c:	f000 fbc6 	bl	8002ffc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	05db      	lsls	r3, r3, #23
 8002878:	429a      	cmp	r2, r3
 800287a:	d009      	beq.n	8002890 <HAL_TIM_PWM_Start+0xd0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a13      	ldr	r2, [pc, #76]	@ (80028d0 <HAL_TIM_PWM_Start+0x110>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d004      	beq.n	8002890 <HAL_TIM_PWM_Start+0xd0>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a12      	ldr	r2, [pc, #72]	@ (80028d4 <HAL_TIM_PWM_Start+0x114>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d111      	bne.n	80028b4 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2207      	movs	r2, #7
 8002898:	4013      	ands	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b06      	cmp	r3, #6
 80028a0:	d010      	beq.n	80028c4 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2101      	movs	r1, #1
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b2:	e007      	b.n	80028c4 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2101      	movs	r1, #1
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	0018      	movs	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b004      	add	sp, #16
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	40010800 	.word	0x40010800
 80028d4:	40011400 	.word	0x40011400

080028d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e4:	2317      	movs	r3, #23
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2238      	movs	r2, #56	@ 0x38
 80028f0:	5c9b      	ldrb	r3, [r3, r2]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_PWM_ConfigChannel+0x22>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e0ad      	b.n	8002a56 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2238      	movs	r2, #56	@ 0x38
 80028fe:	2101      	movs	r1, #1
 8002900:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b0c      	cmp	r3, #12
 8002906:	d100      	bne.n	800290a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002908:	e076      	b.n	80029f8 <HAL_TIM_PWM_ConfigChannel+0x120>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b0c      	cmp	r3, #12
 800290e:	d900      	bls.n	8002912 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002910:	e095      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d04e      	beq.n	80029b6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b08      	cmp	r3, #8
 800291c:	d900      	bls.n	8002920 <HAL_TIM_PWM_ConfigChannel+0x48>
 800291e:	e08e      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d021      	beq.n	8002970 <HAL_TIM_PWM_ConfigChannel+0x98>
 800292c:	e087      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	0011      	movs	r1, r2
 8002936:	0018      	movs	r0, r3
 8002938:	f000 f9c2 	bl	8002cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2108      	movs	r1, #8
 8002948:	430a      	orrs	r2, r1
 800294a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2104      	movs	r1, #4
 8002958:	438a      	bics	r2, r1
 800295a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6999      	ldr	r1, [r3, #24]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	619a      	str	r2, [r3, #24]
      break;
 800296e:	e06b      	b.n	8002a48 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	0011      	movs	r1, r2
 8002978:	0018      	movs	r0, r3
 800297a:	f000 f9dd 	bl	8002d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0109      	lsls	r1, r1, #4
 800298c:	430a      	orrs	r2, r1
 800298e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4931      	ldr	r1, [pc, #196]	@ (8002a60 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800299c:	400a      	ands	r2, r1
 800299e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6999      	ldr	r1, [r3, #24]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	021a      	lsls	r2, r3, #8
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	619a      	str	r2, [r3, #24]
      break;
 80029b4:	e048      	b.n	8002a48 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	0011      	movs	r1, r2
 80029be:	0018      	movs	r0, r3
 80029c0:	f000 f9fc 	bl	8002dbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69da      	ldr	r2, [r3, #28]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2108      	movs	r1, #8
 80029d0:	430a      	orrs	r2, r1
 80029d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2104      	movs	r1, #4
 80029e0:	438a      	bics	r2, r1
 80029e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69d9      	ldr	r1, [r3, #28]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	61da      	str	r2, [r3, #28]
      break;
 80029f6:	e027      	b.n	8002a48 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	0011      	movs	r1, r2
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 fa1b 	bl	8002e3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2180      	movs	r1, #128	@ 0x80
 8002a12:	0109      	lsls	r1, r1, #4
 8002a14:	430a      	orrs	r2, r1
 8002a16:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	490f      	ldr	r1, [pc, #60]	@ (8002a60 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002a24:	400a      	ands	r2, r1
 8002a26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	69d9      	ldr	r1, [r3, #28]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	021a      	lsls	r2, r3, #8
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	61da      	str	r2, [r3, #28]
      break;
 8002a3c:	e004      	b.n	8002a48 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002a3e:	2317      	movs	r3, #23
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
      break;
 8002a46:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2238      	movs	r2, #56	@ 0x38
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	5499      	strb	r1, [r3, r2]

  return status;
 8002a50:	2317      	movs	r3, #23
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	781b      	ldrb	r3, [r3, #0]
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b006      	add	sp, #24
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	fffffbff 	.word	0xfffffbff

08002a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6e:	230f      	movs	r3, #15
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2238      	movs	r2, #56	@ 0x38
 8002a7a:	5c9b      	ldrb	r3, [r3, r2]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_TIM_ConfigClockSource+0x20>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0bc      	b.n	8002bfe <HAL_TIM_ConfigClockSource+0x19a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2238      	movs	r2, #56	@ 0x38
 8002a88:	2101      	movs	r1, #1
 8002a8a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2239      	movs	r2, #57	@ 0x39
 8002a90:	2102      	movs	r1, #2
 8002a92:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2277      	movs	r2, #119	@ 0x77
 8002aa0:	4393      	bics	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4a58      	ldr	r2, [pc, #352]	@ (8002c08 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2280      	movs	r2, #128	@ 0x80
 8002aba:	0192      	lsls	r2, r2, #6
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d040      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0xde>
 8002ac0:	2280      	movs	r2, #128	@ 0x80
 8002ac2:	0192      	lsls	r2, r2, #6
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d900      	bls.n	8002aca <HAL_TIM_ConfigClockSource+0x66>
 8002ac8:	e088      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x178>
 8002aca:	2280      	movs	r2, #128	@ 0x80
 8002acc:	0152      	lsls	r2, r2, #5
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d100      	bne.n	8002ad4 <HAL_TIM_ConfigClockSource+0x70>
 8002ad2:	e088      	b.n	8002be6 <HAL_TIM_ConfigClockSource+0x182>
 8002ad4:	2280      	movs	r2, #128	@ 0x80
 8002ad6:	0152      	lsls	r2, r2, #5
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d900      	bls.n	8002ade <HAL_TIM_ConfigClockSource+0x7a>
 8002adc:	e07e      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x178>
 8002ade:	2b70      	cmp	r3, #112	@ 0x70
 8002ae0:	d018      	beq.n	8002b14 <HAL_TIM_ConfigClockSource+0xb0>
 8002ae2:	d900      	bls.n	8002ae6 <HAL_TIM_ConfigClockSource+0x82>
 8002ae4:	e07a      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x178>
 8002ae6:	2b60      	cmp	r3, #96	@ 0x60
 8002ae8:	d04f      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0x126>
 8002aea:	d900      	bls.n	8002aee <HAL_TIM_ConfigClockSource+0x8a>
 8002aec:	e076      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x178>
 8002aee:	2b50      	cmp	r3, #80	@ 0x50
 8002af0:	d03b      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x106>
 8002af2:	d900      	bls.n	8002af6 <HAL_TIM_ConfigClockSource+0x92>
 8002af4:	e072      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x178>
 8002af6:	2b40      	cmp	r3, #64	@ 0x40
 8002af8:	d057      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x146>
 8002afa:	d900      	bls.n	8002afe <HAL_TIM_ConfigClockSource+0x9a>
 8002afc:	e06e      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x178>
 8002afe:	2b30      	cmp	r3, #48	@ 0x30
 8002b00:	d063      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0x166>
 8002b02:	d86b      	bhi.n	8002bdc <HAL_TIM_ConfigClockSource+0x178>
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d060      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0x166>
 8002b08:	d868      	bhi.n	8002bdc <HAL_TIM_ConfigClockSource+0x178>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d05d      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0x166>
 8002b0e:	2b10      	cmp	r3, #16
 8002b10:	d05b      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0x166>
 8002b12:	e063      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b24:	f000 fa4a 	bl	8002fbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2277      	movs	r2, #119	@ 0x77
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	609a      	str	r2, [r3, #8]
      break;
 8002b40:	e052      	b.n	8002be8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b52:	f000 fa33 	bl	8002fbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2180      	movs	r1, #128	@ 0x80
 8002b62:	01c9      	lsls	r1, r1, #7
 8002b64:	430a      	orrs	r2, r1
 8002b66:	609a      	str	r2, [r3, #8]
      break;
 8002b68:	e03e      	b.n	8002be8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b76:	001a      	movs	r2, r3
 8002b78:	f000 f9a6 	bl	8002ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2150      	movs	r1, #80	@ 0x50
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 fa00 	bl	8002f88 <TIM_ITRx_SetConfig>
      break;
 8002b88:	e02e      	b.n	8002be8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b96:	001a      	movs	r2, r3
 8002b98:	f000 f9c4 	bl	8002f24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2160      	movs	r1, #96	@ 0x60
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 f9f0 	bl	8002f88 <TIM_ITRx_SetConfig>
      break;
 8002ba8:	e01e      	b.n	8002be8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	f000 f986 	bl	8002ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2140      	movs	r1, #64	@ 0x40
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 f9e0 	bl	8002f88 <TIM_ITRx_SetConfig>
      break;
 8002bc8:	e00e      	b.n	8002be8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	0010      	movs	r0, r2
 8002bd6:	f000 f9d7 	bl	8002f88 <TIM_ITRx_SetConfig>
      break;
 8002bda:	e005      	b.n	8002be8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002bdc:	230f      	movs	r3, #15
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
      break;
 8002be4:	e000      	b.n	8002be8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002be6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2239      	movs	r2, #57	@ 0x39
 8002bec:	2101      	movs	r1, #1
 8002bee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2238      	movs	r2, #56	@ 0x38
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	5499      	strb	r1, [r3, r2]

  return status;
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	781b      	ldrb	r3, [r3, #0]
}
 8002bfe:	0018      	movs	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b004      	add	sp, #16
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	46c0      	nop			@ (mov r8, r8)
 8002c08:	ffff00ff 	.word	0xffff00ff

08002c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	05db      	lsls	r3, r3, #23
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d007      	beq.n	8002c36 <TIM_Base_SetConfig+0x2a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a22      	ldr	r2, [pc, #136]	@ (8002cb4 <TIM_Base_SetConfig+0xa8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d003      	beq.n	8002c36 <TIM_Base_SetConfig+0x2a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a21      	ldr	r2, [pc, #132]	@ (8002cb8 <TIM_Base_SetConfig+0xac>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d108      	bne.n	8002c48 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2270      	movs	r2, #112	@ 0x70
 8002c3a:	4393      	bics	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	2380      	movs	r3, #128	@ 0x80
 8002c4c:	05db      	lsls	r3, r3, #23
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d007      	beq.n	8002c62 <TIM_Base_SetConfig+0x56>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a17      	ldr	r2, [pc, #92]	@ (8002cb4 <TIM_Base_SetConfig+0xa8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d003      	beq.n	8002c62 <TIM_Base_SetConfig+0x56>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a16      	ldr	r2, [pc, #88]	@ (8002cb8 <TIM_Base_SetConfig+0xac>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d108      	bne.n	8002c74 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4a15      	ldr	r2, [pc, #84]	@ (8002cbc <TIM_Base_SetConfig+0xb0>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2280      	movs	r2, #128	@ 0x80
 8002c78:	4393      	bics	r3, r2
 8002c7a:	001a      	movs	r2, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]
}
 8002cac:	46c0      	nop			@ (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b004      	add	sp, #16
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40010800 	.word	0x40010800
 8002cb8:	40011400 	.word	0x40011400
 8002cbc:	fffffcff 	.word	0xfffffcff

08002cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4393      	bics	r3, r2
 8002cd8:	001a      	movs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2270      	movs	r2, #112	@ 0x70
 8002cee:	4393      	bics	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2202      	movs	r2, #2
 8002d08:	4393      	bics	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	621a      	str	r2, [r3, #32]
}
 8002d30:	46c0      	nop			@ (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b006      	add	sp, #24
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	4393      	bics	r3, r2
 8002d50:	001a      	movs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a13      	ldr	r2, [pc, #76]	@ (8002db4 <TIM_OC2_SetConfig+0x7c>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4a12      	ldr	r2, [pc, #72]	@ (8002db8 <TIM_OC2_SetConfig+0x80>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2220      	movs	r2, #32
 8002d82:	4393      	bics	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	621a      	str	r2, [r3, #32]
}
 8002dac:	46c0      	nop			@ (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b006      	add	sp, #24
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	ffff8fff 	.word	0xffff8fff
 8002db8:	fffffcff 	.word	0xfffffcff

08002dbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4a18      	ldr	r2, [pc, #96]	@ (8002e34 <TIM_OC3_SetConfig+0x78>)
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2270      	movs	r2, #112	@ 0x70
 8002de8:	4393      	bics	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2203      	movs	r2, #3
 8002df0:	4393      	bics	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	4a0d      	ldr	r2, [pc, #52]	@ (8002e38 <TIM_OC3_SetConfig+0x7c>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	621a      	str	r2, [r3, #32]
}
 8002e2c:	46c0      	nop			@ (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b006      	add	sp, #24
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	fffffeff 	.word	0xfffffeff
 8002e38:	fffffdff 	.word	0xfffffdff

08002e3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4a19      	ldr	r2, [pc, #100]	@ (8002eb8 <TIM_OC4_SetConfig+0x7c>)
 8002e52:	401a      	ands	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4a15      	ldr	r2, [pc, #84]	@ (8002ebc <TIM_OC4_SetConfig+0x80>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4a14      	ldr	r2, [pc, #80]	@ (8002ec0 <TIM_OC4_SetConfig+0x84>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	4a10      	ldr	r2, [pc, #64]	@ (8002ec4 <TIM_OC4_SetConfig+0x88>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	031b      	lsls	r3, r3, #12
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	621a      	str	r2, [r3, #32]
}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b006      	add	sp, #24
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	ffffefff 	.word	0xffffefff
 8002ebc:	ffff8fff 	.word	0xffff8fff
 8002ec0:	fffffcff 	.word	0xfffffcff
 8002ec4:	ffffdfff 	.word	0xffffdfff

08002ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	4393      	bics	r3, r2
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	22f0      	movs	r2, #240	@ 0xf0
 8002ef2:	4393      	bics	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	220a      	movs	r2, #10
 8002f04:	4393      	bics	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	621a      	str	r2, [r3, #32]
}
 8002f1c:	46c0      	nop			@ (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b006      	add	sp, #24
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	2210      	movs	r2, #16
 8002f3c:	4393      	bics	r3, r2
 8002f3e:	001a      	movs	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f84 <TIM_TI2_ConfigInputStage+0x60>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	031b      	lsls	r3, r3, #12
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	22a0      	movs	r2, #160	@ 0xa0
 8002f60:	4393      	bics	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	621a      	str	r2, [r3, #32]
}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b006      	add	sp, #24
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	ffff0fff 	.word	0xffff0fff

08002f88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2270      	movs	r2, #112	@ 0x70
 8002f9c:	4393      	bics	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	2207      	movs	r2, #7
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	609a      	str	r2, [r3, #8]
}
 8002fb2:	46c0      	nop			@ (mov r8, r8)
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b004      	add	sp, #16
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	4a09      	ldr	r2, [pc, #36]	@ (8002ff8 <TIM_ETR_SetConfig+0x3c>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	021a      	lsls	r2, r3, #8
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	609a      	str	r2, [r3, #8]
}
 8002ff0:	46c0      	nop			@ (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b006      	add	sp, #24
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	ffff00ff 	.word	0xffff00ff

08002ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	221f      	movs	r2, #31
 800300c:	4013      	ands	r3, r2
 800300e:	2201      	movs	r2, #1
 8003010:	409a      	lsls	r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	43d2      	mvns	r2, r2
 800301e:	401a      	ands	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1a      	ldr	r2, [r3, #32]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	211f      	movs	r1, #31
 800302c:	400b      	ands	r3, r1
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4099      	lsls	r1, r3
 8003032:	000b      	movs	r3, r1
 8003034:	431a      	orrs	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	b006      	add	sp, #24
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2238      	movs	r2, #56	@ 0x38
 8003052:	5c9b      	ldrb	r3, [r3, r2]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003058:	2302      	movs	r3, #2
 800305a:	e042      	b.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2238      	movs	r2, #56	@ 0x38
 8003060:	2101      	movs	r1, #1
 8003062:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2239      	movs	r2, #57	@ 0x39
 8003068:	2102      	movs	r1, #2
 800306a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2270      	movs	r2, #112	@ 0x70
 8003080:	4393      	bics	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	2380      	movs	r3, #128	@ 0x80
 800309c:	05db      	lsls	r3, r3, #23
 800309e:	429a      	cmp	r2, r3
 80030a0:	d009      	beq.n	80030b6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a11      	ldr	r2, [pc, #68]	@ (80030ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d004      	beq.n	80030b6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0f      	ldr	r2, [pc, #60]	@ (80030f0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d10c      	bne.n	80030d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2280      	movs	r2, #128	@ 0x80
 80030ba:	4393      	bics	r3, r2
 80030bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2239      	movs	r2, #57	@ 0x39
 80030d4:	2101      	movs	r1, #1
 80030d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2238      	movs	r2, #56	@ 0x38
 80030dc:	2100      	movs	r1, #0
 80030de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b004      	add	sp, #16
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	40010800 	.word	0x40010800
 80030f0:	40011400 	.word	0x40011400

080030f4 <siprintf>:
 80030f4:	b40e      	push	{r1, r2, r3}
 80030f6:	b510      	push	{r4, lr}
 80030f8:	2400      	movs	r4, #0
 80030fa:	490c      	ldr	r1, [pc, #48]	@ (800312c <siprintf+0x38>)
 80030fc:	b09d      	sub	sp, #116	@ 0x74
 80030fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003100:	9002      	str	r0, [sp, #8]
 8003102:	9006      	str	r0, [sp, #24]
 8003104:	9107      	str	r1, [sp, #28]
 8003106:	9104      	str	r1, [sp, #16]
 8003108:	4809      	ldr	r0, [pc, #36]	@ (8003130 <siprintf+0x3c>)
 800310a:	490a      	ldr	r1, [pc, #40]	@ (8003134 <siprintf+0x40>)
 800310c:	cb04      	ldmia	r3!, {r2}
 800310e:	9105      	str	r1, [sp, #20]
 8003110:	6800      	ldr	r0, [r0, #0]
 8003112:	a902      	add	r1, sp, #8
 8003114:	9301      	str	r3, [sp, #4]
 8003116:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003118:	f000 f99e 	bl	8003458 <_svfiprintf_r>
 800311c:	9b02      	ldr	r3, [sp, #8]
 800311e:	701c      	strb	r4, [r3, #0]
 8003120:	b01d      	add	sp, #116	@ 0x74
 8003122:	bc10      	pop	{r4}
 8003124:	bc08      	pop	{r3}
 8003126:	b003      	add	sp, #12
 8003128:	4718      	bx	r3
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	7fffffff 	.word	0x7fffffff
 8003130:	2000000c 	.word	0x2000000c
 8003134:	ffff0208 	.word	0xffff0208

08003138 <memset>:
 8003138:	0003      	movs	r3, r0
 800313a:	1882      	adds	r2, r0, r2
 800313c:	4293      	cmp	r3, r2
 800313e:	d100      	bne.n	8003142 <memset+0xa>
 8003140:	4770      	bx	lr
 8003142:	7019      	strb	r1, [r3, #0]
 8003144:	3301      	adds	r3, #1
 8003146:	e7f9      	b.n	800313c <memset+0x4>

08003148 <__errno>:
 8003148:	4b01      	ldr	r3, [pc, #4]	@ (8003150 <__errno+0x8>)
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	4770      	bx	lr
 800314e:	46c0      	nop			@ (mov r8, r8)
 8003150:	2000000c 	.word	0x2000000c

08003154 <__libc_init_array>:
 8003154:	b570      	push	{r4, r5, r6, lr}
 8003156:	2600      	movs	r6, #0
 8003158:	4c0c      	ldr	r4, [pc, #48]	@ (800318c <__libc_init_array+0x38>)
 800315a:	4d0d      	ldr	r5, [pc, #52]	@ (8003190 <__libc_init_array+0x3c>)
 800315c:	1b64      	subs	r4, r4, r5
 800315e:	10a4      	asrs	r4, r4, #2
 8003160:	42a6      	cmp	r6, r4
 8003162:	d109      	bne.n	8003178 <__libc_init_array+0x24>
 8003164:	2600      	movs	r6, #0
 8003166:	f000 fc61 	bl	8003a2c <_init>
 800316a:	4c0a      	ldr	r4, [pc, #40]	@ (8003194 <__libc_init_array+0x40>)
 800316c:	4d0a      	ldr	r5, [pc, #40]	@ (8003198 <__libc_init_array+0x44>)
 800316e:	1b64      	subs	r4, r4, r5
 8003170:	10a4      	asrs	r4, r4, #2
 8003172:	42a6      	cmp	r6, r4
 8003174:	d105      	bne.n	8003182 <__libc_init_array+0x2e>
 8003176:	bd70      	pop	{r4, r5, r6, pc}
 8003178:	00b3      	lsls	r3, r6, #2
 800317a:	58eb      	ldr	r3, [r5, r3]
 800317c:	4798      	blx	r3
 800317e:	3601      	adds	r6, #1
 8003180:	e7ee      	b.n	8003160 <__libc_init_array+0xc>
 8003182:	00b3      	lsls	r3, r6, #2
 8003184:	58eb      	ldr	r3, [r5, r3]
 8003186:	4798      	blx	r3
 8003188:	3601      	adds	r6, #1
 800318a:	e7f2      	b.n	8003172 <__libc_init_array+0x1e>
 800318c:	08003b24 	.word	0x08003b24
 8003190:	08003b24 	.word	0x08003b24
 8003194:	08003b28 	.word	0x08003b28
 8003198:	08003b24 	.word	0x08003b24

0800319c <__retarget_lock_acquire_recursive>:
 800319c:	4770      	bx	lr

0800319e <__retarget_lock_release_recursive>:
 800319e:	4770      	bx	lr

080031a0 <_free_r>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	0005      	movs	r5, r0
 80031a4:	1e0c      	subs	r4, r1, #0
 80031a6:	d010      	beq.n	80031ca <_free_r+0x2a>
 80031a8:	3c04      	subs	r4, #4
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	da00      	bge.n	80031b2 <_free_r+0x12>
 80031b0:	18e4      	adds	r4, r4, r3
 80031b2:	0028      	movs	r0, r5
 80031b4:	f000 f8e0 	bl	8003378 <__malloc_lock>
 80031b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003230 <_free_r+0x90>)
 80031ba:	6813      	ldr	r3, [r2, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <_free_r+0x2c>
 80031c0:	6063      	str	r3, [r4, #4]
 80031c2:	6014      	str	r4, [r2, #0]
 80031c4:	0028      	movs	r0, r5
 80031c6:	f000 f8df 	bl	8003388 <__malloc_unlock>
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
 80031cc:	42a3      	cmp	r3, r4
 80031ce:	d908      	bls.n	80031e2 <_free_r+0x42>
 80031d0:	6820      	ldr	r0, [r4, #0]
 80031d2:	1821      	adds	r1, r4, r0
 80031d4:	428b      	cmp	r3, r1
 80031d6:	d1f3      	bne.n	80031c0 <_free_r+0x20>
 80031d8:	6819      	ldr	r1, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	1809      	adds	r1, r1, r0
 80031de:	6021      	str	r1, [r4, #0]
 80031e0:	e7ee      	b.n	80031c0 <_free_r+0x20>
 80031e2:	001a      	movs	r2, r3
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <_free_r+0x4e>
 80031ea:	42a3      	cmp	r3, r4
 80031ec:	d9f9      	bls.n	80031e2 <_free_r+0x42>
 80031ee:	6811      	ldr	r1, [r2, #0]
 80031f0:	1850      	adds	r0, r2, r1
 80031f2:	42a0      	cmp	r0, r4
 80031f4:	d10b      	bne.n	800320e <_free_r+0x6e>
 80031f6:	6820      	ldr	r0, [r4, #0]
 80031f8:	1809      	adds	r1, r1, r0
 80031fa:	1850      	adds	r0, r2, r1
 80031fc:	6011      	str	r1, [r2, #0]
 80031fe:	4283      	cmp	r3, r0
 8003200:	d1e0      	bne.n	80031c4 <_free_r+0x24>
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	1841      	adds	r1, r0, r1
 8003208:	6011      	str	r1, [r2, #0]
 800320a:	6053      	str	r3, [r2, #4]
 800320c:	e7da      	b.n	80031c4 <_free_r+0x24>
 800320e:	42a0      	cmp	r0, r4
 8003210:	d902      	bls.n	8003218 <_free_r+0x78>
 8003212:	230c      	movs	r3, #12
 8003214:	602b      	str	r3, [r5, #0]
 8003216:	e7d5      	b.n	80031c4 <_free_r+0x24>
 8003218:	6820      	ldr	r0, [r4, #0]
 800321a:	1821      	adds	r1, r4, r0
 800321c:	428b      	cmp	r3, r1
 800321e:	d103      	bne.n	8003228 <_free_r+0x88>
 8003220:	6819      	ldr	r1, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	1809      	adds	r1, r1, r0
 8003226:	6021      	str	r1, [r4, #0]
 8003228:	6063      	str	r3, [r4, #4]
 800322a:	6054      	str	r4, [r2, #4]
 800322c:	e7ca      	b.n	80031c4 <_free_r+0x24>
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	200003fc 	.word	0x200003fc

08003234 <sbrk_aligned>:
 8003234:	b570      	push	{r4, r5, r6, lr}
 8003236:	4e0f      	ldr	r6, [pc, #60]	@ (8003274 <sbrk_aligned+0x40>)
 8003238:	000d      	movs	r5, r1
 800323a:	6831      	ldr	r1, [r6, #0]
 800323c:	0004      	movs	r4, r0
 800323e:	2900      	cmp	r1, #0
 8003240:	d102      	bne.n	8003248 <sbrk_aligned+0x14>
 8003242:	f000 fb95 	bl	8003970 <_sbrk_r>
 8003246:	6030      	str	r0, [r6, #0]
 8003248:	0029      	movs	r1, r5
 800324a:	0020      	movs	r0, r4
 800324c:	f000 fb90 	bl	8003970 <_sbrk_r>
 8003250:	1c43      	adds	r3, r0, #1
 8003252:	d103      	bne.n	800325c <sbrk_aligned+0x28>
 8003254:	2501      	movs	r5, #1
 8003256:	426d      	negs	r5, r5
 8003258:	0028      	movs	r0, r5
 800325a:	bd70      	pop	{r4, r5, r6, pc}
 800325c:	2303      	movs	r3, #3
 800325e:	1cc5      	adds	r5, r0, #3
 8003260:	439d      	bics	r5, r3
 8003262:	42a8      	cmp	r0, r5
 8003264:	d0f8      	beq.n	8003258 <sbrk_aligned+0x24>
 8003266:	1a29      	subs	r1, r5, r0
 8003268:	0020      	movs	r0, r4
 800326a:	f000 fb81 	bl	8003970 <_sbrk_r>
 800326e:	3001      	adds	r0, #1
 8003270:	d1f2      	bne.n	8003258 <sbrk_aligned+0x24>
 8003272:	e7ef      	b.n	8003254 <sbrk_aligned+0x20>
 8003274:	200003f8 	.word	0x200003f8

08003278 <_malloc_r>:
 8003278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800327a:	2203      	movs	r2, #3
 800327c:	1ccb      	adds	r3, r1, #3
 800327e:	4393      	bics	r3, r2
 8003280:	3308      	adds	r3, #8
 8003282:	0005      	movs	r5, r0
 8003284:	001f      	movs	r7, r3
 8003286:	2b0c      	cmp	r3, #12
 8003288:	d234      	bcs.n	80032f4 <_malloc_r+0x7c>
 800328a:	270c      	movs	r7, #12
 800328c:	42b9      	cmp	r1, r7
 800328e:	d833      	bhi.n	80032f8 <_malloc_r+0x80>
 8003290:	0028      	movs	r0, r5
 8003292:	f000 f871 	bl	8003378 <__malloc_lock>
 8003296:	4e37      	ldr	r6, [pc, #220]	@ (8003374 <_malloc_r+0xfc>)
 8003298:	6833      	ldr	r3, [r6, #0]
 800329a:	001c      	movs	r4, r3
 800329c:	2c00      	cmp	r4, #0
 800329e:	d12f      	bne.n	8003300 <_malloc_r+0x88>
 80032a0:	0039      	movs	r1, r7
 80032a2:	0028      	movs	r0, r5
 80032a4:	f7ff ffc6 	bl	8003234 <sbrk_aligned>
 80032a8:	0004      	movs	r4, r0
 80032aa:	1c43      	adds	r3, r0, #1
 80032ac:	d15f      	bne.n	800336e <_malloc_r+0xf6>
 80032ae:	6834      	ldr	r4, [r6, #0]
 80032b0:	9400      	str	r4, [sp, #0]
 80032b2:	9b00      	ldr	r3, [sp, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d14a      	bne.n	800334e <_malloc_r+0xd6>
 80032b8:	2c00      	cmp	r4, #0
 80032ba:	d052      	beq.n	8003362 <_malloc_r+0xea>
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	0028      	movs	r0, r5
 80032c0:	18e3      	adds	r3, r4, r3
 80032c2:	9900      	ldr	r1, [sp, #0]
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	f000 fb53 	bl	8003970 <_sbrk_r>
 80032ca:	9b01      	ldr	r3, [sp, #4]
 80032cc:	4283      	cmp	r3, r0
 80032ce:	d148      	bne.n	8003362 <_malloc_r+0xea>
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	0028      	movs	r0, r5
 80032d4:	1aff      	subs	r7, r7, r3
 80032d6:	0039      	movs	r1, r7
 80032d8:	f7ff ffac 	bl	8003234 <sbrk_aligned>
 80032dc:	3001      	adds	r0, #1
 80032de:	d040      	beq.n	8003362 <_malloc_r+0xea>
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	19db      	adds	r3, r3, r7
 80032e4:	6023      	str	r3, [r4, #0]
 80032e6:	6833      	ldr	r3, [r6, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	2a00      	cmp	r2, #0
 80032ec:	d133      	bne.n	8003356 <_malloc_r+0xde>
 80032ee:	9b00      	ldr	r3, [sp, #0]
 80032f0:	6033      	str	r3, [r6, #0]
 80032f2:	e019      	b.n	8003328 <_malloc_r+0xb0>
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	dac9      	bge.n	800328c <_malloc_r+0x14>
 80032f8:	230c      	movs	r3, #12
 80032fa:	602b      	str	r3, [r5, #0]
 80032fc:	2000      	movs	r0, #0
 80032fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003300:	6821      	ldr	r1, [r4, #0]
 8003302:	1bc9      	subs	r1, r1, r7
 8003304:	d420      	bmi.n	8003348 <_malloc_r+0xd0>
 8003306:	290b      	cmp	r1, #11
 8003308:	d90a      	bls.n	8003320 <_malloc_r+0xa8>
 800330a:	19e2      	adds	r2, r4, r7
 800330c:	6027      	str	r7, [r4, #0]
 800330e:	42a3      	cmp	r3, r4
 8003310:	d104      	bne.n	800331c <_malloc_r+0xa4>
 8003312:	6032      	str	r2, [r6, #0]
 8003314:	6863      	ldr	r3, [r4, #4]
 8003316:	6011      	str	r1, [r2, #0]
 8003318:	6053      	str	r3, [r2, #4]
 800331a:	e005      	b.n	8003328 <_malloc_r+0xb0>
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	e7f9      	b.n	8003314 <_malloc_r+0x9c>
 8003320:	6862      	ldr	r2, [r4, #4]
 8003322:	42a3      	cmp	r3, r4
 8003324:	d10e      	bne.n	8003344 <_malloc_r+0xcc>
 8003326:	6032      	str	r2, [r6, #0]
 8003328:	0028      	movs	r0, r5
 800332a:	f000 f82d 	bl	8003388 <__malloc_unlock>
 800332e:	0020      	movs	r0, r4
 8003330:	2207      	movs	r2, #7
 8003332:	300b      	adds	r0, #11
 8003334:	1d23      	adds	r3, r4, #4
 8003336:	4390      	bics	r0, r2
 8003338:	1ac2      	subs	r2, r0, r3
 800333a:	4298      	cmp	r0, r3
 800333c:	d0df      	beq.n	80032fe <_malloc_r+0x86>
 800333e:	1a1b      	subs	r3, r3, r0
 8003340:	50a3      	str	r3, [r4, r2]
 8003342:	e7dc      	b.n	80032fe <_malloc_r+0x86>
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	e7ef      	b.n	8003328 <_malloc_r+0xb0>
 8003348:	0023      	movs	r3, r4
 800334a:	6864      	ldr	r4, [r4, #4]
 800334c:	e7a6      	b.n	800329c <_malloc_r+0x24>
 800334e:	9c00      	ldr	r4, [sp, #0]
 8003350:	6863      	ldr	r3, [r4, #4]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	e7ad      	b.n	80032b2 <_malloc_r+0x3a>
 8003356:	001a      	movs	r2, r3
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	42a3      	cmp	r3, r4
 800335c:	d1fb      	bne.n	8003356 <_malloc_r+0xde>
 800335e:	2300      	movs	r3, #0
 8003360:	e7da      	b.n	8003318 <_malloc_r+0xa0>
 8003362:	230c      	movs	r3, #12
 8003364:	0028      	movs	r0, r5
 8003366:	602b      	str	r3, [r5, #0]
 8003368:	f000 f80e 	bl	8003388 <__malloc_unlock>
 800336c:	e7c6      	b.n	80032fc <_malloc_r+0x84>
 800336e:	6007      	str	r7, [r0, #0]
 8003370:	e7da      	b.n	8003328 <_malloc_r+0xb0>
 8003372:	46c0      	nop			@ (mov r8, r8)
 8003374:	200003fc 	.word	0x200003fc

08003378 <__malloc_lock>:
 8003378:	b510      	push	{r4, lr}
 800337a:	4802      	ldr	r0, [pc, #8]	@ (8003384 <__malloc_lock+0xc>)
 800337c:	f7ff ff0e 	bl	800319c <__retarget_lock_acquire_recursive>
 8003380:	bd10      	pop	{r4, pc}
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	200003f4 	.word	0x200003f4

08003388 <__malloc_unlock>:
 8003388:	b510      	push	{r4, lr}
 800338a:	4802      	ldr	r0, [pc, #8]	@ (8003394 <__malloc_unlock+0xc>)
 800338c:	f7ff ff07 	bl	800319e <__retarget_lock_release_recursive>
 8003390:	bd10      	pop	{r4, pc}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	200003f4 	.word	0x200003f4

08003398 <__ssputs_r>:
 8003398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339a:	688e      	ldr	r6, [r1, #8]
 800339c:	b085      	sub	sp, #20
 800339e:	001f      	movs	r7, r3
 80033a0:	000c      	movs	r4, r1
 80033a2:	680b      	ldr	r3, [r1, #0]
 80033a4:	9002      	str	r0, [sp, #8]
 80033a6:	9203      	str	r2, [sp, #12]
 80033a8:	42be      	cmp	r6, r7
 80033aa:	d830      	bhi.n	800340e <__ssputs_r+0x76>
 80033ac:	210c      	movs	r1, #12
 80033ae:	5e62      	ldrsh	r2, [r4, r1]
 80033b0:	2190      	movs	r1, #144	@ 0x90
 80033b2:	00c9      	lsls	r1, r1, #3
 80033b4:	420a      	tst	r2, r1
 80033b6:	d028      	beq.n	800340a <__ssputs_r+0x72>
 80033b8:	2003      	movs	r0, #3
 80033ba:	6921      	ldr	r1, [r4, #16]
 80033bc:	1a5b      	subs	r3, r3, r1
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	6963      	ldr	r3, [r4, #20]
 80033c2:	4343      	muls	r3, r0
 80033c4:	9801      	ldr	r0, [sp, #4]
 80033c6:	0fdd      	lsrs	r5, r3, #31
 80033c8:	18ed      	adds	r5, r5, r3
 80033ca:	1c7b      	adds	r3, r7, #1
 80033cc:	181b      	adds	r3, r3, r0
 80033ce:	106d      	asrs	r5, r5, #1
 80033d0:	42ab      	cmp	r3, r5
 80033d2:	d900      	bls.n	80033d6 <__ssputs_r+0x3e>
 80033d4:	001d      	movs	r5, r3
 80033d6:	0552      	lsls	r2, r2, #21
 80033d8:	d528      	bpl.n	800342c <__ssputs_r+0x94>
 80033da:	0029      	movs	r1, r5
 80033dc:	9802      	ldr	r0, [sp, #8]
 80033de:	f7ff ff4b 	bl	8003278 <_malloc_r>
 80033e2:	1e06      	subs	r6, r0, #0
 80033e4:	d02c      	beq.n	8003440 <__ssputs_r+0xa8>
 80033e6:	9a01      	ldr	r2, [sp, #4]
 80033e8:	6921      	ldr	r1, [r4, #16]
 80033ea:	f000 fade 	bl	80039aa <memcpy>
 80033ee:	89a2      	ldrh	r2, [r4, #12]
 80033f0:	4b18      	ldr	r3, [pc, #96]	@ (8003454 <__ssputs_r+0xbc>)
 80033f2:	401a      	ands	r2, r3
 80033f4:	2380      	movs	r3, #128	@ 0x80
 80033f6:	4313      	orrs	r3, r2
 80033f8:	81a3      	strh	r3, [r4, #12]
 80033fa:	9b01      	ldr	r3, [sp, #4]
 80033fc:	6126      	str	r6, [r4, #16]
 80033fe:	18f6      	adds	r6, r6, r3
 8003400:	6026      	str	r6, [r4, #0]
 8003402:	003e      	movs	r6, r7
 8003404:	6165      	str	r5, [r4, #20]
 8003406:	1aed      	subs	r5, r5, r3
 8003408:	60a5      	str	r5, [r4, #8]
 800340a:	42be      	cmp	r6, r7
 800340c:	d900      	bls.n	8003410 <__ssputs_r+0x78>
 800340e:	003e      	movs	r6, r7
 8003410:	0032      	movs	r2, r6
 8003412:	9903      	ldr	r1, [sp, #12]
 8003414:	6820      	ldr	r0, [r4, #0]
 8003416:	f000 fa99 	bl	800394c <memmove>
 800341a:	2000      	movs	r0, #0
 800341c:	68a3      	ldr	r3, [r4, #8]
 800341e:	1b9b      	subs	r3, r3, r6
 8003420:	60a3      	str	r3, [r4, #8]
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	199b      	adds	r3, r3, r6
 8003426:	6023      	str	r3, [r4, #0]
 8003428:	b005      	add	sp, #20
 800342a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800342c:	002a      	movs	r2, r5
 800342e:	9802      	ldr	r0, [sp, #8]
 8003430:	f000 fac4 	bl	80039bc <_realloc_r>
 8003434:	1e06      	subs	r6, r0, #0
 8003436:	d1e0      	bne.n	80033fa <__ssputs_r+0x62>
 8003438:	6921      	ldr	r1, [r4, #16]
 800343a:	9802      	ldr	r0, [sp, #8]
 800343c:	f7ff feb0 	bl	80031a0 <_free_r>
 8003440:	230c      	movs	r3, #12
 8003442:	2001      	movs	r0, #1
 8003444:	9a02      	ldr	r2, [sp, #8]
 8003446:	4240      	negs	r0, r0
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	89a2      	ldrh	r2, [r4, #12]
 800344c:	3334      	adds	r3, #52	@ 0x34
 800344e:	4313      	orrs	r3, r2
 8003450:	81a3      	strh	r3, [r4, #12]
 8003452:	e7e9      	b.n	8003428 <__ssputs_r+0x90>
 8003454:	fffffb7f 	.word	0xfffffb7f

08003458 <_svfiprintf_r>:
 8003458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345a:	b0a1      	sub	sp, #132	@ 0x84
 800345c:	9003      	str	r0, [sp, #12]
 800345e:	001d      	movs	r5, r3
 8003460:	898b      	ldrh	r3, [r1, #12]
 8003462:	000f      	movs	r7, r1
 8003464:	0016      	movs	r6, r2
 8003466:	061b      	lsls	r3, r3, #24
 8003468:	d511      	bpl.n	800348e <_svfiprintf_r+0x36>
 800346a:	690b      	ldr	r3, [r1, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10e      	bne.n	800348e <_svfiprintf_r+0x36>
 8003470:	2140      	movs	r1, #64	@ 0x40
 8003472:	f7ff ff01 	bl	8003278 <_malloc_r>
 8003476:	6038      	str	r0, [r7, #0]
 8003478:	6138      	str	r0, [r7, #16]
 800347a:	2800      	cmp	r0, #0
 800347c:	d105      	bne.n	800348a <_svfiprintf_r+0x32>
 800347e:	230c      	movs	r3, #12
 8003480:	9a03      	ldr	r2, [sp, #12]
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	2001      	movs	r0, #1
 8003486:	4240      	negs	r0, r0
 8003488:	e0cf      	b.n	800362a <_svfiprintf_r+0x1d2>
 800348a:	2340      	movs	r3, #64	@ 0x40
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	2300      	movs	r3, #0
 8003490:	ac08      	add	r4, sp, #32
 8003492:	6163      	str	r3, [r4, #20]
 8003494:	3320      	adds	r3, #32
 8003496:	7663      	strb	r3, [r4, #25]
 8003498:	3310      	adds	r3, #16
 800349a:	76a3      	strb	r3, [r4, #26]
 800349c:	9507      	str	r5, [sp, #28]
 800349e:	0035      	movs	r5, r6
 80034a0:	782b      	ldrb	r3, [r5, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <_svfiprintf_r+0x52>
 80034a6:	2b25      	cmp	r3, #37	@ 0x25
 80034a8:	d148      	bne.n	800353c <_svfiprintf_r+0xe4>
 80034aa:	1bab      	subs	r3, r5, r6
 80034ac:	9305      	str	r3, [sp, #20]
 80034ae:	42b5      	cmp	r5, r6
 80034b0:	d00b      	beq.n	80034ca <_svfiprintf_r+0x72>
 80034b2:	0032      	movs	r2, r6
 80034b4:	0039      	movs	r1, r7
 80034b6:	9803      	ldr	r0, [sp, #12]
 80034b8:	f7ff ff6e 	bl	8003398 <__ssputs_r>
 80034bc:	3001      	adds	r0, #1
 80034be:	d100      	bne.n	80034c2 <_svfiprintf_r+0x6a>
 80034c0:	e0ae      	b.n	8003620 <_svfiprintf_r+0x1c8>
 80034c2:	6963      	ldr	r3, [r4, #20]
 80034c4:	9a05      	ldr	r2, [sp, #20]
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	6163      	str	r3, [r4, #20]
 80034ca:	782b      	ldrb	r3, [r5, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d100      	bne.n	80034d2 <_svfiprintf_r+0x7a>
 80034d0:	e0a6      	b.n	8003620 <_svfiprintf_r+0x1c8>
 80034d2:	2201      	movs	r2, #1
 80034d4:	2300      	movs	r3, #0
 80034d6:	4252      	negs	r2, r2
 80034d8:	6062      	str	r2, [r4, #4]
 80034da:	a904      	add	r1, sp, #16
 80034dc:	3254      	adds	r2, #84	@ 0x54
 80034de:	1852      	adds	r2, r2, r1
 80034e0:	1c6e      	adds	r6, r5, #1
 80034e2:	6023      	str	r3, [r4, #0]
 80034e4:	60e3      	str	r3, [r4, #12]
 80034e6:	60a3      	str	r3, [r4, #8]
 80034e8:	7013      	strb	r3, [r2, #0]
 80034ea:	65a3      	str	r3, [r4, #88]	@ 0x58
 80034ec:	4b54      	ldr	r3, [pc, #336]	@ (8003640 <_svfiprintf_r+0x1e8>)
 80034ee:	2205      	movs	r2, #5
 80034f0:	0018      	movs	r0, r3
 80034f2:	7831      	ldrb	r1, [r6, #0]
 80034f4:	9305      	str	r3, [sp, #20]
 80034f6:	f000 fa4d 	bl	8003994 <memchr>
 80034fa:	1c75      	adds	r5, r6, #1
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d11f      	bne.n	8003540 <_svfiprintf_r+0xe8>
 8003500:	6822      	ldr	r2, [r4, #0]
 8003502:	06d3      	lsls	r3, r2, #27
 8003504:	d504      	bpl.n	8003510 <_svfiprintf_r+0xb8>
 8003506:	2353      	movs	r3, #83	@ 0x53
 8003508:	a904      	add	r1, sp, #16
 800350a:	185b      	adds	r3, r3, r1
 800350c:	2120      	movs	r1, #32
 800350e:	7019      	strb	r1, [r3, #0]
 8003510:	0713      	lsls	r3, r2, #28
 8003512:	d504      	bpl.n	800351e <_svfiprintf_r+0xc6>
 8003514:	2353      	movs	r3, #83	@ 0x53
 8003516:	a904      	add	r1, sp, #16
 8003518:	185b      	adds	r3, r3, r1
 800351a:	212b      	movs	r1, #43	@ 0x2b
 800351c:	7019      	strb	r1, [r3, #0]
 800351e:	7833      	ldrb	r3, [r6, #0]
 8003520:	2b2a      	cmp	r3, #42	@ 0x2a
 8003522:	d016      	beq.n	8003552 <_svfiprintf_r+0xfa>
 8003524:	0035      	movs	r5, r6
 8003526:	2100      	movs	r1, #0
 8003528:	200a      	movs	r0, #10
 800352a:	68e3      	ldr	r3, [r4, #12]
 800352c:	782a      	ldrb	r2, [r5, #0]
 800352e:	1c6e      	adds	r6, r5, #1
 8003530:	3a30      	subs	r2, #48	@ 0x30
 8003532:	2a09      	cmp	r2, #9
 8003534:	d950      	bls.n	80035d8 <_svfiprintf_r+0x180>
 8003536:	2900      	cmp	r1, #0
 8003538:	d111      	bne.n	800355e <_svfiprintf_r+0x106>
 800353a:	e017      	b.n	800356c <_svfiprintf_r+0x114>
 800353c:	3501      	adds	r5, #1
 800353e:	e7af      	b.n	80034a0 <_svfiprintf_r+0x48>
 8003540:	9b05      	ldr	r3, [sp, #20]
 8003542:	6822      	ldr	r2, [r4, #0]
 8003544:	1ac0      	subs	r0, r0, r3
 8003546:	2301      	movs	r3, #1
 8003548:	4083      	lsls	r3, r0
 800354a:	4313      	orrs	r3, r2
 800354c:	002e      	movs	r6, r5
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	e7cc      	b.n	80034ec <_svfiprintf_r+0x94>
 8003552:	9b07      	ldr	r3, [sp, #28]
 8003554:	1d19      	adds	r1, r3, #4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	9107      	str	r1, [sp, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	db01      	blt.n	8003562 <_svfiprintf_r+0x10a>
 800355e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003560:	e004      	b.n	800356c <_svfiprintf_r+0x114>
 8003562:	425b      	negs	r3, r3
 8003564:	60e3      	str	r3, [r4, #12]
 8003566:	2302      	movs	r3, #2
 8003568:	4313      	orrs	r3, r2
 800356a:	6023      	str	r3, [r4, #0]
 800356c:	782b      	ldrb	r3, [r5, #0]
 800356e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003570:	d10c      	bne.n	800358c <_svfiprintf_r+0x134>
 8003572:	786b      	ldrb	r3, [r5, #1]
 8003574:	2b2a      	cmp	r3, #42	@ 0x2a
 8003576:	d134      	bne.n	80035e2 <_svfiprintf_r+0x18a>
 8003578:	9b07      	ldr	r3, [sp, #28]
 800357a:	3502      	adds	r5, #2
 800357c:	1d1a      	adds	r2, r3, #4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	9207      	str	r2, [sp, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	da01      	bge.n	800358a <_svfiprintf_r+0x132>
 8003586:	2301      	movs	r3, #1
 8003588:	425b      	negs	r3, r3
 800358a:	9309      	str	r3, [sp, #36]	@ 0x24
 800358c:	4e2d      	ldr	r6, [pc, #180]	@ (8003644 <_svfiprintf_r+0x1ec>)
 800358e:	2203      	movs	r2, #3
 8003590:	0030      	movs	r0, r6
 8003592:	7829      	ldrb	r1, [r5, #0]
 8003594:	f000 f9fe 	bl	8003994 <memchr>
 8003598:	2800      	cmp	r0, #0
 800359a:	d006      	beq.n	80035aa <_svfiprintf_r+0x152>
 800359c:	2340      	movs	r3, #64	@ 0x40
 800359e:	1b80      	subs	r0, r0, r6
 80035a0:	4083      	lsls	r3, r0
 80035a2:	6822      	ldr	r2, [r4, #0]
 80035a4:	3501      	adds	r5, #1
 80035a6:	4313      	orrs	r3, r2
 80035a8:	6023      	str	r3, [r4, #0]
 80035aa:	7829      	ldrb	r1, [r5, #0]
 80035ac:	2206      	movs	r2, #6
 80035ae:	4826      	ldr	r0, [pc, #152]	@ (8003648 <_svfiprintf_r+0x1f0>)
 80035b0:	1c6e      	adds	r6, r5, #1
 80035b2:	7621      	strb	r1, [r4, #24]
 80035b4:	f000 f9ee 	bl	8003994 <memchr>
 80035b8:	2800      	cmp	r0, #0
 80035ba:	d038      	beq.n	800362e <_svfiprintf_r+0x1d6>
 80035bc:	4b23      	ldr	r3, [pc, #140]	@ (800364c <_svfiprintf_r+0x1f4>)
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d122      	bne.n	8003608 <_svfiprintf_r+0x1b0>
 80035c2:	2207      	movs	r2, #7
 80035c4:	9b07      	ldr	r3, [sp, #28]
 80035c6:	3307      	adds	r3, #7
 80035c8:	4393      	bics	r3, r2
 80035ca:	3308      	adds	r3, #8
 80035cc:	9307      	str	r3, [sp, #28]
 80035ce:	6963      	ldr	r3, [r4, #20]
 80035d0:	9a04      	ldr	r2, [sp, #16]
 80035d2:	189b      	adds	r3, r3, r2
 80035d4:	6163      	str	r3, [r4, #20]
 80035d6:	e762      	b.n	800349e <_svfiprintf_r+0x46>
 80035d8:	4343      	muls	r3, r0
 80035da:	0035      	movs	r5, r6
 80035dc:	2101      	movs	r1, #1
 80035de:	189b      	adds	r3, r3, r2
 80035e0:	e7a4      	b.n	800352c <_svfiprintf_r+0xd4>
 80035e2:	2300      	movs	r3, #0
 80035e4:	200a      	movs	r0, #10
 80035e6:	0019      	movs	r1, r3
 80035e8:	3501      	adds	r5, #1
 80035ea:	6063      	str	r3, [r4, #4]
 80035ec:	782a      	ldrb	r2, [r5, #0]
 80035ee:	1c6e      	adds	r6, r5, #1
 80035f0:	3a30      	subs	r2, #48	@ 0x30
 80035f2:	2a09      	cmp	r2, #9
 80035f4:	d903      	bls.n	80035fe <_svfiprintf_r+0x1a6>
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0c8      	beq.n	800358c <_svfiprintf_r+0x134>
 80035fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80035fc:	e7c6      	b.n	800358c <_svfiprintf_r+0x134>
 80035fe:	4341      	muls	r1, r0
 8003600:	0035      	movs	r5, r6
 8003602:	2301      	movs	r3, #1
 8003604:	1889      	adds	r1, r1, r2
 8003606:	e7f1      	b.n	80035ec <_svfiprintf_r+0x194>
 8003608:	aa07      	add	r2, sp, #28
 800360a:	9200      	str	r2, [sp, #0]
 800360c:	0021      	movs	r1, r4
 800360e:	003a      	movs	r2, r7
 8003610:	4b0f      	ldr	r3, [pc, #60]	@ (8003650 <_svfiprintf_r+0x1f8>)
 8003612:	9803      	ldr	r0, [sp, #12]
 8003614:	e000      	b.n	8003618 <_svfiprintf_r+0x1c0>
 8003616:	bf00      	nop
 8003618:	9004      	str	r0, [sp, #16]
 800361a:	9b04      	ldr	r3, [sp, #16]
 800361c:	3301      	adds	r3, #1
 800361e:	d1d6      	bne.n	80035ce <_svfiprintf_r+0x176>
 8003620:	89bb      	ldrh	r3, [r7, #12]
 8003622:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003624:	065b      	lsls	r3, r3, #25
 8003626:	d500      	bpl.n	800362a <_svfiprintf_r+0x1d2>
 8003628:	e72c      	b.n	8003484 <_svfiprintf_r+0x2c>
 800362a:	b021      	add	sp, #132	@ 0x84
 800362c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800362e:	aa07      	add	r2, sp, #28
 8003630:	9200      	str	r2, [sp, #0]
 8003632:	0021      	movs	r1, r4
 8003634:	003a      	movs	r2, r7
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <_svfiprintf_r+0x1f8>)
 8003638:	9803      	ldr	r0, [sp, #12]
 800363a:	f000 f87b 	bl	8003734 <_printf_i>
 800363e:	e7eb      	b.n	8003618 <_svfiprintf_r+0x1c0>
 8003640:	08003af1 	.word	0x08003af1
 8003644:	08003af7 	.word	0x08003af7
 8003648:	08003afb 	.word	0x08003afb
 800364c:	00000000 	.word	0x00000000
 8003650:	08003399 	.word	0x08003399

08003654 <_printf_common>:
 8003654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003656:	0016      	movs	r6, r2
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	688a      	ldr	r2, [r1, #8]
 800365c:	690b      	ldr	r3, [r1, #16]
 800365e:	000c      	movs	r4, r1
 8003660:	9000      	str	r0, [sp, #0]
 8003662:	4293      	cmp	r3, r2
 8003664:	da00      	bge.n	8003668 <_printf_common+0x14>
 8003666:	0013      	movs	r3, r2
 8003668:	0022      	movs	r2, r4
 800366a:	6033      	str	r3, [r6, #0]
 800366c:	3243      	adds	r2, #67	@ 0x43
 800366e:	7812      	ldrb	r2, [r2, #0]
 8003670:	2a00      	cmp	r2, #0
 8003672:	d001      	beq.n	8003678 <_printf_common+0x24>
 8003674:	3301      	adds	r3, #1
 8003676:	6033      	str	r3, [r6, #0]
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	069b      	lsls	r3, r3, #26
 800367c:	d502      	bpl.n	8003684 <_printf_common+0x30>
 800367e:	6833      	ldr	r3, [r6, #0]
 8003680:	3302      	adds	r3, #2
 8003682:	6033      	str	r3, [r6, #0]
 8003684:	6822      	ldr	r2, [r4, #0]
 8003686:	2306      	movs	r3, #6
 8003688:	0015      	movs	r5, r2
 800368a:	401d      	ands	r5, r3
 800368c:	421a      	tst	r2, r3
 800368e:	d027      	beq.n	80036e0 <_printf_common+0x8c>
 8003690:	0023      	movs	r3, r4
 8003692:	3343      	adds	r3, #67	@ 0x43
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	1e5a      	subs	r2, r3, #1
 8003698:	4193      	sbcs	r3, r2
 800369a:	6822      	ldr	r2, [r4, #0]
 800369c:	0692      	lsls	r2, r2, #26
 800369e:	d430      	bmi.n	8003702 <_printf_common+0xae>
 80036a0:	0022      	movs	r2, r4
 80036a2:	9901      	ldr	r1, [sp, #4]
 80036a4:	9800      	ldr	r0, [sp, #0]
 80036a6:	9d08      	ldr	r5, [sp, #32]
 80036a8:	3243      	adds	r2, #67	@ 0x43
 80036aa:	47a8      	blx	r5
 80036ac:	3001      	adds	r0, #1
 80036ae:	d025      	beq.n	80036fc <_printf_common+0xa8>
 80036b0:	2206      	movs	r2, #6
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	2500      	movs	r5, #0
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d105      	bne.n	80036c8 <_printf_common+0x74>
 80036bc:	6833      	ldr	r3, [r6, #0]
 80036be:	68e5      	ldr	r5, [r4, #12]
 80036c0:	1aed      	subs	r5, r5, r3
 80036c2:	43eb      	mvns	r3, r5
 80036c4:	17db      	asrs	r3, r3, #31
 80036c6:	401d      	ands	r5, r3
 80036c8:	68a3      	ldr	r3, [r4, #8]
 80036ca:	6922      	ldr	r2, [r4, #16]
 80036cc:	4293      	cmp	r3, r2
 80036ce:	dd01      	ble.n	80036d4 <_printf_common+0x80>
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	18ed      	adds	r5, r5, r3
 80036d4:	2600      	movs	r6, #0
 80036d6:	42b5      	cmp	r5, r6
 80036d8:	d120      	bne.n	800371c <_printf_common+0xc8>
 80036da:	2000      	movs	r0, #0
 80036dc:	e010      	b.n	8003700 <_printf_common+0xac>
 80036de:	3501      	adds	r5, #1
 80036e0:	68e3      	ldr	r3, [r4, #12]
 80036e2:	6832      	ldr	r2, [r6, #0]
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	42ab      	cmp	r3, r5
 80036e8:	ddd2      	ble.n	8003690 <_printf_common+0x3c>
 80036ea:	0022      	movs	r2, r4
 80036ec:	2301      	movs	r3, #1
 80036ee:	9901      	ldr	r1, [sp, #4]
 80036f0:	9800      	ldr	r0, [sp, #0]
 80036f2:	9f08      	ldr	r7, [sp, #32]
 80036f4:	3219      	adds	r2, #25
 80036f6:	47b8      	blx	r7
 80036f8:	3001      	adds	r0, #1
 80036fa:	d1f0      	bne.n	80036de <_printf_common+0x8a>
 80036fc:	2001      	movs	r0, #1
 80036fe:	4240      	negs	r0, r0
 8003700:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003702:	2030      	movs	r0, #48	@ 0x30
 8003704:	18e1      	adds	r1, r4, r3
 8003706:	3143      	adds	r1, #67	@ 0x43
 8003708:	7008      	strb	r0, [r1, #0]
 800370a:	0021      	movs	r1, r4
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	3145      	adds	r1, #69	@ 0x45
 8003710:	7809      	ldrb	r1, [r1, #0]
 8003712:	18a2      	adds	r2, r4, r2
 8003714:	3243      	adds	r2, #67	@ 0x43
 8003716:	3302      	adds	r3, #2
 8003718:	7011      	strb	r1, [r2, #0]
 800371a:	e7c1      	b.n	80036a0 <_printf_common+0x4c>
 800371c:	0022      	movs	r2, r4
 800371e:	2301      	movs	r3, #1
 8003720:	9901      	ldr	r1, [sp, #4]
 8003722:	9800      	ldr	r0, [sp, #0]
 8003724:	9f08      	ldr	r7, [sp, #32]
 8003726:	321a      	adds	r2, #26
 8003728:	47b8      	blx	r7
 800372a:	3001      	adds	r0, #1
 800372c:	d0e6      	beq.n	80036fc <_printf_common+0xa8>
 800372e:	3601      	adds	r6, #1
 8003730:	e7d1      	b.n	80036d6 <_printf_common+0x82>
	...

08003734 <_printf_i>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	b08b      	sub	sp, #44	@ 0x2c
 8003738:	9206      	str	r2, [sp, #24]
 800373a:	000a      	movs	r2, r1
 800373c:	3243      	adds	r2, #67	@ 0x43
 800373e:	9307      	str	r3, [sp, #28]
 8003740:	9005      	str	r0, [sp, #20]
 8003742:	9203      	str	r2, [sp, #12]
 8003744:	7e0a      	ldrb	r2, [r1, #24]
 8003746:	000c      	movs	r4, r1
 8003748:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800374a:	2a78      	cmp	r2, #120	@ 0x78
 800374c:	d809      	bhi.n	8003762 <_printf_i+0x2e>
 800374e:	2a62      	cmp	r2, #98	@ 0x62
 8003750:	d80b      	bhi.n	800376a <_printf_i+0x36>
 8003752:	2a00      	cmp	r2, #0
 8003754:	d100      	bne.n	8003758 <_printf_i+0x24>
 8003756:	e0ba      	b.n	80038ce <_printf_i+0x19a>
 8003758:	497a      	ldr	r1, [pc, #488]	@ (8003944 <_printf_i+0x210>)
 800375a:	9104      	str	r1, [sp, #16]
 800375c:	2a58      	cmp	r2, #88	@ 0x58
 800375e:	d100      	bne.n	8003762 <_printf_i+0x2e>
 8003760:	e08e      	b.n	8003880 <_printf_i+0x14c>
 8003762:	0025      	movs	r5, r4
 8003764:	3542      	adds	r5, #66	@ 0x42
 8003766:	702a      	strb	r2, [r5, #0]
 8003768:	e022      	b.n	80037b0 <_printf_i+0x7c>
 800376a:	0010      	movs	r0, r2
 800376c:	3863      	subs	r0, #99	@ 0x63
 800376e:	2815      	cmp	r0, #21
 8003770:	d8f7      	bhi.n	8003762 <_printf_i+0x2e>
 8003772:	f7fc fcc9 	bl	8000108 <__gnu_thumb1_case_shi>
 8003776:	0016      	.short	0x0016
 8003778:	fff6001f 	.word	0xfff6001f
 800377c:	fff6fff6 	.word	0xfff6fff6
 8003780:	001ffff6 	.word	0x001ffff6
 8003784:	fff6fff6 	.word	0xfff6fff6
 8003788:	fff6fff6 	.word	0xfff6fff6
 800378c:	0036009f 	.word	0x0036009f
 8003790:	fff6007e 	.word	0xfff6007e
 8003794:	00b0fff6 	.word	0x00b0fff6
 8003798:	0036fff6 	.word	0x0036fff6
 800379c:	fff6fff6 	.word	0xfff6fff6
 80037a0:	0082      	.short	0x0082
 80037a2:	0025      	movs	r5, r4
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	3542      	adds	r5, #66	@ 0x42
 80037a8:	1d11      	adds	r1, r2, #4
 80037aa:	6019      	str	r1, [r3, #0]
 80037ac:	6813      	ldr	r3, [r2, #0]
 80037ae:	702b      	strb	r3, [r5, #0]
 80037b0:	2301      	movs	r3, #1
 80037b2:	e09e      	b.n	80038f2 <_printf_i+0x1be>
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	6809      	ldr	r1, [r1, #0]
 80037b8:	1d02      	adds	r2, r0, #4
 80037ba:	060d      	lsls	r5, r1, #24
 80037bc:	d50b      	bpl.n	80037d6 <_printf_i+0xa2>
 80037be:	6806      	ldr	r6, [r0, #0]
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	2e00      	cmp	r6, #0
 80037c4:	da03      	bge.n	80037ce <_printf_i+0x9a>
 80037c6:	232d      	movs	r3, #45	@ 0x2d
 80037c8:	9a03      	ldr	r2, [sp, #12]
 80037ca:	4276      	negs	r6, r6
 80037cc:	7013      	strb	r3, [r2, #0]
 80037ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003944 <_printf_i+0x210>)
 80037d0:	270a      	movs	r7, #10
 80037d2:	9304      	str	r3, [sp, #16]
 80037d4:	e018      	b.n	8003808 <_printf_i+0xd4>
 80037d6:	6806      	ldr	r6, [r0, #0]
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	0649      	lsls	r1, r1, #25
 80037dc:	d5f1      	bpl.n	80037c2 <_printf_i+0x8e>
 80037de:	b236      	sxth	r6, r6
 80037e0:	e7ef      	b.n	80037c2 <_printf_i+0x8e>
 80037e2:	6808      	ldr	r0, [r1, #0]
 80037e4:	6819      	ldr	r1, [r3, #0]
 80037e6:	c940      	ldmia	r1!, {r6}
 80037e8:	0605      	lsls	r5, r0, #24
 80037ea:	d402      	bmi.n	80037f2 <_printf_i+0xbe>
 80037ec:	0640      	lsls	r0, r0, #25
 80037ee:	d500      	bpl.n	80037f2 <_printf_i+0xbe>
 80037f0:	b2b6      	uxth	r6, r6
 80037f2:	6019      	str	r1, [r3, #0]
 80037f4:	4b53      	ldr	r3, [pc, #332]	@ (8003944 <_printf_i+0x210>)
 80037f6:	270a      	movs	r7, #10
 80037f8:	9304      	str	r3, [sp, #16]
 80037fa:	2a6f      	cmp	r2, #111	@ 0x6f
 80037fc:	d100      	bne.n	8003800 <_printf_i+0xcc>
 80037fe:	3f02      	subs	r7, #2
 8003800:	0023      	movs	r3, r4
 8003802:	2200      	movs	r2, #0
 8003804:	3343      	adds	r3, #67	@ 0x43
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	6863      	ldr	r3, [r4, #4]
 800380a:	60a3      	str	r3, [r4, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db06      	blt.n	800381e <_printf_i+0xea>
 8003810:	2104      	movs	r1, #4
 8003812:	6822      	ldr	r2, [r4, #0]
 8003814:	9d03      	ldr	r5, [sp, #12]
 8003816:	438a      	bics	r2, r1
 8003818:	6022      	str	r2, [r4, #0]
 800381a:	4333      	orrs	r3, r6
 800381c:	d00c      	beq.n	8003838 <_printf_i+0x104>
 800381e:	9d03      	ldr	r5, [sp, #12]
 8003820:	0030      	movs	r0, r6
 8003822:	0039      	movs	r1, r7
 8003824:	f7fc fd00 	bl	8000228 <__aeabi_uidivmod>
 8003828:	9b04      	ldr	r3, [sp, #16]
 800382a:	3d01      	subs	r5, #1
 800382c:	5c5b      	ldrb	r3, [r3, r1]
 800382e:	702b      	strb	r3, [r5, #0]
 8003830:	0033      	movs	r3, r6
 8003832:	0006      	movs	r6, r0
 8003834:	429f      	cmp	r7, r3
 8003836:	d9f3      	bls.n	8003820 <_printf_i+0xec>
 8003838:	2f08      	cmp	r7, #8
 800383a:	d109      	bne.n	8003850 <_printf_i+0x11c>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	07db      	lsls	r3, r3, #31
 8003840:	d506      	bpl.n	8003850 <_printf_i+0x11c>
 8003842:	6862      	ldr	r2, [r4, #4]
 8003844:	6923      	ldr	r3, [r4, #16]
 8003846:	429a      	cmp	r2, r3
 8003848:	dc02      	bgt.n	8003850 <_printf_i+0x11c>
 800384a:	2330      	movs	r3, #48	@ 0x30
 800384c:	3d01      	subs	r5, #1
 800384e:	702b      	strb	r3, [r5, #0]
 8003850:	9b03      	ldr	r3, [sp, #12]
 8003852:	1b5b      	subs	r3, r3, r5
 8003854:	6123      	str	r3, [r4, #16]
 8003856:	9b07      	ldr	r3, [sp, #28]
 8003858:	0021      	movs	r1, r4
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	9805      	ldr	r0, [sp, #20]
 800385e:	9b06      	ldr	r3, [sp, #24]
 8003860:	aa09      	add	r2, sp, #36	@ 0x24
 8003862:	f7ff fef7 	bl	8003654 <_printf_common>
 8003866:	3001      	adds	r0, #1
 8003868:	d148      	bne.n	80038fc <_printf_i+0x1c8>
 800386a:	2001      	movs	r0, #1
 800386c:	4240      	negs	r0, r0
 800386e:	b00b      	add	sp, #44	@ 0x2c
 8003870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003872:	2220      	movs	r2, #32
 8003874:	6809      	ldr	r1, [r1, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	6022      	str	r2, [r4, #0]
 800387a:	2278      	movs	r2, #120	@ 0x78
 800387c:	4932      	ldr	r1, [pc, #200]	@ (8003948 <_printf_i+0x214>)
 800387e:	9104      	str	r1, [sp, #16]
 8003880:	0021      	movs	r1, r4
 8003882:	3145      	adds	r1, #69	@ 0x45
 8003884:	700a      	strb	r2, [r1, #0]
 8003886:	6819      	ldr	r1, [r3, #0]
 8003888:	6822      	ldr	r2, [r4, #0]
 800388a:	c940      	ldmia	r1!, {r6}
 800388c:	0610      	lsls	r0, r2, #24
 800388e:	d402      	bmi.n	8003896 <_printf_i+0x162>
 8003890:	0650      	lsls	r0, r2, #25
 8003892:	d500      	bpl.n	8003896 <_printf_i+0x162>
 8003894:	b2b6      	uxth	r6, r6
 8003896:	6019      	str	r1, [r3, #0]
 8003898:	07d3      	lsls	r3, r2, #31
 800389a:	d502      	bpl.n	80038a2 <_printf_i+0x16e>
 800389c:	2320      	movs	r3, #32
 800389e:	4313      	orrs	r3, r2
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	2e00      	cmp	r6, #0
 80038a4:	d001      	beq.n	80038aa <_printf_i+0x176>
 80038a6:	2710      	movs	r7, #16
 80038a8:	e7aa      	b.n	8003800 <_printf_i+0xcc>
 80038aa:	2220      	movs	r2, #32
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	4393      	bics	r3, r2
 80038b0:	6023      	str	r3, [r4, #0]
 80038b2:	e7f8      	b.n	80038a6 <_printf_i+0x172>
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	680d      	ldr	r5, [r1, #0]
 80038b8:	1d10      	adds	r0, r2, #4
 80038ba:	6949      	ldr	r1, [r1, #20]
 80038bc:	6018      	str	r0, [r3, #0]
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	062e      	lsls	r6, r5, #24
 80038c2:	d501      	bpl.n	80038c8 <_printf_i+0x194>
 80038c4:	6019      	str	r1, [r3, #0]
 80038c6:	e002      	b.n	80038ce <_printf_i+0x19a>
 80038c8:	066d      	lsls	r5, r5, #25
 80038ca:	d5fb      	bpl.n	80038c4 <_printf_i+0x190>
 80038cc:	8019      	strh	r1, [r3, #0]
 80038ce:	2300      	movs	r3, #0
 80038d0:	9d03      	ldr	r5, [sp, #12]
 80038d2:	6123      	str	r3, [r4, #16]
 80038d4:	e7bf      	b.n	8003856 <_printf_i+0x122>
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	1d11      	adds	r1, r2, #4
 80038da:	6019      	str	r1, [r3, #0]
 80038dc:	6815      	ldr	r5, [r2, #0]
 80038de:	2100      	movs	r1, #0
 80038e0:	0028      	movs	r0, r5
 80038e2:	6862      	ldr	r2, [r4, #4]
 80038e4:	f000 f856 	bl	8003994 <memchr>
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d001      	beq.n	80038f0 <_printf_i+0x1bc>
 80038ec:	1b40      	subs	r0, r0, r5
 80038ee:	6060      	str	r0, [r4, #4]
 80038f0:	6863      	ldr	r3, [r4, #4]
 80038f2:	6123      	str	r3, [r4, #16]
 80038f4:	2300      	movs	r3, #0
 80038f6:	9a03      	ldr	r2, [sp, #12]
 80038f8:	7013      	strb	r3, [r2, #0]
 80038fa:	e7ac      	b.n	8003856 <_printf_i+0x122>
 80038fc:	002a      	movs	r2, r5
 80038fe:	6923      	ldr	r3, [r4, #16]
 8003900:	9906      	ldr	r1, [sp, #24]
 8003902:	9805      	ldr	r0, [sp, #20]
 8003904:	9d07      	ldr	r5, [sp, #28]
 8003906:	47a8      	blx	r5
 8003908:	3001      	adds	r0, #1
 800390a:	d0ae      	beq.n	800386a <_printf_i+0x136>
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	079b      	lsls	r3, r3, #30
 8003910:	d415      	bmi.n	800393e <_printf_i+0x20a>
 8003912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003914:	68e0      	ldr	r0, [r4, #12]
 8003916:	4298      	cmp	r0, r3
 8003918:	daa9      	bge.n	800386e <_printf_i+0x13a>
 800391a:	0018      	movs	r0, r3
 800391c:	e7a7      	b.n	800386e <_printf_i+0x13a>
 800391e:	0022      	movs	r2, r4
 8003920:	2301      	movs	r3, #1
 8003922:	9906      	ldr	r1, [sp, #24]
 8003924:	9805      	ldr	r0, [sp, #20]
 8003926:	9e07      	ldr	r6, [sp, #28]
 8003928:	3219      	adds	r2, #25
 800392a:	47b0      	blx	r6
 800392c:	3001      	adds	r0, #1
 800392e:	d09c      	beq.n	800386a <_printf_i+0x136>
 8003930:	3501      	adds	r5, #1
 8003932:	68e3      	ldr	r3, [r4, #12]
 8003934:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	42ab      	cmp	r3, r5
 800393a:	dcf0      	bgt.n	800391e <_printf_i+0x1ea>
 800393c:	e7e9      	b.n	8003912 <_printf_i+0x1de>
 800393e:	2500      	movs	r5, #0
 8003940:	e7f7      	b.n	8003932 <_printf_i+0x1fe>
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	08003b02 	.word	0x08003b02
 8003948:	08003b13 	.word	0x08003b13

0800394c <memmove>:
 800394c:	b510      	push	{r4, lr}
 800394e:	4288      	cmp	r0, r1
 8003950:	d902      	bls.n	8003958 <memmove+0xc>
 8003952:	188b      	adds	r3, r1, r2
 8003954:	4298      	cmp	r0, r3
 8003956:	d308      	bcc.n	800396a <memmove+0x1e>
 8003958:	2300      	movs	r3, #0
 800395a:	429a      	cmp	r2, r3
 800395c:	d007      	beq.n	800396e <memmove+0x22>
 800395e:	5ccc      	ldrb	r4, [r1, r3]
 8003960:	54c4      	strb	r4, [r0, r3]
 8003962:	3301      	adds	r3, #1
 8003964:	e7f9      	b.n	800395a <memmove+0xe>
 8003966:	5c8b      	ldrb	r3, [r1, r2]
 8003968:	5483      	strb	r3, [r0, r2]
 800396a:	3a01      	subs	r2, #1
 800396c:	d2fb      	bcs.n	8003966 <memmove+0x1a>
 800396e:	bd10      	pop	{r4, pc}

08003970 <_sbrk_r>:
 8003970:	2300      	movs	r3, #0
 8003972:	b570      	push	{r4, r5, r6, lr}
 8003974:	4d06      	ldr	r5, [pc, #24]	@ (8003990 <_sbrk_r+0x20>)
 8003976:	0004      	movs	r4, r0
 8003978:	0008      	movs	r0, r1
 800397a:	602b      	str	r3, [r5, #0]
 800397c:	f7fd fcf4 	bl	8001368 <_sbrk>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d103      	bne.n	800398c <_sbrk_r+0x1c>
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d000      	beq.n	800398c <_sbrk_r+0x1c>
 800398a:	6023      	str	r3, [r4, #0]
 800398c:	bd70      	pop	{r4, r5, r6, pc}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	200003f0 	.word	0x200003f0

08003994 <memchr>:
 8003994:	b2c9      	uxtb	r1, r1
 8003996:	1882      	adds	r2, r0, r2
 8003998:	4290      	cmp	r0, r2
 800399a:	d101      	bne.n	80039a0 <memchr+0xc>
 800399c:	2000      	movs	r0, #0
 800399e:	4770      	bx	lr
 80039a0:	7803      	ldrb	r3, [r0, #0]
 80039a2:	428b      	cmp	r3, r1
 80039a4:	d0fb      	beq.n	800399e <memchr+0xa>
 80039a6:	3001      	adds	r0, #1
 80039a8:	e7f6      	b.n	8003998 <memchr+0x4>

080039aa <memcpy>:
 80039aa:	2300      	movs	r3, #0
 80039ac:	b510      	push	{r4, lr}
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d100      	bne.n	80039b4 <memcpy+0xa>
 80039b2:	bd10      	pop	{r4, pc}
 80039b4:	5ccc      	ldrb	r4, [r1, r3]
 80039b6:	54c4      	strb	r4, [r0, r3]
 80039b8:	3301      	adds	r3, #1
 80039ba:	e7f8      	b.n	80039ae <memcpy+0x4>

080039bc <_realloc_r>:
 80039bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039be:	0006      	movs	r6, r0
 80039c0:	000c      	movs	r4, r1
 80039c2:	0015      	movs	r5, r2
 80039c4:	2900      	cmp	r1, #0
 80039c6:	d105      	bne.n	80039d4 <_realloc_r+0x18>
 80039c8:	0011      	movs	r1, r2
 80039ca:	f7ff fc55 	bl	8003278 <_malloc_r>
 80039ce:	0004      	movs	r4, r0
 80039d0:	0020      	movs	r0, r4
 80039d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039d4:	2a00      	cmp	r2, #0
 80039d6:	d103      	bne.n	80039e0 <_realloc_r+0x24>
 80039d8:	f7ff fbe2 	bl	80031a0 <_free_r>
 80039dc:	002c      	movs	r4, r5
 80039de:	e7f7      	b.n	80039d0 <_realloc_r+0x14>
 80039e0:	f000 f81c 	bl	8003a1c <_malloc_usable_size_r>
 80039e4:	0007      	movs	r7, r0
 80039e6:	4285      	cmp	r5, r0
 80039e8:	d802      	bhi.n	80039f0 <_realloc_r+0x34>
 80039ea:	0843      	lsrs	r3, r0, #1
 80039ec:	42ab      	cmp	r3, r5
 80039ee:	d3ef      	bcc.n	80039d0 <_realloc_r+0x14>
 80039f0:	0029      	movs	r1, r5
 80039f2:	0030      	movs	r0, r6
 80039f4:	f7ff fc40 	bl	8003278 <_malloc_r>
 80039f8:	9001      	str	r0, [sp, #4]
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d101      	bne.n	8003a02 <_realloc_r+0x46>
 80039fe:	9c01      	ldr	r4, [sp, #4]
 8003a00:	e7e6      	b.n	80039d0 <_realloc_r+0x14>
 8003a02:	002a      	movs	r2, r5
 8003a04:	42bd      	cmp	r5, r7
 8003a06:	d900      	bls.n	8003a0a <_realloc_r+0x4e>
 8003a08:	003a      	movs	r2, r7
 8003a0a:	0021      	movs	r1, r4
 8003a0c:	9801      	ldr	r0, [sp, #4]
 8003a0e:	f7ff ffcc 	bl	80039aa <memcpy>
 8003a12:	0021      	movs	r1, r4
 8003a14:	0030      	movs	r0, r6
 8003a16:	f7ff fbc3 	bl	80031a0 <_free_r>
 8003a1a:	e7f0      	b.n	80039fe <_realloc_r+0x42>

08003a1c <_malloc_usable_size_r>:
 8003a1c:	1f0b      	subs	r3, r1, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	1f18      	subs	r0, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da01      	bge.n	8003a2a <_malloc_usable_size_r+0xe>
 8003a26:	580b      	ldr	r3, [r1, r0]
 8003a28:	18c0      	adds	r0, r0, r3
 8003a2a:	4770      	bx	lr

08003a2c <_init>:
 8003a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a32:	bc08      	pop	{r3}
 8003a34:	469e      	mov	lr, r3
 8003a36:	4770      	bx	lr

08003a38 <_fini>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	46c0      	nop			@ (mov r8, r8)
 8003a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3e:	bc08      	pop	{r3}
 8003a40:	469e      	mov	lr, r3
 8003a42:	4770      	bx	lr
