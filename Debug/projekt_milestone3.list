
projekt_milestone3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004584  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08004724  08004724  00005724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e0  080048e0  0000612c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080048e0  080048e0  000058e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048e8  080048e8  0000612c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e8  080048e8  000058e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048ec  080048ec  000058ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000012c  20000000  080048f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  2000012c  08004a1c  0000612c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08004a1c  00006528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000612c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091cb  00000000  00000000  0000615c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188b  00000000  00000000  0000f327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00010bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000804  00000000  00000000  00011620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164e1  00000000  00000000  00011e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b827  00000000  00000000  00028305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c670  00000000  00000000  00033b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c019c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff4  00000000  00000000  000c01e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c31d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000012c 	.word	0x2000012c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800470c 	.word	0x0800470c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000130 	.word	0x20000130
 80001dc:	0800470c 	.word	0x0800470c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <LCD_EnablePulse>:
#include "stm32f4xx_hal.h"
#include "string.h"
#include <stdint.h>


static void LCD_EnablePulse(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005b6:	4808      	ldr	r0, [pc, #32]	@ (80005d8 <LCD_EnablePulse+0x2c>)
 80005b8:	f002 f8b6 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80005bc:	2001      	movs	r0, #1
 80005be:	f001 fdaf 	bl	8002120 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c8:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <LCD_EnablePulse+0x2c>)
 80005ca:	f002 f8ad 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f001 fda6 	bl	8002120 <HAL_Delay>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40020400 	.word	0x40020400

080005dc <LCD_Write8Bits>:

static void LCD_Write8Bits(uint8_t data) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	461a      	mov	r2, r3
 80005f0:	2101      	movs	r1, #1
 80005f2:	482b      	ldr	r0, [pc, #172]	@ (80006a0 <LCD_Write8Bits+0xc4>)
 80005f4:	f002 f898 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	105b      	asrs	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	461a      	mov	r2, r3
 8000606:	2102      	movs	r1, #2
 8000608:	4825      	ldr	r0, [pc, #148]	@ (80006a0 <LCD_Write8Bits+0xc4>)
 800060a:	f002 f88d 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	109b      	asrs	r3, r3, #2
 8000612:	b2db      	uxtb	r3, r3
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	2104      	movs	r1, #4
 800061e:	4820      	ldr	r0, [pc, #128]	@ (80006a0 <LCD_Write8Bits+0xc4>)
 8000620:	f002 f882 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	10db      	asrs	r3, r3, #3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	b2db      	uxtb	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	2108      	movs	r1, #8
 8000634:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <LCD_Write8Bits+0xc4>)
 8000636:	f002 f877 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	111b      	asrs	r3, r3, #4
 800063e:	b2db      	uxtb	r3, r3
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800064c:	4815      	ldr	r0, [pc, #84]	@ (80006a4 <LCD_Write8Bits+0xc8>)
 800064e:	f002 f86b 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	115b      	asrs	r3, r3, #5
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	461a      	mov	r2, r3
 8000660:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000664:	480f      	ldr	r0, [pc, #60]	@ (80006a4 <LCD_Write8Bits+0xc8>)
 8000666:	f002 f85f 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	119b      	asrs	r3, r3, #6
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	461a      	mov	r2, r3
 8000678:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800067c:	4809      	ldr	r0, [pc, #36]	@ (80006a4 <LCD_Write8Bits+0xc8>)
 800067e:	f002 f853 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	09db      	lsrs	r3, r3, #7
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <LCD_Write8Bits+0xc8>)
 8000690:	f002 f84a 	bl	8002728 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8000694:	f7ff ff8a 	bl	80005ac <LCD_EnablePulse>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40020800 	.word	0x40020800
 80006a4:	40020000 	.word	0x40020000

080006a8 <LCD_Send>:

static void LCD_Send(uint8_t data, uint8_t rs) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	460a      	mov	r2, r1
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	4613      	mov	r3, r2
 80006b6:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, rs ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	bf14      	ite	ne
 80006be:	2301      	movne	r3, #1
 80006c0:	2300      	moveq	r3, #0
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <LCD_Send+0x38>)
 80006cc:	f002 f82c 	bl	8002728 <HAL_GPIO_WritePin>
    LCD_Write8Bits(data);
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff82 	bl	80005dc <LCD_Write8Bits>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40020400 	.word	0x40020400

080006e4 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, 0);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ffd8 	bl	80006a8 <LCD_Send>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, 1);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2101      	movs	r1, #1
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffca 	bl	80006a8 <LCD_Send>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <LCD_Clear>:

void LCD_Clear(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff ffdf 	bl	80006e4 <LCD_SendCommand>
    HAL_Delay(2);
 8000726:	2002      	movs	r0, #2
 8000728:	f001 fcfa 	bl	8002120 <HAL_Delay>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	460a      	mov	r2, r1
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	4613      	mov	r3, r2
 800073e:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0) ? 0x00 : 0x40;
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d101      	bne.n	800074a <LCD_SetCursor+0x1a>
 8000746:	2300      	movs	r3, #0
 8000748:	e000      	b.n	800074c <LCD_SetCursor+0x1c>
 800074a:	2340      	movs	r3, #64	@ 0x40
 800074c:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(0x80 | (addr + col));
 800074e:	7bfa      	ldrb	r2, [r7, #15]
 8000750:	79bb      	ldrb	r3, [r7, #6]
 8000752:	4413      	add	r3, r2
 8000754:	b2db      	uxtb	r3, r3
 8000756:	b25b      	sxtb	r3, r3
 8000758:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800075c:	b25b      	sxtb	r3, r3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ffbf 	bl	80006e4 <LCD_SendCommand>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <LCD_SendString>:

void LCD_SendString(char* str) {
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000776:	e006      	b.n	8000786 <LCD_SendString+0x18>
        LCD_SendData(*str++);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffbd 	bl	8000700 <LCD_SendData>
    while (*str) {
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f4      	bne.n	8000778 <LCD_SendString+0xa>
    }
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <LCD_Init>:

void LCD_Init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 800079c:	2064      	movs	r0, #100	@ 0x64
 800079e:	f001 fcbf 	bl	8002120 <HAL_Delay>

    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007a8:	481b      	ldr	r0, [pc, #108]	@ (8000818 <LCD_Init+0x80>)
 80007aa:	f001 ffbd 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007b4:	4818      	ldr	r0, [pc, #96]	@ (8000818 <LCD_Init+0x80>)
 80007b6:	f001 ffb7 	bl	8002728 <HAL_GPIO_WritePin>
    LCD_Write8Bits(0x30);
 80007ba:	2030      	movs	r0, #48	@ 0x30
 80007bc:	f7ff ff0e 	bl	80005dc <LCD_Write8Bits>
     HAL_Delay(5);
 80007c0:	2005      	movs	r0, #5
 80007c2:	f001 fcad 	bl	8002120 <HAL_Delay>
     LCD_Write8Bits(0x30);
 80007c6:	2030      	movs	r0, #48	@ 0x30
 80007c8:	f7ff ff08 	bl	80005dc <LCD_Write8Bits>
     HAL_Delay(5);
 80007cc:	2005      	movs	r0, #5
 80007ce:	f001 fca7 	bl	8002120 <HAL_Delay>
     LCD_Write8Bits(0x30);
 80007d2:	2030      	movs	r0, #48	@ 0x30
 80007d4:	f7ff ff02 	bl	80005dc <LCD_Write8Bits>
     HAL_Delay(5);
 80007d8:	2005      	movs	r0, #5
 80007da:	f001 fca1 	bl	8002120 <HAL_Delay>
    LCD_SendCommand(0x38);
 80007de:	2038      	movs	r0, #56	@ 0x38
 80007e0:	f7ff ff80 	bl	80006e4 <LCD_SendCommand>
    HAL_Delay(5);
 80007e4:	2005      	movs	r0, #5
 80007e6:	f001 fc9b 	bl	8002120 <HAL_Delay>
    LCD_SendCommand(0x0F);
 80007ea:	200f      	movs	r0, #15
 80007ec:	f7ff ff7a 	bl	80006e4 <LCD_SendCommand>
    HAL_Delay(2);
 80007f0:	2002      	movs	r0, #2
 80007f2:	f001 fc95 	bl	8002120 <HAL_Delay>
    LCD_SendCommand(0x01);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff ff74 	bl	80006e4 <LCD_SendCommand>
    HAL_Delay(2);
 80007fc:	2002      	movs	r0, #2
 80007fe:	f001 fc8f 	bl	8002120 <HAL_Delay>
    LCD_SendCommand(0x02);
 8000802:	2002      	movs	r0, #2
 8000804:	f7ff ff6e 	bl	80006e4 <LCD_SendCommand>
    HAL_Delay(2);
 8000808:	2002      	movs	r0, #2
 800080a:	f001 fc89 	bl	8002120 <HAL_Delay>
    LCD_Clear();
 800080e:	f7ff ff85 	bl	800071c <LCD_Clear>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40020400 	.word	0x40020400

0800081c <LCD_CreateChar>:


//easter egg

void LCD_CreateChar(uint8_t location, uint8_t charmap[]) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
    location &= 0x7; // tylko 0-7
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	71fb      	strb	r3, [r7, #7]
    LCD_SendCommand(0x40 | (location << 3));
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	b25b      	sxtb	r3, r3
 8000838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800083c:	b25b      	sxtb	r3, r3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff4f 	bl	80006e4 <LCD_SendCommand>
    for (int i = 0; i < 8; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	e009      	b.n	8000860 <LCD_CreateChar+0x44>
        LCD_SendData(charmap[i]);
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	4413      	add	r3, r2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff53 	bl	8000700 <LCD_SendData>
    for (int i = 0; i < 8; i++) {
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3301      	adds	r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2b07      	cmp	r3, #7
 8000864:	ddf2      	ble.n	800084c <LCD_CreateChar+0x30>
    }
}
 8000866:	bf00      	nop
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <LCD_DrawFace>:
    0b10010,
    0b00000
};


void LCD_DrawFace(uint8_t direction) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
    // direction: 0 = lewo, 1 = prosto, 2 = prawo

    switch (direction) {
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d018      	beq.n	80008b2 <LCD_DrawFace+0x42>
 8000880:	2b02      	cmp	r3, #2
 8000882:	dc1f      	bgt.n	80008c4 <LCD_DrawFace+0x54>
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <LCD_DrawFace+0x1e>
 8000888:	2b01      	cmp	r3, #1
 800088a:	d009      	beq.n	80008a0 <LCD_DrawFace+0x30>
 800088c:	e01a      	b.n	80008c4 <LCD_DrawFace+0x54>
        case 0:
            LCD_CreateChar(0, eye_left);
 800088e:	491a      	ldr	r1, [pc, #104]	@ (80008f8 <LCD_DrawFace+0x88>)
 8000890:	2000      	movs	r0, #0
 8000892:	f7ff ffc3 	bl	800081c <LCD_CreateChar>
            LCD_CreateChar(1, nose_left);
 8000896:	4919      	ldr	r1, [pc, #100]	@ (80008fc <LCD_DrawFace+0x8c>)
 8000898:	2001      	movs	r0, #1
 800089a:	f7ff ffbf 	bl	800081c <LCD_CreateChar>
            break;
 800089e:	e011      	b.n	80008c4 <LCD_DrawFace+0x54>
        case 1:
            LCD_CreateChar(0, eye_forward);
 80008a0:	4917      	ldr	r1, [pc, #92]	@ (8000900 <LCD_DrawFace+0x90>)
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff ffba 	bl	800081c <LCD_CreateChar>
            LCD_CreateChar(1, nose_forward);
 80008a8:	4916      	ldr	r1, [pc, #88]	@ (8000904 <LCD_DrawFace+0x94>)
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff ffb6 	bl	800081c <LCD_CreateChar>
            break;
 80008b0:	e008      	b.n	80008c4 <LCD_DrawFace+0x54>
        case 2:
            LCD_CreateChar(0, eye_right);
 80008b2:	4915      	ldr	r1, [pc, #84]	@ (8000908 <LCD_DrawFace+0x98>)
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff ffb1 	bl	800081c <LCD_CreateChar>
            LCD_CreateChar(1, nose_right);
 80008ba:	4914      	ldr	r1, [pc, #80]	@ (800090c <LCD_DrawFace+0x9c>)
 80008bc:	2001      	movs	r0, #1
 80008be:	f7ff ffad 	bl	800081c <LCD_CreateChar>
            break;
 80008c2:	bf00      	nop
    }

    LCD_Clear();
 80008c4:	f7ff ff2a 	bl	800071c <LCD_Clear>

    // Górna linia: oczy
    LCD_SetCursor(0, 6);
 80008c8:	2106      	movs	r1, #6
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff ff30 	bl	8000730 <LCD_SetCursor>
    LCD_SendData(0);
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff ff15 	bl	8000700 <LCD_SendData>
    LCD_SendData(' ');
 80008d6:	2020      	movs	r0, #32
 80008d8:	f7ff ff12 	bl	8000700 <LCD_SendData>
    LCD_SendData(0);
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff ff0f 	bl	8000700 <LCD_SendData>

    // Dolna linia: nos
    LCD_SetCursor(1, 7);
 80008e2:	2107      	movs	r1, #7
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff ff23 	bl	8000730 <LCD_SetCursor>
    LCD_SendData(1);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f7ff ff08 	bl	8000700 <LCD_SendData>
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000020 	.word	0x20000020
 8000900:	20000008 	.word	0x20000008
 8000904:	20000018 	.word	0x20000018
 8000908:	20000010 	.word	0x20000010
 800090c:	20000028 	.word	0x20000028

08000910 <play_note>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
void play_note(uint16_t freq, uint16_t duration_ms)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	460a      	mov	r2, r1
 800091a:	80fb      	strh	r3, [r7, #6]
 800091c:	4613      	mov	r3, r2
 800091e:	80bb      	strh	r3, [r7, #4]
    if (freq == 0)
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d108      	bne.n	8000938 <play_note+0x28>
    {
        HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000926:	2100      	movs	r1, #0
 8000928:	481a      	ldr	r0, [pc, #104]	@ (8000994 <play_note+0x84>)
 800092a:	f002 fd21 	bl	8003370 <HAL_TIM_PWM_Stop>
        HAL_Delay(duration_ms);
 800092e:	88bb      	ldrh	r3, [r7, #4]
 8000930:	4618      	mov	r0, r3
 8000932:	f001 fbf5 	bl	8002120 <HAL_Delay>
        return;
 8000936:	e02a      	b.n	800098e <play_note+0x7e>
    }

    uint32_t tim_clock = 16000000;
 8000938:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <play_note+0x88>)
 800093a:	617b      	str	r3, [r7, #20]
    uint16_t prescaler = 71;
 800093c:	2347      	movs	r3, #71	@ 0x47
 800093e:	827b      	strh	r3, [r7, #18]
    uint32_t period = (tim_clock / (prescaler + 1)) / freq - 1;
 8000940:	8a7b      	ldrh	r3, [r7, #18]
 8000942:	3301      	adds	r3, #1
 8000944:	461a      	mov	r2, r3
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	fbb3 f2f2 	udiv	r2, r3, r2
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	3b01      	subs	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_PRESCALER(&htim4, prescaler);
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <play_note+0x84>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	8a7a      	ldrh	r2, [r7, #18]
 800095c:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim4, period);
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <play_note+0x84>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000966:	4a0b      	ldr	r2, [pc, #44]	@ (8000994 <play_note+0x84>)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, period / 2);
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <play_note+0x84>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	0852      	lsrs	r2, r2, #1
 8000974:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000976:	2100      	movs	r1, #0
 8000978:	4806      	ldr	r0, [pc, #24]	@ (8000994 <play_note+0x84>)
 800097a:	f002 fc49 	bl	8003210 <HAL_TIM_PWM_Start>

    HAL_Delay(duration_ms);
 800097e:	88bb      	ldrh	r3, [r7, #4]
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fbcd 	bl	8002120 <HAL_Delay>

    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000986:	2100      	movs	r1, #0
 8000988:	4802      	ldr	r0, [pc, #8]	@ (8000994 <play_note+0x84>)
 800098a:	f002 fcf1 	bl	8003370 <HAL_TIM_PWM_Stop>
}
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200001d8 	.word	0x200001d8
 8000998:	00f42400 	.word	0x00f42400

0800099c <play_melody>:

void play_melody(Note *melody)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    for (int i = 0; melody[i].duration > 0; i++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	e00f      	b.n	80009ca <play_melody+0x2e>
    {
        play_note(melody[i].frequency, melody[i].duration);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	8818      	ldrh	r0, [r3, #0]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	885b      	ldrh	r3, [r3, #2]
 80009be:	4619      	mov	r1, r3
 80009c0:	f7ff ffa6 	bl	8000910 <play_note>
    for (int i = 0; melody[i].duration > 0; i++)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3301      	adds	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	885b      	ldrh	r3, [r3, #2]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1e8      	bne.n	80009aa <play_melody+0xe>
    }
}
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <dzidaDoPrzodu>:

uint32_t decode_nec(volatile uint32_t *pulses, uint8_t count);

void dzidaDoPrzodu(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ee:	4810      	ldr	r0, [pc, #64]	@ (8000a30 <dzidaDoPrzodu+0x4c>)
 80009f0:	f001 fe9a 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009fa:	480d      	ldr	r0, [pc, #52]	@ (8000a30 <dzidaDoPrzodu+0x4c>)
 80009fc:	f001 fe94 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a06:	480a      	ldr	r0, [pc, #40]	@ (8000a30 <dzidaDoPrzodu+0x4c>)
 8000a08:	f001 fe8e 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2140      	movs	r1, #64	@ 0x40
 8000a10:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <dzidaDoPrzodu+0x4c>)
 8000a12:	f001 fe89 	bl	8002728 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8000a16:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <dzidaDoPrzodu+0x50>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a07      	ldr	r2, [pc, #28]	@ (8000a38 <dzidaDoPrzodu+0x54>)
 8000a1c:	6812      	ldr	r2, [r2, #0]
 8000a1e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 8000a20:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <dzidaDoPrzodu+0x50>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <dzidaDoPrzodu+0x54>)
 8000a26:	6812      	ldr	r2, [r2, #0]
 8000a28:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40020800 	.word	0x40020800
 8000a34:	20000148 	.word	0x20000148
 8000a38:	20000030 	.word	0x20000030

08000a3c <doTylu>:

void doTylu(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a46:	4810      	ldr	r0, [pc, #64]	@ (8000a88 <doTylu+0x4c>)
 8000a48:	f001 fe6e 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a52:	480d      	ldr	r0, [pc, #52]	@ (8000a88 <doTylu+0x4c>)
 8000a54:	f001 fe68 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a5e:	480a      	ldr	r0, [pc, #40]	@ (8000a88 <doTylu+0x4c>)
 8000a60:	f001 fe62 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2140      	movs	r1, #64	@ 0x40
 8000a68:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <doTylu+0x4c>)
 8000a6a:	f001 fe5d 	bl	8002728 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8000a6e:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <doTylu+0x50>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a07      	ldr	r2, [pc, #28]	@ (8000a90 <doTylu+0x54>)
 8000a74:	6812      	ldr	r2, [r2, #0]
 8000a76:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 8000a78:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <doTylu+0x50>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <doTylu+0x54>)
 8000a7e:	6812      	ldr	r2, [r2, #0]
 8000a80:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	20000148 	.word	0x20000148
 8000a90:	20000030 	.word	0x20000030

08000a94 <skretWLewo>:

void skretWLewo(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a9e:	4810      	ldr	r0, [pc, #64]	@ (8000ae0 <skretWLewo+0x4c>)
 8000aa0:	f001 fe42 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aaa:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <skretWLewo+0x4c>)
 8000aac:	f001 fe3c 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ab6:	480a      	ldr	r0, [pc, #40]	@ (8000ae0 <skretWLewo+0x4c>)
 8000ab8:	f001 fe36 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2140      	movs	r1, #64	@ 0x40
 8000ac0:	4807      	ldr	r0, [pc, #28]	@ (8000ae0 <skretWLewo+0x4c>)
 8000ac2:	f001 fe31 	bl	8002728 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8000ac6:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <skretWLewo+0x50>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a07      	ldr	r2, [pc, #28]	@ (8000ae8 <skretWLewo+0x54>)
 8000acc:	6812      	ldr	r2, [r2, #0]
 8000ace:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <skretWLewo+0x50>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <skretWLewo+0x54>)
 8000ad6:	6812      	ldr	r2, [r2, #0]
 8000ad8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	20000148 	.word	0x20000148
 8000ae8:	20000030 	.word	0x20000030

08000aec <skretWPrawo>:

void skretWPrawo(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af6:	4810      	ldr	r0, [pc, #64]	@ (8000b38 <skretWPrawo+0x4c>)
 8000af8:	f001 fe16 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b02:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <skretWPrawo+0x4c>)
 8000b04:	f001 fe10 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b0e:	480a      	ldr	r0, [pc, #40]	@ (8000b38 <skretWPrawo+0x4c>)
 8000b10:	f001 fe0a 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2140      	movs	r1, #64	@ 0x40
 8000b18:	4807      	ldr	r0, [pc, #28]	@ (8000b38 <skretWPrawo+0x4c>)
 8000b1a:	f001 fe05 	bl	8002728 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8000b1e:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <skretWPrawo+0x50>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a07      	ldr	r2, [pc, #28]	@ (8000b40 <skretWPrawo+0x54>)
 8000b24:	6812      	ldr	r2, [r2, #0]
 8000b26:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <skretWPrawo+0x50>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <skretWPrawo+0x54>)
 8000b2e:	6812      	ldr	r2, [r2, #0]
 8000b30:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	20000148 	.word	0x20000148
 8000b40:	20000030 	.word	0x20000030

08000b44 <stop>:

void stop(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b4e:	480f      	ldr	r0, [pc, #60]	@ (8000b8c <stop+0x48>)
 8000b50:	f001 fdea 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b5a:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <stop+0x48>)
 8000b5c:	f001 fde4 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b66:	4809      	ldr	r0, [pc, #36]	@ (8000b8c <stop+0x48>)
 8000b68:	f001 fdde 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2140      	movs	r1, #64	@ 0x40
 8000b70:	4806      	ldr	r0, [pc, #24]	@ (8000b8c <stop+0x48>)
 8000b72:	f001 fdd9 	bl	8002728 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <stop+0x4c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000b7e:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <stop+0x4c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2200      	movs	r2, #0
 8000b84:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	20000148 	.word	0x20000148

08000b94 <lewy90>:

void lewy90(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b9e:	4810      	ldr	r0, [pc, #64]	@ (8000be0 <lewy90+0x4c>)
 8000ba0:	f001 fdc2 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000baa:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <lewy90+0x4c>)
 8000bac:	f001 fdbc 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bb6:	480a      	ldr	r0, [pc, #40]	@ (8000be0 <lewy90+0x4c>)
 8000bb8:	f001 fdb6 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2140      	movs	r1, #64	@ 0x40
 8000bc0:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <lewy90+0x4c>)
 8000bc2:	f001 fdb1 	bl	8002728 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8000bc6:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <lewy90+0x50>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a07      	ldr	r2, [pc, #28]	@ (8000be8 <lewy90+0x54>)
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 8000bd0:	4b04      	ldr	r3, [pc, #16]	@ (8000be4 <lewy90+0x50>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <lewy90+0x54>)
 8000bd6:	6812      	ldr	r2, [r2, #0]
 8000bd8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40020800 	.word	0x40020800
 8000be4:	20000148 	.word	0x20000148
 8000be8:	20000030 	.word	0x20000030

08000bec <prawy90>:

void prawy90(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bf6:	4810      	ldr	r0, [pc, #64]	@ (8000c38 <prawy90+0x4c>)
 8000bf8:	f001 fd96 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <prawy90+0x4c>)
 8000c04:	f001 fd90 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c0e:	480a      	ldr	r0, [pc, #40]	@ (8000c38 <prawy90+0x4c>)
 8000c10:	f001 fd8a 	bl	8002728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2140      	movs	r1, #64	@ 0x40
 8000c18:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <prawy90+0x4c>)
 8000c1a:	f001 fd85 	bl	8002728 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8000c1e:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <prawy90+0x50>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a07      	ldr	r2, [pc, #28]	@ (8000c40 <prawy90+0x54>)
 8000c24:	6812      	ldr	r2, [r2, #0]
 8000c26:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <prawy90+0x50>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <prawy90+0x54>)
 8000c2e:	6812      	ldr	r2, [r2, #0]
 8000c30:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40020800 	.word	0x40020800
 8000c3c:	20000148 	.word	0x20000148
 8000c40:	20000030 	.word	0x20000030

08000c44 <searchLine>:

void searchLine(int lastTurnDirection)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    uint32_t search_duty = DUTY_SLOW;
 8000c4c:	f240 437e 	movw	r3, #1150	@ 0x47e
 8000c50:	60fb      	str	r3, [r7, #12]

    if (lastTurnDirection >= 0)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db17      	blt.n	8000c88 <searchLine+0x44>
    {
        HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c5e:	481c      	ldr	r0, [pc, #112]	@ (8000cd0 <searchLine+0x8c>)
 8000c60:	f001 fd62 	bl	8002728 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c6a:	4819      	ldr	r0, [pc, #100]	@ (8000cd0 <searchLine+0x8c>)
 8000c6c:	f001 fd5c 	bl	8002728 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c76:	4816      	ldr	r0, [pc, #88]	@ (8000cd0 <searchLine+0x8c>)
 8000c78:	f001 fd56 	bl	8002728 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2140      	movs	r1, #64	@ 0x40
 8000c80:	4813      	ldr	r0, [pc, #76]	@ (8000cd0 <searchLine+0x8c>)
 8000c82:	f001 fd51 	bl	8002728 <HAL_GPIO_WritePin>
 8000c86:	e016      	b.n	8000cb6 <searchLine+0x72>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOC, IN1_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c8e:	4810      	ldr	r0, [pc, #64]	@ (8000cd0 <searchLine+0x8c>)
 8000c90:	f001 fd4a 	bl	8002728 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, IN2_Pin, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c9a:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <searchLine+0x8c>)
 8000c9c:	f001 fd44 	bl	8002728 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, IN3_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ca6:	480a      	ldr	r0, [pc, #40]	@ (8000cd0 <searchLine+0x8c>)
 8000ca8:	f001 fd3e 	bl	8002728 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, IN4_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2140      	movs	r1, #64	@ 0x40
 8000cb0:	4807      	ldr	r0, [pc, #28]	@ (8000cd0 <searchLine+0x8c>)
 8000cb2:	f001 fd39 	bl	8002728 <HAL_GPIO_WritePin>
    }
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, search_duty);
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <searchLine+0x90>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, search_duty);
 8000cbe:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <searchLine+0x90>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	20000148 	.word	0x20000148

08000cd8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == IR_Pin)
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ce8:	f040 808c 	bne.w	8000e04 <HAL_GPIO_EXTI_Callback+0x12c>
    {
        if (ir_frame_ready || ir_repeat_detected)
 8000cec:	4b48      	ldr	r3, [pc, #288]	@ (8000e10 <HAL_GPIO_EXTI_Callback+0x138>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8085 	bne.w	8000e02 <HAL_GPIO_EXTI_Callback+0x12a>
 8000cf8:	4b46      	ldr	r3, [pc, #280]	@ (8000e14 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d17f      	bne.n	8000e02 <HAL_GPIO_EXTI_Callback+0x12a>
            return;

        uint32_t now = __HAL_TIM_GET_COUNTER(&htim3);
 8000d02:	4b45      	ldr	r3, [pc, #276]	@ (8000e18 <HAL_GPIO_EXTI_Callback+0x140>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d08:	60fb      	str	r3, [r7, #12]
        uint32_t duration = (uint16_t)(now - last_edge_time);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	4b43      	ldr	r3, [pc, #268]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0x144>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	60bb      	str	r3, [r7, #8]

        if (duration > NEC_FRAME_START_MIN_GAP_US)
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d909      	bls.n	8000d38 <HAL_GPIO_EXTI_Callback+0x60>
        {
            pulse_index = 0;
 8000d24:	4b3e      	ldr	r3, [pc, #248]	@ (8000e20 <HAL_GPIO_EXTI_Callback+0x148>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
            capture_started = true;
 8000d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e24 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
            last_edge_time = now;
 8000d30:	4a3a      	ldr	r2, [pc, #232]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0x144>)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6013      	str	r3, [r2, #0]
            return;
 8000d36:	e065      	b.n	8000e04 <HAL_GPIO_EXTI_Callback+0x12c>
        }

        if (capture_started)
 8000d38:	4b3a      	ldr	r3, [pc, #232]	@ (8000e24 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d05b      	beq.n	8000dfa <HAL_GPIO_EXTI_Callback+0x122>
        {
            if (pulse_index < IR_RX_BUFFER_SIZE)
 8000d42:	4b37      	ldr	r3, [pc, #220]	@ (8000e20 <HAL_GPIO_EXTI_Callback+0x148>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b63      	cmp	r3, #99	@ 0x63
 8000d4a:	d80c      	bhi.n	8000d66 <HAL_GPIO_EXTI_Callback+0x8e>
            {
                pulse_widths[pulse_index++] = duration;
 8000d4c:	4b34      	ldr	r3, [pc, #208]	@ (8000e20 <HAL_GPIO_EXTI_Callback+0x148>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	b2d1      	uxtb	r1, r2
 8000d56:	4a32      	ldr	r2, [pc, #200]	@ (8000e20 <HAL_GPIO_EXTI_Callback+0x148>)
 8000d58:	7011      	strb	r1, [r2, #0]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4a32      	ldr	r2, [pc, #200]	@ (8000e28 <HAL_GPIO_EXTI_Callback+0x150>)
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000d64:	e005      	b.n	8000d72 <HAL_GPIO_EXTI_Callback+0x9a>
            }
            else
            {
                capture_started = false;
 8000d66:	4b2f      	ldr	r3, [pc, #188]	@ (8000e24 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
                pulse_index = 0;
 8000d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e20 <HAL_GPIO_EXTI_Callback+0x148>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
            }

            if (capture_started)
 8000d72:	4b2c      	ldr	r3, [pc, #176]	@ (8000e24 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d03e      	beq.n	8000dfa <HAL_GPIO_EXTI_Callback+0x122>
            {
                if (pulse_index == NEC_REPEAT_PULSE_COUNT)
 8000d7c:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <HAL_GPIO_EXTI_Callback+0x148>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d126      	bne.n	8000dd4 <HAL_GPIO_EXTI_Callback+0xfc>
                {
                    if ((pulse_widths[0] >= NEC_AGC_MARK_MIN_US && pulse_widths[0] <= NEC_AGC_MARK_MAX_US) &&
 8000d86:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <HAL_GPIO_EXTI_Callback+0x150>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000d8e:	d321      	bcc.n	8000dd4 <HAL_GPIO_EXTI_Callback+0xfc>
 8000d90:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <HAL_GPIO_EXTI_Callback+0x150>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d81b      	bhi.n	8000dd4 <HAL_GPIO_EXTI_Callback+0xfc>
                        (pulse_widths[1] >= NEC_REPEAT_SPACE_MIN_US && pulse_widths[1] <= NEC_REPEAT_SPACE_MAX_US) &&
 8000d9c:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <HAL_GPIO_EXTI_Callback+0x150>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
                    if ((pulse_widths[0] >= NEC_AGC_MARK_MIN_US && pulse_widths[0] <= NEC_AGC_MARK_MAX_US) &&
 8000da0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000da4:	d316      	bcc.n	8000dd4 <HAL_GPIO_EXTI_Callback+0xfc>
                        (pulse_widths[1] >= NEC_REPEAT_SPACE_MIN_US && pulse_widths[1] <= NEC_REPEAT_SPACE_MAX_US) &&
 8000da6:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <HAL_GPIO_EXTI_Callback+0x150>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d810      	bhi.n	8000dd4 <HAL_GPIO_EXTI_Callback+0xfc>
                        (pulse_widths[2] >= NEC_BIT_MARK_MIN_US && pulse_widths[2] <= NEC_BIT_MARK_MAX_US))
 8000db2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <HAL_GPIO_EXTI_Callback+0x150>)
 8000db4:	689b      	ldr	r3, [r3, #8]
                        (pulse_widths[1] >= NEC_REPEAT_SPACE_MIN_US && pulse_widths[1] <= NEC_REPEAT_SPACE_MAX_US) &&
 8000db6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000dba:	d30b      	bcc.n	8000dd4 <HAL_GPIO_EXTI_Callback+0xfc>
                        (pulse_widths[2] >= NEC_BIT_MARK_MIN_US && pulse_widths[2] <= NEC_BIT_MARK_MAX_US))
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <HAL_GPIO_EXTI_Callback+0x150>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d805      	bhi.n	8000dd4 <HAL_GPIO_EXTI_Callback+0xfc>
                    {
                        ir_repeat_detected = true;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	701a      	strb	r2, [r3, #0]
                        capture_started = false;
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
                    }
                }

                if (!ir_repeat_detected && pulse_index >= NEC_PULSE_COUNT)
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	f083 0301 	eor.w	r3, r3, #1
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00a      	beq.n	8000dfa <HAL_GPIO_EXTI_Callback+0x122>
 8000de4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <HAL_GPIO_EXTI_Callback+0x148>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b42      	cmp	r3, #66	@ 0x42
 8000dec:	d905      	bls.n	8000dfa <HAL_GPIO_EXTI_Callback+0x122>
                {
                    ir_frame_ready = true;
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <HAL_GPIO_EXTI_Callback+0x138>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
                    capture_started = false;
 8000df4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
                }
            }
        }
        last_edge_time = now;
 8000dfa:	4a08      	ldr	r2, [pc, #32]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0x144>)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e000      	b.n	8000e04 <HAL_GPIO_EXTI_Callback+0x12c>
            return;
 8000e02:	bf00      	nop
    }
}
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	200003c5 	.word	0x200003c5
 8000e14:	200003c7 	.word	0x200003c7
 8000e18:	20000190 	.word	0x20000190
 8000e1c:	20000230 	.word	0x20000230
 8000e20:	200003c4 	.word	0x200003c4
 8000e24:	200003c6 	.word	0x200003c6
 8000e28:	20000234 	.word	0x20000234

08000e2c <decode_nec>:

uint32_t decode_nec(volatile uint32_t *pulses, uint8_t count)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	70fb      	strb	r3, [r7, #3]
    if (count < NEC_PULSE_COUNT)
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	2b42      	cmp	r3, #66	@ 0x42
 8000e3c:	d802      	bhi.n	8000e44 <decode_nec+0x18>
        return 0xFFFFFFFF;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	e062      	b.n	8000f0a <decode_nec+0xde>

    if (pulses[0] < NEC_AGC_MARK_MIN_US || pulses[0] > NEC_AGC_MARK_MAX_US)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000e4c:	d305      	bcc.n	8000e5a <decode_nec+0x2e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d902      	bls.n	8000e60 <decode_nec+0x34>
        return 0xFFFFFFFF;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e054      	b.n	8000f0a <decode_nec+0xde>
    if (pulses[1] < NEC_AGC_SPACE_MIN_US || pulses[1] > NEC_AGC_SPACE_MAX_US)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3304      	adds	r3, #4
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000e6a:	d306      	bcc.n	8000e7a <decode_nec+0x4e>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3304      	adds	r3, #4
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d902      	bls.n	8000e80 <decode_nec+0x54>
        return 0xFFFFFFFF;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	e044      	b.n	8000f0a <decode_nec+0xde>

    uint32_t decoded_code = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 32; i++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	e03b      	b.n	8000f02 <decode_nec+0xd6>
    {
        uint32_t bit_mark = pulses[2 + (2 * i)];
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	60fb      	str	r3, [r7, #12]
        uint32_t bit_space = pulses[2 + (2 * i) + 1];
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	3303      	adds	r3, #3
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	60bb      	str	r3, [r7, #8]

        if (bit_mark < NEC_BIT_MARK_MIN_US || bit_mark > NEC_BIT_MARK_MAX_US)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000eae:	d304      	bcc.n	8000eba <decode_nec+0x8e>
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d902      	bls.n	8000ec0 <decode_nec+0x94>
            return 0xFFFFFFFF;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	e024      	b.n	8000f0a <decode_nec+0xde>

        decoded_code <<= 1;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
        if (bit_space >= NEC_BIT_1_SPACE_MIN_US && bit_space <= NEC_BIT_1_SPACE_MAX_US)
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d909      	bls.n	8000ee4 <decode_nec+0xb8>
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d804      	bhi.n	8000ee4 <decode_nec+0xb8>
        {
            decoded_code |= 1;
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	e00b      	b.n	8000efc <decode_nec+0xd0>
        }
        else if (bit_space >= NEC_BIT_0_SPACE_MIN_US && bit_space <= NEC_BIT_0_SPACE_MAX_US)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000eea:	d304      	bcc.n	8000ef6 <decode_nec+0xca>
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d902      	bls.n	8000efc <decode_nec+0xd0>
        {
        }
        else
        {
            return 0xFFFFFFFF;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e006      	b.n	8000f0a <decode_nec+0xde>
    for (int i = 0; i < 32; i++)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	3301      	adds	r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	2b1f      	cmp	r3, #31
 8000f06:	ddc0      	ble.n	8000e8a <decode_nec+0x5e>
        }
    }
    return decoded_code;
 8000f08:	697b      	ldr	r3, [r7, #20]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	371c      	adds	r7, #28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0f6      	sub	sp, #472	@ 0x1d8
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
    char lcd_buf[17];
    char lcd_action_msg[17];
    char clear_line[17];
    memset(clear_line, ' ', 16);
 8000f1e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000f22:	2210      	movs	r2, #16
 8000f24:	2120      	movs	r1, #32
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 ff72 	bl	8003e10 <memset>
    clear_line[16] = '\0';
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f32:	f001 f883 	bl	800203c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f36:	f000 fc8d 	bl	8001854 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3a:	f000 fe2d 	bl	8001b98 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f3e:	f000 fce7 	bl	8001910 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f42:	f000 fd65 	bl	8001a10 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f46:	f000 fdb1 	bl	8001aac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
    LCD_Init();
 8000f4a:	f7ff fc25 	bl	8000798 <LCD_Init>
    LCD_DrawFace(1);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f7ff fc8e 	bl	8000870 <LCD_DrawFace>
    play_melody(happy_bounce);
 8000f54:	48c1      	ldr	r0, [pc, #772]	@ (800125c <main+0x344>)
 8000f56:	f7ff fd21 	bl	800099c <play_melody>
    lcd_initialized = true;
 8000f5a:	4bc1      	ldr	r3, [pc, #772]	@ (8001260 <main+0x348>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
    LCD_SetCursor(0, 0);
 8000f60:	2100      	movs	r1, #0
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff fbe4 	bl	8000730 <LCD_SetCursor>
    LCD_SendString("PROJEKT SWIM");
 8000f68:	48be      	ldr	r0, [pc, #760]	@ (8001264 <main+0x34c>)
 8000f6a:	f7ff fc00 	bl	800076e <LCD_SendString>
    LCD_SetCursor(1, 0);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fbdd 	bl	8000730 <LCD_SetCursor>
    LCD_SendString("Czekam na B1...");
 8000f76:	48bc      	ldr	r0, [pc, #752]	@ (8001268 <main+0x350>)
 8000f78:	f7ff fbf9 	bl	800076e <LCD_SendString>

    HAL_TIM_Base_Start(&htim3);
 8000f7c:	48bb      	ldr	r0, [pc, #748]	@ (800126c <main+0x354>)
 8000f7e:	f002 f893 	bl	80030a8 <HAL_TIM_Base_Start>
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000f82:	4bba      	ldr	r3, [pc, #744]	@ (800126c <main+0x354>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24
    last_edge_time = __HAL_TIM_GET_COUNTER(&htim3);
 8000f8a:	4bb8      	ldr	r3, [pc, #736]	@ (800126c <main+0x354>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f90:	4ab7      	ldr	r2, [pc, #732]	@ (8001270 <main+0x358>)
 8000f92:	6013      	str	r3, [r2, #0]
    pulse_index = 0;
 8000f94:	4bb7      	ldr	r3, [pc, #732]	@ (8001274 <main+0x35c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
    ir_frame_ready = false;
 8000f9a:	4bb7      	ldr	r3, [pc, #732]	@ (8001278 <main+0x360>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
    ir_repeat_detected = false;
 8000fa0:	4bb6      	ldr	r3, [pc, #728]	@ (800127c <main+0x364>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
    capture_started = false;
 8000fa6:	4bb6      	ldr	r3, [pc, #728]	@ (8001280 <main+0x368>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]

    while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8000fac:	e006      	b.n	8000fbc <main+0xa4>
    {
        HAL_Delay(100);
 8000fae:	2064      	movs	r0, #100	@ 0x64
 8000fb0:	f001 f8b6 	bl	8002120 <HAL_Delay>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	48b3      	ldr	r0, [pc, #716]	@ (8001284 <main+0x36c>)
 8000fb8:	f001 fbcf 	bl	800275a <HAL_GPIO_TogglePin>
    while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8000fbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc0:	48b1      	ldr	r0, [pc, #708]	@ (8001288 <main+0x370>)
 8000fc2:	f001 fb99 	bl	80026f8 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d0f0      	beq.n	8000fae <main+0x96>
    }
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2120      	movs	r1, #32
 8000fd0:	48ac      	ldr	r0, [pc, #688]	@ (8001284 <main+0x36c>)
 8000fd2:	f001 fba9 	bl	8002728 <HAL_GPIO_WritePin>

    LCD_Clear();
 8000fd6:	f7ff fba1 	bl	800071c <LCD_Clear>
    LCD_SetCursor(0, 0);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f7ff fba7 	bl	8000730 <LCD_SetCursor>
    LCD_SendString("Tryb: Auto");
 8000fe2:	48aa      	ldr	r0, [pc, #680]	@ (800128c <main+0x374>)
 8000fe4:	f7ff fbc3 	bl	800076e <LCD_SendString>
    LCD_SetCursor(1, 0);
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff fba0 	bl	8000730 <LCD_SetCursor>
    LCD_SendString("Start!");
 8000ff0:	48a7      	ldr	r0, [pc, #668]	@ (8001290 <main+0x378>)
 8000ff2:	f7ff fbbc 	bl	800076e <LCD_SendString>
    HAL_Delay(1000);
 8000ff6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ffa:	f001 f891 	bl	8002120 <HAL_Delay>
    LCD_DrawFace(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f7ff fc36 	bl	8000870 <LCD_DrawFace>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001004:	2100      	movs	r1, #0
 8001006:	48a3      	ldr	r0, [pc, #652]	@ (8001294 <main+0x37c>)
 8001008:	f002 f902 	bl	8003210 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800100c:	2104      	movs	r1, #4
 800100e:	48a1      	ldr	r0, [pc, #644]	@ (8001294 <main+0x37c>)
 8001010:	f002 f8fe 	bl	8003210 <HAL_TIM_PWM_Start>
    stop();
 8001014:	f7ff fd96 	bl	8000b44 <stop>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        uint32_t ir_code_to_process = 0xFFFFFFFF;
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
        bool is_repeat_frame = false;
 8001020:	2300      	movs	r3, #0
 8001022:	f887 31d3 	strb.w	r3, [r7, #467]	@ 0x1d3

        if (ir_frame_ready)
 8001026:	4b94      	ldr	r3, [pc, #592]	@ (8001278 <main+0x360>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d04b      	beq.n	80010c8 <main+0x1b0>
        {
            uint32_t local_pulse_widths[IR_RX_BUFFER_SIZE];
            uint8_t local_pulse_count;

            HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001030:	2028      	movs	r0, #40	@ 0x28
 8001032:	f001 f9c2 	bl	80023ba <HAL_NVIC_DisableIRQ>

            local_pulse_count = pulse_index;
 8001036:	4b8f      	ldr	r3, [pc, #572]	@ (8001274 <main+0x35c>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	f887 31d0 	strb.w	r3, [r7, #464]	@ 0x1d0
            memcpy(local_pulse_widths, (void *)pulse_widths, local_pulse_count * sizeof(uint32_t));
 800103e:	f897 31d0 	ldrb.w	r3, [r7, #464]	@ 0x1d0
 8001042:	009a      	lsls	r2, r3, #2
 8001044:	463b      	mov	r3, r7
 8001046:	4994      	ldr	r1, [pc, #592]	@ (8001298 <main+0x380>)
 8001048:	4618      	mov	r0, r3
 800104a:	f002 ff15 	bl	8003e78 <memcpy>

            pulse_index = 0;
 800104e:	4b89      	ldr	r3, [pc, #548]	@ (8001274 <main+0x35c>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
            ir_frame_ready = false;
 8001054:	4b88      	ldr	r3, [pc, #544]	@ (8001278 <main+0x360>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
            HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800105a:	2028      	movs	r0, #40	@ 0x28
 800105c:	f001 f99f 	bl	800239e <HAL_NVIC_EnableIRQ>

            uint32_t decoded_code = decode_nec(local_pulse_widths, local_pulse_count);
 8001060:	f897 21d0 	ldrb.w	r2, [r7, #464]	@ 0x1d0
 8001064:	463b      	mov	r3, r7
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fedf 	bl	8000e2c <decode_nec>
 800106e:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc

            if (decoded_code != 0xFFFFFFFF)
 8001072:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107a:	d00b      	beq.n	8001094 <main+0x17c>
            {
                ir_code_to_process = decoded_code;
 800107c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001080:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
                last_good_ir_code = decoded_code;
 8001084:	4a85      	ldr	r2, [pc, #532]	@ (800129c <main+0x384>)
 8001086:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800108a:	6013      	str	r3, [r2, #0]
                is_repeat_frame = false;
 800108c:	2300      	movs	r3, #0
 800108e:	f887 31d3 	strb.w	r3, [r7, #467]	@ 0x1d3
 8001092:	e033      	b.n	80010fc <main+0x1e4>
            }
            else
            {
                LCD_SetCursor(0, 0);
 8001094:	2100      	movs	r1, #0
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff fb4a 	bl	8000730 <LCD_SetCursor>
                LCD_SendString(clear_line);
 800109c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fb64 	bl	800076e <LCD_SendString>
                LCD_SetCursor(1, 0);
 80010a6:	2100      	movs	r1, #0
 80010a8:	2001      	movs	r0, #1
 80010aa:	f7ff fb41 	bl	8000730 <LCD_SetCursor>
                LCD_SendString(clear_line);
 80010ae:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fb5b 	bl	800076e <LCD_SendString>
                LCD_SetCursor(0, 0);
 80010b8:	2100      	movs	r1, #0
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fb38 	bl	8000730 <LCD_SetCursor>
                LCD_SendString("Blad dekodowania");
 80010c0:	4877      	ldr	r0, [pc, #476]	@ (80012a0 <main+0x388>)
 80010c2:	f7ff fb54 	bl	800076e <LCD_SendString>
 80010c6:	e019      	b.n	80010fc <main+0x1e4>
            }
        }
        else if (ir_repeat_detected)
 80010c8:	4b6c      	ldr	r3, [pc, #432]	@ (800127c <main+0x364>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d014      	beq.n	80010fc <main+0x1e4>
        {
            HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80010d2:	2028      	movs	r0, #40	@ 0x28
 80010d4:	f001 f971 	bl	80023ba <HAL_NVIC_DisableIRQ>
            ir_repeat_detected = false;
 80010d8:	4b68      	ldr	r3, [pc, #416]	@ (800127c <main+0x364>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
            HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010de:	2028      	movs	r0, #40	@ 0x28
 80010e0:	f001 f95d 	bl	800239e <HAL_NVIC_EnableIRQ>

            if (last_good_ir_code != 0xFFFFFFFF)
 80010e4:	4b6d      	ldr	r3, [pc, #436]	@ (800129c <main+0x384>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d006      	beq.n	80010fc <main+0x1e4>
            {
                ir_code_to_process = last_good_ir_code;
 80010ee:	4b6b      	ldr	r3, [pc, #428]	@ (800129c <main+0x384>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
                is_repeat_frame = true;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f887 31d3 	strb.w	r3, [r7, #467]	@ 0x1d3
            else
            {
            }
        }

        if (ir_code_to_process != 0xFFFFFFFF)
 80010fc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	f000 8283 	beq.w	800160e <main+0x6f6>
        {
            bool allow_processing = true;
 8001108:	2301      	movs	r3, #1
 800110a:	f887 31d2 	strb.w	r3, [r7, #466]	@ 0x1d2
            memset(lcd_action_msg, 0, sizeof(lcd_action_msg));
 800110e:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001112:	2211      	movs	r2, #17
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f002 fe7a 	bl	8003e10 <memset>

            LCD_SetCursor(0, 0);
 800111c:	2100      	movs	r1, #0
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff fb06 	bl	8000730 <LCD_SetCursor>
            LCD_SendString(clear_line);
 8001124:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fb20 	bl	800076e <LCD_SendString>
            LCD_SetCursor(1, 0);
 800112e:	2100      	movs	r1, #0
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff fafd 	bl	8000730 <LCD_SetCursor>
            LCD_SendString(clear_line);
 8001136:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fb17 	bl	800076e <LCD_SendString>
            LCD_SetCursor(0, 0);
 8001140:	2100      	movs	r1, #0
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff faf4 	bl	8000730 <LCD_SetCursor>

            if (is_repeat_frame)
 8001148:	f897 31d3 	ldrb.w	r3, [r7, #467]	@ 0x1d3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d009      	beq.n	8001164 <main+0x24c>
            {
                sprintf(lcd_buf, "IR RPT(0x%04X)", (unsigned int)(ir_code_to_process & 0xFFFF));
 8001150:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001154:	b29a      	uxth	r2, r3
 8001156:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800115a:	4952      	ldr	r1, [pc, #328]	@ (80012a4 <main+0x38c>)
 800115c:	4618      	mov	r0, r3
 800115e:	f002 fe35 	bl	8003dcc <siprintf>
 8001162:	e007      	b.n	8001174 <main+0x25c>
            }
            else
            {
                sprintf(lcd_buf, "IR:0x%08X", (unsigned int)ir_code_to_process);
 8001164:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001168:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800116c:	494e      	ldr	r1, [pc, #312]	@ (80012a8 <main+0x390>)
 800116e:	4618      	mov	r0, r3
 8001170:	f002 fe2c 	bl	8003dcc <siprintf>
            }
            LCD_SendString(lcd_buf);
 8001174:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff faf8 	bl	800076e <LCD_SendString>

            bool is_discrete_event_code =
                (ir_code_to_process == 0x00FF6897) ||
                (ir_code_to_process == 0x00FFB04F) ||
                (ir_code_to_process == 0x00FF38C7) ||
                (ir_code_to_process == 0x00FFA25D) ||
 800117e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001182:	4a4a      	ldr	r2, [pc, #296]	@ (80012ac <main+0x394>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d013      	beq.n	80011b0 <main+0x298>
                (ir_code_to_process == 0x00FF6897) ||
 8001188:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800118c:	4a48      	ldr	r2, [pc, #288]	@ (80012b0 <main+0x398>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00e      	beq.n	80011b0 <main+0x298>
                (ir_code_to_process == 0x00FFB04F) ||
 8001192:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001196:	4a47      	ldr	r2, [pc, #284]	@ (80012b4 <main+0x39c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d009      	beq.n	80011b0 <main+0x298>
                (ir_code_to_process == 0x00FF38C7) ||
 800119c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80011a0:	4a45      	ldr	r2, [pc, #276]	@ (80012b8 <main+0x3a0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d004      	beq.n	80011b0 <main+0x298>
                (ir_code_to_process == 0x00FFA25D) ||
 80011a6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80011aa:	4a44      	ldr	r2, [pc, #272]	@ (80012bc <main+0x3a4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d101      	bne.n	80011b4 <main+0x29c>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <main+0x29e>
 80011b4:	2300      	movs	r3, #0
            bool is_discrete_event_code =
 80011b6:	f887 31cb 	strb.w	r3, [r7, #459]	@ 0x1cb
 80011ba:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	f887 31cb 	strb.w	r3, [r7, #459]	@ 0x1cb
                (ir_code_to_process == 0x00FFE21D);

            if (is_discrete_event_code)
 80011c6:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d022      	beq.n	8001214 <main+0x2fc>
            {
                if (ir_code_to_process == last_processed_discrete_ir_code &&
 80011ce:	4b3c      	ldr	r3, [pc, #240]	@ (80012c0 <main+0x3a8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d11c      	bne.n	8001214 <main+0x2fc>
                    (HAL_GetTick() - last_processed_discrete_ir_time < DISCRETE_CMD_MIN_INTERVAL_MS))
 80011da:	f000 ff95 	bl	8002108 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	4b38      	ldr	r3, [pc, #224]	@ (80012c4 <main+0x3ac>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	1ad3      	subs	r3, r2, r3
                if (ir_code_to_process == last_processed_discrete_ir_code &&
 80011e6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80011ea:	d213      	bcs.n	8001214 <main+0x2fc>
                {
                    allow_processing = false;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f887 31d2 	strb.w	r3, [r7, #466]	@ 0x1d2
                    if (is_repeat_frame)
 80011f2:	f897 31d3 	ldrb.w	r3, [r7, #467]	@ 0x1d3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d006      	beq.n	8001208 <main+0x2f0>
                        sprintf(lcd_action_msg, "Hold Ignored");
 80011fa:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 80011fe:	4932      	ldr	r1, [pc, #200]	@ (80012c8 <main+0x3b0>)
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fde3 	bl	8003dcc <siprintf>
 8001206:	e005      	b.n	8001214 <main+0x2fc>
                    else
                        sprintf(lcd_action_msg, "Debounce Ignored");
 8001208:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 800120c:	492f      	ldr	r1, [pc, #188]	@ (80012cc <main+0x3b4>)
 800120e:	4618      	mov	r0, r3
 8001210:	f002 fddc 	bl	8003dcc <siprintf>
                }
            }

            if (allow_processing)
 8001214:	f897 31d2 	ldrb.w	r3, [r7, #466]	@ 0x1d2
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 81eb 	beq.w	80015f4 <main+0x6dc>
            {
                bool discrete_action_has_been_processed_this_cycle = false;
 800121e:	2300      	movs	r3, #0
 8001220:	f887 31d1 	strb.w	r3, [r7, #465]	@ 0x1d1

                if (ir_code_to_process == 0x00FF6897)
 8001224:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001228:	4a20      	ldr	r2, [pc, #128]	@ (80012ac <main+0x394>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d156      	bne.n	80012dc <main+0x3c4>
                {
                    if (control_mode != 1)
 800122e:	4b28      	ldr	r3, [pc, #160]	@ (80012d0 <main+0x3b8>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d007      	beq.n	8001248 <main+0x330>
                    {
                        control_mode = 1;
 8001238:	4b25      	ldr	r3, [pc, #148]	@ (80012d0 <main+0x3b8>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
                        stop();
 800123e:	f7ff fc81 	bl	8000b44 <stop>
                        is_moving_remotely = false;
 8001242:	4b24      	ldr	r3, [pc, #144]	@ (80012d4 <main+0x3bc>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
                    }
                    sprintf(lcd_action_msg, "Tryb: Zdalny");
 8001248:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 800124c:	4922      	ldr	r1, [pc, #136]	@ (80012d8 <main+0x3c0>)
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fdbc 	bl	8003dcc <siprintf>
                    discrete_action_has_been_processed_this_cycle = true;
 8001254:	2301      	movs	r3, #1
 8001256:	f887 31d1 	strb.w	r3, [r7, #465]	@ 0x1d1
 800125a:	e1be      	b.n	80015da <main+0x6c2>
 800125c:	20000040 	.word	0x20000040
 8001260:	200003d4 	.word	0x200003d4
 8001264:	08004724 	.word	0x08004724
 8001268:	08004734 	.word	0x08004734
 800126c:	20000190 	.word	0x20000190
 8001270:	20000230 	.word	0x20000230
 8001274:	200003c4 	.word	0x200003c4
 8001278:	200003c5 	.word	0x200003c5
 800127c:	200003c7 	.word	0x200003c7
 8001280:	200003c6 	.word	0x200003c6
 8001284:	40020000 	.word	0x40020000
 8001288:	40020800 	.word	0x40020800
 800128c:	08004744 	.word	0x08004744
 8001290:	08004750 	.word	0x08004750
 8001294:	20000148 	.word	0x20000148
 8001298:	20000234 	.word	0x20000234
 800129c:	20000038 	.word	0x20000038
 80012a0:	08004758 	.word	0x08004758
 80012a4:	0800476c 	.word	0x0800476c
 80012a8:	0800477c 	.word	0x0800477c
 80012ac:	00ff6897 	.word	0x00ff6897
 80012b0:	00ffb04f 	.word	0x00ffb04f
 80012b4:	00ff38c7 	.word	0x00ff38c7
 80012b8:	00ffa25d 	.word	0x00ffa25d
 80012bc:	00ffe21d 	.word	0x00ffe21d
 80012c0:	2000003c 	.word	0x2000003c
 80012c4:	200003d0 	.word	0x200003d0
 80012c8:	08004788 	.word	0x08004788
 80012cc:	08004798 	.word	0x08004798
 80012d0:	2000022c 	.word	0x2000022c
 80012d4:	200003c8 	.word	0x200003c8
 80012d8:	080047ac 	.word	0x080047ac
                }
                else if (ir_code_to_process == 0x00FFB04F)
 80012dc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80012e0:	4aa1      	ldr	r2, [pc, #644]	@ (8001568 <main+0x650>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d119      	bne.n	800131a <main+0x402>
                {
                    if (control_mode != 0)
 80012e6:	4ba1      	ldr	r3, [pc, #644]	@ (800156c <main+0x654>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00a      	beq.n	8001306 <main+0x3ee>
                    {
                        control_mode = 0;
 80012f0:	4b9e      	ldr	r3, [pc, #632]	@ (800156c <main+0x654>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
                        stop();
 80012f6:	f7ff fc25 	bl	8000b44 <stop>
                        is_moving_remotely = false;
 80012fa:	4b9d      	ldr	r3, [pc, #628]	@ (8001570 <main+0x658>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
                        bitSkretu = 0;
 8001300:	4b9c      	ldr	r3, [pc, #624]	@ (8001574 <main+0x65c>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
                    }
                    sprintf(lcd_action_msg, "Tryb: Auto");
 8001306:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 800130a:	499b      	ldr	r1, [pc, #620]	@ (8001578 <main+0x660>)
 800130c:	4618      	mov	r0, r3
 800130e:	f002 fd5d 	bl	8003dcc <siprintf>
                    discrete_action_has_been_processed_this_cycle = true;
 8001312:	2301      	movs	r3, #1
 8001314:	f887 31d1 	strb.w	r3, [r7, #465]	@ 0x1d1
 8001318:	e15f      	b.n	80015da <main+0x6c2>
                }
                else if (control_mode == 1)
 800131a:	4b94      	ldr	r3, [pc, #592]	@ (800156c <main+0x654>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b01      	cmp	r3, #1
 8001322:	f040 810c 	bne.w	800153e <main+0x626>
                {
                    switch (ir_code_to_process)
 8001326:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800132a:	4a94      	ldr	r2, [pc, #592]	@ (800157c <main+0x664>)
 800132c:	4293      	cmp	r3, r2
 800132e:	f000 80e3 	beq.w	80014f8 <main+0x5e0>
 8001332:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001336:	4a91      	ldr	r2, [pc, #580]	@ (800157c <main+0x664>)
 8001338:	4293      	cmp	r3, r2
 800133a:	f200 80f5 	bhi.w	8001528 <main+0x610>
 800133e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001342:	4a8f      	ldr	r2, [pc, #572]	@ (8001580 <main+0x668>)
 8001344:	4293      	cmp	r3, r2
 8001346:	f000 809f 	beq.w	8001488 <main+0x570>
 800134a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800134e:	4a8c      	ldr	r2, [pc, #560]	@ (8001580 <main+0x668>)
 8001350:	4293      	cmp	r3, r2
 8001352:	f200 80e9 	bhi.w	8001528 <main+0x610>
 8001356:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800135a:	4a8a      	ldr	r2, [pc, #552]	@ (8001584 <main+0x66c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	f000 80b3 	beq.w	80014c8 <main+0x5b0>
 8001362:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001366:	4a87      	ldr	r2, [pc, #540]	@ (8001584 <main+0x66c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	f200 80dd 	bhi.w	8001528 <main+0x610>
 800136e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001372:	4a85      	ldr	r2, [pc, #532]	@ (8001588 <main+0x670>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d065      	beq.n	8001444 <main+0x52c>
 8001378:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800137c:	4a82      	ldr	r2, [pc, #520]	@ (8001588 <main+0x670>)
 800137e:	4293      	cmp	r3, r2
 8001380:	f200 80d2 	bhi.w	8001528 <main+0x610>
 8001384:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001388:	4a80      	ldr	r2, [pc, #512]	@ (800158c <main+0x674>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d038      	beq.n	8001400 <main+0x4e8>
 800138e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001392:	4a7e      	ldr	r2, [pc, #504]	@ (800158c <main+0x674>)
 8001394:	4293      	cmp	r3, r2
 8001396:	f200 80c7 	bhi.w	8001528 <main+0x610>
 800139a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800139e:	4a7c      	ldr	r2, [pc, #496]	@ (8001590 <main+0x678>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	f000 8082 	beq.w	80014aa <main+0x592>
 80013a6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013aa:	4a79      	ldr	r2, [pc, #484]	@ (8001590 <main+0x678>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	f200 80bb 	bhi.w	8001528 <main+0x610>
 80013b2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013b6:	4a77      	ldr	r2, [pc, #476]	@ (8001594 <main+0x67c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d054      	beq.n	8001466 <main+0x54e>
 80013bc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013c0:	4a74      	ldr	r2, [pc, #464]	@ (8001594 <main+0x67c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	f200 80b0 	bhi.w	8001528 <main+0x610>
 80013c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013cc:	4a72      	ldr	r2, [pc, #456]	@ (8001598 <main+0x680>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d027      	beq.n	8001422 <main+0x50a>
 80013d2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013d6:	4a71      	ldr	r2, [pc, #452]	@ (800159c <main+0x684>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	f040 80a5 	bne.w	8001528 <main+0x610>
                    {
                    case 0x00FF18E7:
                        dzidaDoPrzodu();
 80013de:	f7ff fb01 	bl	80009e4 <dzidaDoPrzodu>
                        sprintf(lcd_action_msg, "Cmd: Naprzod");
 80013e2:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 80013e6:	496e      	ldr	r1, [pc, #440]	@ (80015a0 <main+0x688>)
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 fcef 	bl	8003dcc <siprintf>
                        is_moving_remotely = true;
 80013ee:	4b60      	ldr	r3, [pc, #384]	@ (8001570 <main+0x658>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
                        last_remote_movement_command_time = HAL_GetTick();
 80013f4:	f000 fe88 	bl	8002108 <HAL_GetTick>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a6a      	ldr	r2, [pc, #424]	@ (80015a4 <main+0x68c>)
 80013fc:	6013      	str	r3, [r2, #0]
                        break;
 80013fe:	e0ec      	b.n	80015da <main+0x6c2>
                    case 0x00FF4AB5:
                        doTylu();
 8001400:	f7ff fb1c 	bl	8000a3c <doTylu>
                        sprintf(lcd_action_msg, "Cmd: Tyl");
 8001404:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001408:	4967      	ldr	r1, [pc, #412]	@ (80015a8 <main+0x690>)
 800140a:	4618      	mov	r0, r3
 800140c:	f002 fcde 	bl	8003dcc <siprintf>
                        is_moving_remotely = true;
 8001410:	4b57      	ldr	r3, [pc, #348]	@ (8001570 <main+0x658>)
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
                        last_remote_movement_command_time = HAL_GetTick();
 8001416:	f000 fe77 	bl	8002108 <HAL_GetTick>
 800141a:	4603      	mov	r3, r0
 800141c:	4a61      	ldr	r2, [pc, #388]	@ (80015a4 <main+0x68c>)
 800141e:	6013      	str	r3, [r2, #0]
                        break;
 8001420:	e0db      	b.n	80015da <main+0x6c2>
                    case 0x00FF10EF:
                        lewy90();
 8001422:	f7ff fbb7 	bl	8000b94 <lewy90>
                        sprintf(lcd_action_msg, "Cmd: Obr Lewo");
 8001426:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 800142a:	4960      	ldr	r1, [pc, #384]	@ (80015ac <main+0x694>)
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fccd 	bl	8003dcc <siprintf>
                        is_moving_remotely = true;
 8001432:	4b4f      	ldr	r3, [pc, #316]	@ (8001570 <main+0x658>)
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
                        last_remote_movement_command_time = HAL_GetTick();
 8001438:	f000 fe66 	bl	8002108 <HAL_GetTick>
 800143c:	4603      	mov	r3, r0
 800143e:	4a59      	ldr	r2, [pc, #356]	@ (80015a4 <main+0x68c>)
 8001440:	6013      	str	r3, [r2, #0]
                        break;
 8001442:	e0ca      	b.n	80015da <main+0x6c2>
                    case 0x00FF5AA5:
                        prawy90();
 8001444:	f7ff fbd2 	bl	8000bec <prawy90>
                        sprintf(lcd_action_msg, "Cmd: Obr Prawo");
 8001448:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 800144c:	4958      	ldr	r1, [pc, #352]	@ (80015b0 <main+0x698>)
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fcbc 	bl	8003dcc <siprintf>
                        is_moving_remotely = true;
 8001454:	4b46      	ldr	r3, [pc, #280]	@ (8001570 <main+0x658>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
                        last_remote_movement_command_time = HAL_GetTick();
 800145a:	f000 fe55 	bl	8002108 <HAL_GetTick>
 800145e:	4603      	mov	r3, r0
 8001460:	4a50      	ldr	r2, [pc, #320]	@ (80015a4 <main+0x68c>)
 8001462:	6013      	str	r3, [r2, #0]
                        break;
 8001464:	e0b9      	b.n	80015da <main+0x6c2>
                    case 0x00FF22DD:
                        skretWLewo();
 8001466:	f7ff fb15 	bl	8000a94 <skretWLewo>
                        sprintf(lcd_action_msg, "Cmd: Skret L");
 800146a:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 800146e:	4951      	ldr	r1, [pc, #324]	@ (80015b4 <main+0x69c>)
 8001470:	4618      	mov	r0, r3
 8001472:	f002 fcab 	bl	8003dcc <siprintf>
                        is_moving_remotely = true;
 8001476:	4b3e      	ldr	r3, [pc, #248]	@ (8001570 <main+0x658>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
                        last_remote_movement_command_time = HAL_GetTick();
 800147c:	f000 fe44 	bl	8002108 <HAL_GetTick>
 8001480:	4603      	mov	r3, r0
 8001482:	4a48      	ldr	r2, [pc, #288]	@ (80015a4 <main+0x68c>)
 8001484:	6013      	str	r3, [r2, #0]
                        break;
 8001486:	e0a8      	b.n	80015da <main+0x6c2>
                    case 0x00FFC23D:
                        skretWPrawo();
 8001488:	f7ff fb30 	bl	8000aec <skretWPrawo>
                        sprintf(lcd_action_msg, "Cmd: Skret P");
 800148c:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001490:	4949      	ldr	r1, [pc, #292]	@ (80015b8 <main+0x6a0>)
 8001492:	4618      	mov	r0, r3
 8001494:	f002 fc9a 	bl	8003dcc <siprintf>
                        is_moving_remotely = true;
 8001498:	4b35      	ldr	r3, [pc, #212]	@ (8001570 <main+0x658>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
                        last_remote_movement_command_time = HAL_GetTick();
 800149e:	f000 fe33 	bl	8002108 <HAL_GetTick>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a3f      	ldr	r2, [pc, #252]	@ (80015a4 <main+0x68c>)
 80014a6:	6013      	str	r3, [r2, #0]
                        break;
 80014a8:	e097      	b.n	80015da <main+0x6c2>

                    case 0x00FF38C7:
                        stop();
 80014aa:	f7ff fb4b 	bl	8000b44 <stop>
                        sprintf(lcd_action_msg, "Cmd: STOP");
 80014ae:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 80014b2:	4942      	ldr	r1, [pc, #264]	@ (80015bc <main+0x6a4>)
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fc89 	bl	8003dcc <siprintf>
                        is_moving_remotely = false;
 80014ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001570 <main+0x658>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
                        discrete_action_has_been_processed_this_cycle = true;
 80014c0:	2301      	movs	r3, #1
 80014c2:	f887 31d1 	strb.w	r3, [r7, #465]	@ 0x1d1
                        break;
 80014c6:	e088      	b.n	80015da <main+0x6c2>
                    case 0x00FFA25D:
                        duty = DUTY_SLOW;
 80014c8:	4b3d      	ldr	r3, [pc, #244]	@ (80015c0 <main+0x6a8>)
 80014ca:	f240 427e 	movw	r2, #1150	@ 0x47e
 80014ce:	601a      	str	r2, [r3, #0]
                        sprintf(lcd_action_msg, "Predk: Wolno");
 80014d0:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 80014d4:	493b      	ldr	r1, [pc, #236]	@ (80015c4 <main+0x6ac>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 fc78 	bl	8003dcc <siprintf>
                        if (is_moving_remotely)
 80014dc:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <main+0x658>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d004      	beq.n	80014f0 <main+0x5d8>
                            last_remote_movement_command_time = HAL_GetTick();
 80014e6:	f000 fe0f 	bl	8002108 <HAL_GetTick>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a2d      	ldr	r2, [pc, #180]	@ (80015a4 <main+0x68c>)
 80014ee:	6013      	str	r3, [r2, #0]
                        discrete_action_has_been_processed_this_cycle = true;
 80014f0:	2301      	movs	r3, #1
 80014f2:	f887 31d1 	strb.w	r3, [r7, #465]	@ 0x1d1
                        break;
 80014f6:	e070      	b.n	80015da <main+0x6c2>
                    case 0x00FFE21D:
                        duty = DUTY_FAST;
 80014f8:	4b31      	ldr	r3, [pc, #196]	@ (80015c0 <main+0x6a8>)
 80014fa:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 80014fe:	601a      	str	r2, [r3, #0]
                        sprintf(lcd_action_msg, "Predk: Szybko");
 8001500:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001504:	4930      	ldr	r1, [pc, #192]	@ (80015c8 <main+0x6b0>)
 8001506:	4618      	mov	r0, r3
 8001508:	f002 fc60 	bl	8003dcc <siprintf>
                        if (is_moving_remotely)
 800150c:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <main+0x658>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d004      	beq.n	8001520 <main+0x608>
                            last_remote_movement_command_time = HAL_GetTick();
 8001516:	f000 fdf7 	bl	8002108 <HAL_GetTick>
 800151a:	4603      	mov	r3, r0
 800151c:	4a21      	ldr	r2, [pc, #132]	@ (80015a4 <main+0x68c>)
 800151e:	6013      	str	r3, [r2, #0]
                        discrete_action_has_been_processed_this_cycle = true;
 8001520:	2301      	movs	r3, #1
 8001522:	f887 31d1 	strb.w	r3, [r7, #465]	@ 0x1d1
                        break;
 8001526:	e058      	b.n	80015da <main+0x6c2>

                    default:
                        if (lcd_action_msg[0] == '\0')
 8001528:	f897 31a4 	ldrb.w	r3, [r7, #420]	@ 0x1a4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d153      	bne.n	80015d8 <main+0x6c0>
                        {
                            sprintf(lcd_action_msg, "IR Kod ???");
 8001530:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001534:	4925      	ldr	r1, [pc, #148]	@ (80015cc <main+0x6b4>)
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fc48 	bl	8003dcc <siprintf>
                        }
                        break;
 800153c:	e04c      	b.n	80015d8 <main+0x6c0>
                    }
                }
                else
                {
                    if (lcd_action_msg[0] == '\0' &&
 800153e:	f897 31a4 	ldrb.w	r3, [r7, #420]	@ 0x1a4
 8001542:	2b00      	cmp	r3, #0
 8001544:	d149      	bne.n	80015da <main+0x6c2>
 8001546:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800154a:	4a21      	ldr	r2, [pc, #132]	@ (80015d0 <main+0x6b8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d044      	beq.n	80015da <main+0x6c2>
                        ir_code_to_process != 0x00FF6897 &&
 8001550:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001554:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <main+0x650>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d03f      	beq.n	80015da <main+0x6c2>
                        ir_code_to_process != 0x00FFB04F)
                    {
                        sprintf(lcd_action_msg, "IR (Tryb Auto)");
 800155a:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 800155e:	491d      	ldr	r1, [pc, #116]	@ (80015d4 <main+0x6bc>)
 8001560:	4618      	mov	r0, r3
 8001562:	f002 fc33 	bl	8003dcc <siprintf>
 8001566:	e038      	b.n	80015da <main+0x6c2>
 8001568:	00ffb04f 	.word	0x00ffb04f
 800156c:	2000022c 	.word	0x2000022c
 8001570:	200003c8 	.word	0x200003c8
 8001574:	20000034 	.word	0x20000034
 8001578:	08004744 	.word	0x08004744
 800157c:	00ffe21d 	.word	0x00ffe21d
 8001580:	00ffc23d 	.word	0x00ffc23d
 8001584:	00ffa25d 	.word	0x00ffa25d
 8001588:	00ff5aa5 	.word	0x00ff5aa5
 800158c:	00ff4ab5 	.word	0x00ff4ab5
 8001590:	00ff38c7 	.word	0x00ff38c7
 8001594:	00ff22dd 	.word	0x00ff22dd
 8001598:	00ff10ef 	.word	0x00ff10ef
 800159c:	00ff18e7 	.word	0x00ff18e7
 80015a0:	080047bc 	.word	0x080047bc
 80015a4:	200003cc 	.word	0x200003cc
 80015a8:	080047cc 	.word	0x080047cc
 80015ac:	080047d8 	.word	0x080047d8
 80015b0:	080047e8 	.word	0x080047e8
 80015b4:	080047f8 	.word	0x080047f8
 80015b8:	08004808 	.word	0x08004808
 80015bc:	08004818 	.word	0x08004818
 80015c0:	20000030 	.word	0x20000030
 80015c4:	08004824 	.word	0x08004824
 80015c8:	08004834 	.word	0x08004834
 80015cc:	08004844 	.word	0x08004844
 80015d0:	00ff6897 	.word	0x00ff6897
 80015d4:	08004850 	.word	0x08004850
                        break;
 80015d8:	bf00      	nop
                    }
                }

                if (discrete_action_has_been_processed_this_cycle)
 80015da:	f897 31d1 	ldrb.w	r3, [r7, #465]	@ 0x1d1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <main+0x6dc>
                {
                    last_processed_discrete_ir_code = ir_code_to_process;
 80015e2:	4a8f      	ldr	r2, [pc, #572]	@ (8001820 <main+0x908>)
 80015e4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80015e8:	6013      	str	r3, [r2, #0]
                    last_processed_discrete_ir_time = HAL_GetTick();
 80015ea:	f000 fd8d 	bl	8002108 <HAL_GetTick>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a8c      	ldr	r2, [pc, #560]	@ (8001824 <main+0x90c>)
 80015f2:	6013      	str	r3, [r2, #0]
                }
            }

            if (lcd_action_msg[0] != '\0')
 80015f4:	f897 31a4 	ldrb.w	r3, [r7, #420]	@ 0x1a4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <main+0x6f6>
            {
                LCD_SetCursor(1, 0);
 80015fc:	2100      	movs	r1, #0
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff f896 	bl	8000730 <LCD_SetCursor>
                LCD_SendString(lcd_action_msg);
 8001604:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff f8b0 	bl	800076e <LCD_SendString>
            }
        }

        if (control_mode == 1)
 800160e:	4b86      	ldr	r3, [pc, #536]	@ (8001828 <main+0x910>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d136      	bne.n	8001686 <main+0x76e>
        {
            if (is_moving_remotely && (HAL_GetTick() - last_remote_movement_command_time > REMOTE_MOVEMENT_TIMEOUT))
 8001618:	4b84      	ldr	r3, [pc, #528]	@ (800182c <main+0x914>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d02d      	beq.n	800167e <main+0x766>
 8001622:	f000 fd71 	bl	8002108 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	4b81      	ldr	r3, [pc, #516]	@ (8001830 <main+0x918>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001632:	d924      	bls.n	800167e <main+0x766>
            {
                stop();
 8001634:	f7ff fa86 	bl	8000b44 <stop>
                is_moving_remotely = false;
 8001638:	4b7c      	ldr	r3, [pc, #496]	@ (800182c <main+0x914>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]

                LCD_SetCursor(0, 0);
 800163e:	2100      	movs	r1, #0
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff f875 	bl	8000730 <LCD_SetCursor>
                LCD_SendString(clear_line);
 8001646:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff f88f 	bl	800076e <LCD_SendString>
                LCD_SetCursor(1, 0);
 8001650:	2100      	movs	r1, #0
 8001652:	2001      	movs	r0, #1
 8001654:	f7ff f86c 	bl	8000730 <LCD_SetCursor>
                LCD_SendString(clear_line);
 8001658:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f886 	bl	800076e <LCD_SendString>
                LCD_SetCursor(0, 0);
 8001662:	2100      	movs	r1, #0
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff f863 	bl	8000730 <LCD_SetCursor>
                LCD_SendString("Pilot Timeout!");
 800166a:	4872      	ldr	r0, [pc, #456]	@ (8001834 <main+0x91c>)
 800166c:	f7ff f87f 	bl	800076e <LCD_SendString>
                LCD_SetCursor(1, 0);
 8001670:	2100      	movs	r1, #0
 8001672:	2001      	movs	r0, #1
 8001674:	f7ff f85c 	bl	8000730 <LCD_SetCursor>
                LCD_SendString("STOP");
 8001678:	486f      	ldr	r0, [pc, #444]	@ (8001838 <main+0x920>)
 800167a:	f7ff f878 	bl	800076e <LCD_SendString>
            }
            HAL_Delay(20);
 800167e:	2014      	movs	r0, #20
 8001680:	f000 fd4e 	bl	8002120 <HAL_Delay>
 8001684:	e4c8      	b.n	8001018 <main+0x100>
        }
        else
        {
            lewy = HAL_GPIO_ReadPin(IR1_GPIO_Port, IR1_Pin);
 8001686:	2108      	movs	r1, #8
 8001688:	486c      	ldr	r0, [pc, #432]	@ (800183c <main+0x924>)
 800168a:	f001 f835 	bl	80026f8 <HAL_GPIO_ReadPin>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	4b6b      	ldr	r3, [pc, #428]	@ (8001840 <main+0x928>)
 8001694:	601a      	str	r2, [r3, #0]
            srodek = HAL_GPIO_ReadPin(IR2_GPIO_Port, IR2_Pin);
 8001696:	2120      	movs	r1, #32
 8001698:	4868      	ldr	r0, [pc, #416]	@ (800183c <main+0x924>)
 800169a:	f001 f82d 	bl	80026f8 <HAL_GPIO_ReadPin>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b68      	ldr	r3, [pc, #416]	@ (8001844 <main+0x92c>)
 80016a4:	601a      	str	r2, [r3, #0]
            prawy = HAL_GPIO_ReadPin(IR3_GPIO_Port, IR3_Pin);
 80016a6:	2110      	movs	r1, #16
 80016a8:	4864      	ldr	r0, [pc, #400]	@ (800183c <main+0x924>)
 80016aa:	f001 f825 	bl	80026f8 <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b65      	ldr	r3, [pc, #404]	@ (8001848 <main+0x930>)
 80016b4:	601a      	str	r2, [r3, #0]

            if (lewy && srodek && prawy)
 80016b6:	4b62      	ldr	r3, [pc, #392]	@ (8001840 <main+0x928>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00d      	beq.n	80016da <main+0x7c2>
 80016be:	4b61      	ldr	r3, [pc, #388]	@ (8001844 <main+0x92c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <main+0x7c2>
 80016c6:	4b60      	ldr	r3, [pc, #384]	@ (8001848 <main+0x930>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <main+0x7c2>
            {
                searchLine(bitSkretu);
 80016ce:	4b5f      	ldr	r3, [pc, #380]	@ (800184c <main+0x934>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fab6 	bl	8000c44 <searchLine>
 80016d8:	e09c      	b.n	8001814 <main+0x8fc>
            }
            else if (!lewy && !srodek && !prawy)
 80016da:	4b59      	ldr	r3, [pc, #356]	@ (8001840 <main+0x928>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d114      	bne.n	800170c <main+0x7f4>
 80016e2:	4b58      	ldr	r3, [pc, #352]	@ (8001844 <main+0x92c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d110      	bne.n	800170c <main+0x7f4>
 80016ea:	4b57      	ldr	r3, [pc, #348]	@ (8001848 <main+0x930>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <main+0x7f4>
            {
                duty = DUTY_SLOW;
 80016f2:	4b57      	ldr	r3, [pc, #348]	@ (8001850 <main+0x938>)
 80016f4:	f240 427e 	movw	r2, #1150	@ 0x47e
 80016f8:	601a      	str	r2, [r3, #0]
                dzidaDoPrzodu();
 80016fa:	f7ff f973 	bl	80009e4 <dzidaDoPrzodu>
                bitSkretu = 0;
 80016fe:	4b53      	ldr	r3, [pc, #332]	@ (800184c <main+0x934>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
                LCD_DrawFace(1);
 8001704:	2001      	movs	r0, #1
 8001706:	f7ff f8b3 	bl	8000870 <LCD_DrawFace>
 800170a:	e083      	b.n	8001814 <main+0x8fc>
            }
            else if (lewy && !srodek && prawy)
 800170c:	4b4c      	ldr	r3, [pc, #304]	@ (8001840 <main+0x928>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d014      	beq.n	800173e <main+0x826>
 8001714:	4b4b      	ldr	r3, [pc, #300]	@ (8001844 <main+0x92c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d110      	bne.n	800173e <main+0x826>
 800171c:	4b4a      	ldr	r3, [pc, #296]	@ (8001848 <main+0x930>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00c      	beq.n	800173e <main+0x826>
            {
                duty = DUTY_FAST;
 8001724:	4b4a      	ldr	r3, [pc, #296]	@ (8001850 <main+0x938>)
 8001726:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 800172a:	601a      	str	r2, [r3, #0]
                dzidaDoPrzodu();
 800172c:	f7ff f95a 	bl	80009e4 <dzidaDoPrzodu>
                bitSkretu = 0;
 8001730:	4b46      	ldr	r3, [pc, #280]	@ (800184c <main+0x934>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
                LCD_DrawFace(1);
 8001736:	2001      	movs	r0, #1
 8001738:	f7ff f89a 	bl	8000870 <LCD_DrawFace>
 800173c:	e06a      	b.n	8001814 <main+0x8fc>
            }
            else if (!lewy && !srodek && prawy)
 800173e:	4b40      	ldr	r3, [pc, #256]	@ (8001840 <main+0x928>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d114      	bne.n	8001770 <main+0x858>
 8001746:	4b3f      	ldr	r3, [pc, #252]	@ (8001844 <main+0x92c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d110      	bne.n	8001770 <main+0x858>
 800174e:	4b3e      	ldr	r3, [pc, #248]	@ (8001848 <main+0x930>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00c      	beq.n	8001770 <main+0x858>
            {
                duty = DUTY_SLOW;
 8001756:	4b3e      	ldr	r3, [pc, #248]	@ (8001850 <main+0x938>)
 8001758:	f240 427e 	movw	r2, #1150	@ 0x47e
 800175c:	601a      	str	r2, [r3, #0]
                skretWLewo();
 800175e:	f7ff f999 	bl	8000a94 <skretWLewo>
                bitSkretu = 1;
 8001762:	4b3a      	ldr	r3, [pc, #232]	@ (800184c <main+0x934>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]
                LCD_DrawFace(0);
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff f881 	bl	8000870 <LCD_DrawFace>
 800176e:	e051      	b.n	8001814 <main+0x8fc>
            }
            else if (lewy && !srodek && !prawy)
 8001770:	4b33      	ldr	r3, [pc, #204]	@ (8001840 <main+0x928>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d015      	beq.n	80017a4 <main+0x88c>
 8001778:	4b32      	ldr	r3, [pc, #200]	@ (8001844 <main+0x92c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d111      	bne.n	80017a4 <main+0x88c>
 8001780:	4b31      	ldr	r3, [pc, #196]	@ (8001848 <main+0x930>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10d      	bne.n	80017a4 <main+0x88c>
            {
                duty = DUTY_SLOW;
 8001788:	4b31      	ldr	r3, [pc, #196]	@ (8001850 <main+0x938>)
 800178a:	f240 427e 	movw	r2, #1150	@ 0x47e
 800178e:	601a      	str	r2, [r3, #0]
                skretWPrawo();
 8001790:	f7ff f9ac 	bl	8000aec <skretWPrawo>
                bitSkretu = -1;
 8001794:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <main+0x934>)
 8001796:	f04f 32ff 	mov.w	r2, #4294967295
 800179a:	601a      	str	r2, [r3, #0]
                LCD_DrawFace(2);
 800179c:	2002      	movs	r0, #2
 800179e:	f7ff f867 	bl	8000870 <LCD_DrawFace>
 80017a2:	e037      	b.n	8001814 <main+0x8fc>
            }
            else if (!lewy && srodek && prawy)
 80017a4:	4b26      	ldr	r3, [pc, #152]	@ (8001840 <main+0x928>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d114      	bne.n	80017d6 <main+0x8be>
 80017ac:	4b25      	ldr	r3, [pc, #148]	@ (8001844 <main+0x92c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d010      	beq.n	80017d6 <main+0x8be>
 80017b4:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <main+0x930>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00c      	beq.n	80017d6 <main+0x8be>
            {
                duty = DUTY_SLOW;
 80017bc:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <main+0x938>)
 80017be:	f240 427e 	movw	r2, #1150	@ 0x47e
 80017c2:	601a      	str	r2, [r3, #0]
                skretWLewo();
 80017c4:	f7ff f966 	bl	8000a94 <skretWLewo>
                bitSkretu = 1;
 80017c8:	4b20      	ldr	r3, [pc, #128]	@ (800184c <main+0x934>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
                LCD_DrawFace(0);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7ff f84e 	bl	8000870 <LCD_DrawFace>
 80017d4:	e01e      	b.n	8001814 <main+0x8fc>
            }
            else if (lewy && srodek && !prawy)
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <main+0x928>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d015      	beq.n	800180a <main+0x8f2>
 80017de:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <main+0x92c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d011      	beq.n	800180a <main+0x8f2>
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <main+0x930>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10d      	bne.n	800180a <main+0x8f2>
            {
                duty = DUTY_SLOW;
 80017ee:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <main+0x938>)
 80017f0:	f240 427e 	movw	r2, #1150	@ 0x47e
 80017f4:	601a      	str	r2, [r3, #0]
                skretWPrawo();
 80017f6:	f7ff f979 	bl	8000aec <skretWPrawo>
                bitSkretu = -1;
 80017fa:	4b14      	ldr	r3, [pc, #80]	@ (800184c <main+0x934>)
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	601a      	str	r2, [r3, #0]
                LCD_DrawFace(2);
 8001802:	2002      	movs	r0, #2
 8001804:	f7ff f834 	bl	8000870 <LCD_DrawFace>
 8001808:	e004      	b.n	8001814 <main+0x8fc>
            }
            else
            {
                searchLine(bitSkretu);
 800180a:	4b10      	ldr	r3, [pc, #64]	@ (800184c <main+0x934>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fa18 	bl	8000c44 <searchLine>
            }
            HAL_Delay(50);
 8001814:	2032      	movs	r0, #50	@ 0x32
 8001816:	f000 fc83 	bl	8002120 <HAL_Delay>
    {
 800181a:	f7ff bbfd 	b.w	8001018 <main+0x100>
 800181e:	bf00      	nop
 8001820:	2000003c 	.word	0x2000003c
 8001824:	200003d0 	.word	0x200003d0
 8001828:	2000022c 	.word	0x2000022c
 800182c:	200003c8 	.word	0x200003c8
 8001830:	200003cc 	.word	0x200003cc
 8001834:	08004860 	.word	0x08004860
 8001838:	08004870 	.word	0x08004870
 800183c:	40020400 	.word	0x40020400
 8001840:	20000220 	.word	0x20000220
 8001844:	20000228 	.word	0x20000228
 8001848:	20000224 	.word	0x20000224
 800184c:	20000034 	.word	0x20000034
 8001850:	20000030 	.word	0x20000030

08001854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b094      	sub	sp, #80	@ 0x50
 8001858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	2230      	movs	r2, #48	@ 0x30
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f002 fad4 	bl	8003e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	4b22      	ldr	r3, [pc, #136]	@ (8001908 <SystemClock_Config+0xb4>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001880:	4a21      	ldr	r2, [pc, #132]	@ (8001908 <SystemClock_Config+0xb4>)
 8001882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001886:	6413      	str	r3, [r2, #64]	@ 0x40
 8001888:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <SystemClock_Config+0xb4>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <SystemClock_Config+0xb8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1b      	ldr	r2, [pc, #108]	@ (800190c <SystemClock_Config+0xb8>)
 800189e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <SystemClock_Config+0xb8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018b0:	2302      	movs	r3, #2
 80018b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018b4:	2301      	movs	r3, #1
 80018b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b8:	2310      	movs	r3, #16
 80018ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018bc:	2300      	movs	r3, #0
 80018be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c0:	f107 0320 	add.w	r3, r7, #32
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 ff7b 	bl	80027c0 <HAL_RCC_OscConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80018d0:	f000 fa12 	bl	8001cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d4:	230f      	movs	r3, #15
 80018d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 f9de 	bl	8002cb0 <HAL_RCC_ClockConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80018fa:	f000 f9fd 	bl	8001cf8 <Error_Handler>
  }
}
 80018fe:	bf00      	nop
 8001900:	3750      	adds	r7, #80	@ 0x50
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	40007000 	.word	0x40007000

08001910 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08e      	sub	sp, #56	@ 0x38
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001916:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	615a      	str	r2, [r3, #20]
 800193e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001940:	4b32      	ldr	r3, [pc, #200]	@ (8001a0c <MX_TIM2_Init+0xfc>)
 8001942:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001946:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001948:	4b30      	ldr	r3, [pc, #192]	@ (8001a0c <MX_TIM2_Init+0xfc>)
 800194a:	2200      	movs	r2, #0
 800194c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a0c <MX_TIM2_Init+0xfc>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600;
 8001954:	4b2d      	ldr	r3, [pc, #180]	@ (8001a0c <MX_TIM2_Init+0xfc>)
 8001956:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800195a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a0c <MX_TIM2_Init+0xfc>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001962:	4b2a      	ldr	r3, [pc, #168]	@ (8001a0c <MX_TIM2_Init+0xfc>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001968:	4828      	ldr	r0, [pc, #160]	@ (8001a0c <MX_TIM2_Init+0xfc>)
 800196a:	f001 fb4d 	bl	8003008 <HAL_TIM_Base_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001974:	f000 f9c0 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800197e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001982:	4619      	mov	r1, r3
 8001984:	4821      	ldr	r0, [pc, #132]	@ (8001a0c <MX_TIM2_Init+0xfc>)
 8001986:	f001 fe19 	bl	80035bc <HAL_TIM_ConfigClockSource>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001990:	f000 f9b2 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001994:	481d      	ldr	r0, [pc, #116]	@ (8001a0c <MX_TIM2_Init+0xfc>)
 8001996:	f001 fbe1 	bl	800315c <HAL_TIM_PWM_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80019a0:	f000 f9aa 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ac:	f107 0320 	add.w	r3, r7, #32
 80019b0:	4619      	mov	r1, r3
 80019b2:	4816      	ldr	r0, [pc, #88]	@ (8001a0c <MX_TIM2_Init+0xfc>)
 80019b4:	f002 f99c 	bl	8003cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80019be:	f000 f99b 	bl	8001cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c2:	2360      	movs	r3, #96	@ 0x60
 80019c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2200      	movs	r2, #0
 80019d6:	4619      	mov	r1, r3
 80019d8:	480c      	ldr	r0, [pc, #48]	@ (8001a0c <MX_TIM2_Init+0xfc>)
 80019da:	f001 fd2d 	bl	8003438 <HAL_TIM_PWM_ConfigChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019e4:	f000 f988 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2204      	movs	r2, #4
 80019ec:	4619      	mov	r1, r3
 80019ee:	4807      	ldr	r0, [pc, #28]	@ (8001a0c <MX_TIM2_Init+0xfc>)
 80019f0:	f001 fd22 	bl	8003438 <HAL_TIM_PWM_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80019fa:	f000 f97d 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019fe:	4803      	ldr	r0, [pc, #12]	@ (8001a0c <MX_TIM2_Init+0xfc>)
 8001a00:	f000 fa12 	bl	8001e28 <HAL_TIM_MspPostInit>

}
 8001a04:	bf00      	nop
 8001a06:	3738      	adds	r7, #56	@ 0x38
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000148 	.word	0x20000148

08001a10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a24:	463b      	mov	r3, r7
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <MX_TIM3_Init+0x94>)
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa8 <MX_TIM3_Init+0x98>)
 8001a30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <MX_TIM3_Init+0x94>)
 8001a34:	220f      	movs	r2, #15
 8001a36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <MX_TIM3_Init+0x94>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <MX_TIM3_Init+0x94>)
 8001a40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a46:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <MX_TIM3_Init+0x94>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <MX_TIM3_Init+0x94>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a52:	4814      	ldr	r0, [pc, #80]	@ (8001aa4 <MX_TIM3_Init+0x94>)
 8001a54:	f001 fad8 	bl	8003008 <HAL_TIM_Base_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a5e:	f000 f94b 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a68:	f107 0308 	add.w	r3, r7, #8
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480d      	ldr	r0, [pc, #52]	@ (8001aa4 <MX_TIM3_Init+0x94>)
 8001a70:	f001 fda4 	bl	80035bc <HAL_TIM_ConfigClockSource>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a7a:	f000 f93d 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a86:	463b      	mov	r3, r7
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	@ (8001aa4 <MX_TIM3_Init+0x94>)
 8001a8c:	f002 f930 	bl	8003cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001a96:	f000 f92f 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000190 	.word	0x20000190
 8001aa8:	40000400 	.word	0x40000400

08001aac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08e      	sub	sp, #56	@ 0x38
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac0:	f107 0320 	add.w	r3, r7, #32
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	615a      	str	r2, [r3, #20]
 8001ada:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001adc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b90 <MX_TIM4_Init+0xe4>)
 8001ade:	4a2d      	ldr	r2, [pc, #180]	@ (8001b94 <MX_TIM4_Init+0xe8>)
 8001ae0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b90 <MX_TIM4_Init+0xe4>)
 8001ae4:	2247      	movs	r2, #71	@ 0x47
 8001ae6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae8:	4b29      	ldr	r3, [pc, #164]	@ (8001b90 <MX_TIM4_Init+0xe4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 504;
 8001aee:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <MX_TIM4_Init+0xe4>)
 8001af0:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8001af4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af6:	4b26      	ldr	r3, [pc, #152]	@ (8001b90 <MX_TIM4_Init+0xe4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afc:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <MX_TIM4_Init+0xe4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b02:	4823      	ldr	r0, [pc, #140]	@ (8001b90 <MX_TIM4_Init+0xe4>)
 8001b04:	f001 fa80 	bl	8003008 <HAL_TIM_Base_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b0e:	f000 f8f3 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b16:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	481c      	ldr	r0, [pc, #112]	@ (8001b90 <MX_TIM4_Init+0xe4>)
 8001b20:	f001 fd4c 	bl	80035bc <HAL_TIM_ConfigClockSource>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b2a:	f000 f8e5 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b2e:	4818      	ldr	r0, [pc, #96]	@ (8001b90 <MX_TIM4_Init+0xe4>)
 8001b30:	f001 fb14 	bl	800315c <HAL_TIM_PWM_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b3a:	f000 f8dd 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b46:	f107 0320 	add.w	r3, r7, #32
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4810      	ldr	r0, [pc, #64]	@ (8001b90 <MX_TIM4_Init+0xe4>)
 8001b4e:	f002 f8cf 	bl	8003cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b58:	f000 f8ce 	bl	8001cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b5c:	2360      	movs	r3, #96	@ 0x60
 8001b5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4619      	mov	r1, r3
 8001b72:	4807      	ldr	r0, [pc, #28]	@ (8001b90 <MX_TIM4_Init+0xe4>)
 8001b74:	f001 fc60 	bl	8003438 <HAL_TIM_PWM_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b7e:	f000 f8bb 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b82:	4803      	ldr	r0, [pc, #12]	@ (8001b90 <MX_TIM4_Init+0xe4>)
 8001b84:	f000 f950 	bl	8001e28 <HAL_TIM_MspPostInit>

}
 8001b88:	bf00      	nop
 8001b8a:	3738      	adds	r7, #56	@ 0x38
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	200001d8 	.word	0x200001d8
 8001b94:	40000800 	.word	0x40000800

08001b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ce8 <MX_GPIO_Init+0x150>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	4a4c      	ldr	r2, [pc, #304]	@ (8001ce8 <MX_GPIO_Init+0x150>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce8 <MX_GPIO_Init+0x150>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	4b46      	ldr	r3, [pc, #280]	@ (8001ce8 <MX_GPIO_Init+0x150>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	4a45      	ldr	r2, [pc, #276]	@ (8001ce8 <MX_GPIO_Init+0x150>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bda:	4b43      	ldr	r3, [pc, #268]	@ (8001ce8 <MX_GPIO_Init+0x150>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce8 <MX_GPIO_Init+0x150>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a3e      	ldr	r2, [pc, #248]	@ (8001ce8 <MX_GPIO_Init+0x150>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce8 <MX_GPIO_Init+0x150>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001c02:	2200      	movs	r2, #0
 8001c04:	f241 514f 	movw	r1, #5455	@ 0x154f
 8001c08:	4838      	ldr	r0, [pc, #224]	@ (8001cec <MX_GPIO_Init+0x154>)
 8001c0a:	f000 fd8d 	bl	8002728 <HAL_GPIO_WritePin>
                          |IN4_Pin|IN3_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|D7_Pin|D4_Pin|D5_Pin
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f44f 51d9 	mov.w	r1, #6944	@ 0x1b20
 8001c14:	4836      	ldr	r0, [pc, #216]	@ (8001cf0 <MX_GPIO_Init+0x158>)
 8001c16:	f000 fd87 	bl	8002728 <HAL_GPIO_WritePin>
                          |D6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Pin|RS_Pin, GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 8001c20:	4834      	ldr	r0, [pc, #208]	@ (8001cf4 <MX_GPIO_Init+0x15c>)
 8001c22:	f000 fd81 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	4619      	mov	r1, r3
 8001c3a:	482c      	ldr	r0, [pc, #176]	@ (8001cec <MX_GPIO_Init+0x154>)
 8001c3c:	f000 fbd8 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           IN4_Pin IN3_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001c40:	f241 534f 	movw	r3, #5455	@ 0x154f
 8001c44:	60fb      	str	r3, [r7, #12]
                          |IN4_Pin|IN3_Pin|IN1_Pin|IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c46:	2301      	movs	r3, #1
 8001c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	4619      	mov	r1, r3
 8001c58:	4824      	ldr	r0, [pc, #144]	@ (8001cec <MX_GPIO_Init+0x154>)
 8001c5a:	f000 fbc9 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin D7_Pin D4_Pin D5_Pin
                           D6_Pin */
  GPIO_InitStruct.Pin = LED_Pin|D7_Pin|D4_Pin|D5_Pin
 8001c5e:	f44f 53d9 	mov.w	r3, #6944	@ 0x1b20
 8001c62:	60fb      	str	r3, [r7, #12]
                          |D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	4619      	mov	r1, r3
 8001c76:	481e      	ldr	r0, [pc, #120]	@ (8001cf0 <MX_GPIO_Init+0x158>)
 8001c78:	f000 fbba 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Pin RS_Pin */
  GPIO_InitStruct.Pin = E_Pin|RS_Pin;
 8001c7c:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001c80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	4619      	mov	r1, r3
 8001c94:	4817      	ldr	r0, [pc, #92]	@ (8001cf4 <MX_GPIO_Init+0x15c>)
 8001c96:	f000 fbab 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Pin */
  GPIO_InitStruct.Pin = IR_Pin;
 8001c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ca0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	4619      	mov	r1, r3
 8001cb0:	480f      	ldr	r0, [pc, #60]	@ (8001cf0 <MX_GPIO_Init+0x158>)
 8001cb2:	f000 fb9d 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR1_Pin IR3_Pin IR2_Pin */
  GPIO_InitStruct.Pin = IR1_Pin|IR3_Pin|IR2_Pin;
 8001cb6:	2338      	movs	r3, #56	@ 0x38
 8001cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480a      	ldr	r0, [pc, #40]	@ (8001cf4 <MX_GPIO_Init+0x15c>)
 8001cca:	f000 fb91 	bl	80023f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	2028      	movs	r0, #40	@ 0x28
 8001cd4:	f000 fb47 	bl	8002366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cd8:	2028      	movs	r0, #40	@ 0x28
 8001cda:	f000 fb60 	bl	800239e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001cde:	bf00      	nop
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfc:	b672      	cpsid	i
}
 8001cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    __disable_irq();

    LCD_Clear();
 8001d00:	f7fe fd0c 	bl	800071c <LCD_Clear>
    LCD_SetCursor(0, 0);
 8001d04:	2100      	movs	r1, #0
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7fe fd12 	bl	8000730 <LCD_SetCursor>
    LCD_SendString("Error_Handler!");
 8001d0c:	4809      	ldr	r0, [pc, #36]	@ (8001d34 <Error_Handler+0x3c>)
 8001d0e:	f7fe fd2e 	bl	800076e <LCD_SendString>
    LCD_SetCursor(1, 0);
 8001d12:	2100      	movs	r1, #0
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7fe fd0b 	bl	8000730 <LCD_SetCursor>
    LCD_SendString("System Zatrzymany");
 8001d1a:	4807      	ldr	r0, [pc, #28]	@ (8001d38 <Error_Handler+0x40>)
 8001d1c:	f7fe fd27 	bl	800076e <LCD_SendString>

    while (1)
    {
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001d20:	2120      	movs	r1, #32
 8001d22:	4806      	ldr	r0, [pc, #24]	@ (8001d3c <Error_Handler+0x44>)
 8001d24:	f000 fd19 	bl	800275a <HAL_GPIO_TogglePin>
        HAL_Delay(200);
 8001d28:	20c8      	movs	r0, #200	@ 0xc8
 8001d2a:	f000 f9f9 	bl	8002120 <HAL_Delay>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001d2e:	bf00      	nop
 8001d30:	e7f6      	b.n	8001d20 <Error_Handler+0x28>
 8001d32:	bf00      	nop
 8001d34:	08004878 	.word	0x08004878
 8001d38:	08004888 	.word	0x08004888
 8001d3c:	40020000 	.word	0x40020000

08001d40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <HAL_MspInit+0x4c>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d8c <HAL_MspInit+0x4c>)
 8001d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d56:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <HAL_MspInit+0x4c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <HAL_MspInit+0x4c>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	4a08      	ldr	r2, [pc, #32]	@ (8001d8c <HAL_MspInit+0x4c>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_MspInit+0x4c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800

08001d90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001da0:	d10e      	bne.n	8001dc0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <HAL_TIM_Base_MspInit+0x8c>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	4a1c      	ldr	r2, [pc, #112]	@ (8001e1c <HAL_TIM_Base_MspInit+0x8c>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <HAL_TIM_Base_MspInit+0x8c>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dbe:	e026      	b.n	8001e0e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a16      	ldr	r2, [pc, #88]	@ (8001e20 <HAL_TIM_Base_MspInit+0x90>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10e      	bne.n	8001de8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <HAL_TIM_Base_MspInit+0x8c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	4a12      	ldr	r2, [pc, #72]	@ (8001e1c <HAL_TIM_Base_MspInit+0x8c>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <HAL_TIM_Base_MspInit+0x8c>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
}
 8001de6:	e012      	b.n	8001e0e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	@ (8001e24 <HAL_TIM_Base_MspInit+0x94>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10d      	bne.n	8001e0e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <HAL_TIM_Base_MspInit+0x8c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	4a08      	ldr	r2, [pc, #32]	@ (8001e1c <HAL_TIM_Base_MspInit+0x8c>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_TIM_Base_MspInit+0x8c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
}
 8001e0e:	bf00      	nop
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40000400 	.word	0x40000400
 8001e24:	40000800 	.word	0x40000800

08001e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	@ 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e48:	d11e      	bne.n	8001e88 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <HAL_TIM_MspPostInit+0xb0>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a21      	ldr	r2, [pc, #132]	@ (8001ed8 <HAL_TIM_MspPostInit+0xb0>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed8 <HAL_TIM_MspPostInit+0xb0>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e66:	2303      	movs	r3, #3
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e76:	2301      	movs	r3, #1
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4816      	ldr	r0, [pc, #88]	@ (8001edc <HAL_TIM_MspPostInit+0xb4>)
 8001e82:	f000 fab5 	bl	80023f0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e86:	e022      	b.n	8001ece <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ee0 <HAL_TIM_MspPostInit+0xb8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d11d      	bne.n	8001ece <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <HAL_TIM_MspPostInit+0xb0>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed8 <HAL_TIM_MspPostInit+0xb0>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <HAL_TIM_MspPostInit+0xb0>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eae:	2340      	movs	r3, #64	@ 0x40
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4806      	ldr	r0, [pc, #24]	@ (8001ee4 <HAL_TIM_MspPostInit+0xbc>)
 8001eca:	f000 fa91 	bl	80023f0 <HAL_GPIO_Init>
}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	@ 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40000800 	.word	0x40000800
 8001ee4:	40020400 	.word	0x40020400

08001ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <NMI_Handler+0x4>

08001ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <MemManage_Handler+0x4>

08001f00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <BusFault_Handler+0x4>

08001f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <UsageFault_Handler+0x4>

08001f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f3e:	f000 f8cf 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Pin);
 8001f4a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001f4e:	f000 fc1f 	bl	8002790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	@ (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	@ (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f001 ff4a 	bl	8003e20 <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	@ (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20020000 	.word	0x20020000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	200003d8 	.word	0x200003d8
 8001fc0:	20000528 	.word	0x20000528

08001fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <SystemInit+0x20>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fce:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <SystemInit+0x20>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002020 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fec:	f7ff ffea 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ff0:	480c      	ldr	r0, [pc, #48]	@ (8002024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ff2:	490d      	ldr	r1, [pc, #52]	@ (8002028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800202c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff8:	e002      	b.n	8002000 <LoopCopyDataInit>

08001ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffe:	3304      	adds	r3, #4

08002000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002004:	d3f9      	bcc.n	8001ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002006:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002008:	4c0a      	ldr	r4, [pc, #40]	@ (8002034 <LoopFillZerobss+0x22>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800200c:	e001      	b.n	8002012 <LoopFillZerobss>

0800200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002010:	3204      	adds	r2, #4

08002012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002014:	d3fb      	bcc.n	800200e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002016:	f001 ff09 	bl	8003e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201a:	f7fe ff7d 	bl	8000f18 <main>
  bx  lr    
 800201e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002020:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002028:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 800202c:	080048f0 	.word	0x080048f0
  ldr r2, =_sbss
 8002030:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8002034:	20000528 	.word	0x20000528

08002038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC_IRQHandler>
	...

0800203c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002040:	4b0e      	ldr	r3, [pc, #56]	@ (800207c <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0d      	ldr	r2, [pc, #52]	@ (800207c <HAL_Init+0x40>)
 8002046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800204a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_Init+0x40>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <HAL_Init+0x40>)
 8002052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002058:	4b08      	ldr	r3, [pc, #32]	@ (800207c <HAL_Init+0x40>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a07      	ldr	r2, [pc, #28]	@ (800207c <HAL_Init+0x40>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002064:	2003      	movs	r0, #3
 8002066:	f000 f973 	bl	8002350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800206a:	200f      	movs	r0, #15
 800206c:	f000 f808 	bl	8002080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002070:	f7ff fe66 	bl	8001d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023c00 	.word	0x40023c00

08002080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002088:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <HAL_InitTick+0x54>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <HAL_InitTick+0x58>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002096:	fbb3 f3f1 	udiv	r3, r3, r1
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f999 	bl	80023d6 <HAL_SYSTICK_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00e      	b.n	80020cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b0f      	cmp	r3, #15
 80020b2:	d80a      	bhi.n	80020ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b4:	2200      	movs	r2, #0
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f000 f953 	bl	8002366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c0:	4a06      	ldr	r2, [pc, #24]	@ (80020dc <HAL_InitTick+0x5c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e000      	b.n	80020cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200000d0 	.word	0x200000d0
 80020d8:	200000d8 	.word	0x200000d8
 80020dc:	200000d4 	.word	0x200000d4

080020e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	200000d8 	.word	0x200000d8
 8002104:	200003dc 	.word	0x200003dc

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	@ (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	200003dc 	.word	0x200003dc

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff ffee 	bl	8002108 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213a:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffde 	bl	8002108 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200000d8 	.word	0x200000d8

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4907      	ldr	r1, [pc, #28]	@ (8002204 <__NVIC_EnableIRQ+0x38>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e100 	.word	0xe000e100

08002208 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	2b00      	cmp	r3, #0
 8002218:	db12      	blt.n	8002240 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	f003 021f 	and.w	r2, r3, #31
 8002220:	490a      	ldr	r1, [pc, #40]	@ (800224c <__NVIC_DisableIRQ+0x44>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	2001      	movs	r0, #1
 800222a:	fa00 f202 	lsl.w	r2, r0, r2
 800222e:	3320      	adds	r3, #32
 8002230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002234:	f3bf 8f4f 	dsb	sy
}
 8002238:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800223a:	f3bf 8f6f 	isb	sy
}
 800223e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100

08002250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db0a      	blt.n	800227a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	490c      	ldr	r1, [pc, #48]	@ (800229c <__NVIC_SetPriority+0x4c>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	440b      	add	r3, r1
 8002274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002278:	e00a      	b.n	8002290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4908      	ldr	r1, [pc, #32]	@ (80022a0 <__NVIC_SetPriority+0x50>)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	3b04      	subs	r3, #4
 8002288:	0112      	lsls	r2, r2, #4
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	440b      	add	r3, r1
 800228e:	761a      	strb	r2, [r3, #24]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000e100 	.word	0xe000e100
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	@ 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f1c3 0307 	rsb	r3, r3, #7
 80022be:	2b04      	cmp	r3, #4
 80022c0:	bf28      	it	cs
 80022c2:	2304      	movcs	r3, #4
 80022c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2b06      	cmp	r3, #6
 80022cc:	d902      	bls.n	80022d4 <NVIC_EncodePriority+0x30>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3b03      	subs	r3, #3
 80022d2:	e000      	b.n	80022d6 <NVIC_EncodePriority+0x32>
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	f04f 32ff 	mov.w	r2, #4294967295
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	401a      	ands	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43d9      	mvns	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	4313      	orrs	r3, r2
         );
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3724      	adds	r7, #36	@ 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800231c:	d301      	bcc.n	8002322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231e:	2301      	movs	r3, #1
 8002320:	e00f      	b.n	8002342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002322:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <SysTick_Config+0x40>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232a:	210f      	movs	r1, #15
 800232c:	f04f 30ff 	mov.w	r0, #4294967295
 8002330:	f7ff ff8e 	bl	8002250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002334:	4b05      	ldr	r3, [pc, #20]	@ (800234c <SysTick_Config+0x40>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233a:	4b04      	ldr	r3, [pc, #16]	@ (800234c <SysTick_Config+0x40>)
 800233c:	2207      	movs	r2, #7
 800233e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	e000e010 	.word	0xe000e010

08002350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ff05 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002378:	f7ff ff1a 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 800237c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	6978      	ldr	r0, [r7, #20]
 8002384:	f7ff ff8e 	bl	80022a4 <NVIC_EncodePriority>
 8002388:	4602      	mov	r2, r0
 800238a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff5d 	bl	8002250 <__NVIC_SetPriority>
}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff0d 	bl	80021cc <__NVIC_EnableIRQ>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff1d 	bl	8002208 <__NVIC_DisableIRQ>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ff94 	bl	800230c <SysTick_Config>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	@ 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	e159      	b.n	80026c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800240c:	2201      	movs	r2, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	429a      	cmp	r2, r3
 8002426:	f040 8148 	bne.w	80026ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d005      	beq.n	8002442 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243e:	2b02      	cmp	r3, #2
 8002440:	d130      	bne.n	80024a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	2203      	movs	r2, #3
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002478:	2201      	movs	r2, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 0201 	and.w	r2, r3, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d017      	beq.n	80024e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d123      	bne.n	8002534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	08da      	lsrs	r2, r3, #3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3208      	adds	r2, #8
 80024f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	220f      	movs	r2, #15
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	08da      	lsrs	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3208      	adds	r2, #8
 800252e:	69b9      	ldr	r1, [r7, #24]
 8002530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0203 	and.w	r2, r3, #3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80a2 	beq.w	80026ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b57      	ldr	r3, [pc, #348]	@ (80026d8 <HAL_GPIO_Init+0x2e8>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	4a56      	ldr	r2, [pc, #344]	@ (80026d8 <HAL_GPIO_Init+0x2e8>)
 8002580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002584:	6453      	str	r3, [r2, #68]	@ 0x44
 8002586:	4b54      	ldr	r3, [pc, #336]	@ (80026d8 <HAL_GPIO_Init+0x2e8>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002592:	4a52      	ldr	r2, [pc, #328]	@ (80026dc <HAL_GPIO_Init+0x2ec>)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	3302      	adds	r3, #2
 800259a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	220f      	movs	r2, #15
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a49      	ldr	r2, [pc, #292]	@ (80026e0 <HAL_GPIO_Init+0x2f0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d019      	beq.n	80025f2 <HAL_GPIO_Init+0x202>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a48      	ldr	r2, [pc, #288]	@ (80026e4 <HAL_GPIO_Init+0x2f4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_GPIO_Init+0x1fe>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a47      	ldr	r2, [pc, #284]	@ (80026e8 <HAL_GPIO_Init+0x2f8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00d      	beq.n	80025ea <HAL_GPIO_Init+0x1fa>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a46      	ldr	r2, [pc, #280]	@ (80026ec <HAL_GPIO_Init+0x2fc>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d007      	beq.n	80025e6 <HAL_GPIO_Init+0x1f6>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a45      	ldr	r2, [pc, #276]	@ (80026f0 <HAL_GPIO_Init+0x300>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d101      	bne.n	80025e2 <HAL_GPIO_Init+0x1f2>
 80025de:	2304      	movs	r3, #4
 80025e0:	e008      	b.n	80025f4 <HAL_GPIO_Init+0x204>
 80025e2:	2307      	movs	r3, #7
 80025e4:	e006      	b.n	80025f4 <HAL_GPIO_Init+0x204>
 80025e6:	2303      	movs	r3, #3
 80025e8:	e004      	b.n	80025f4 <HAL_GPIO_Init+0x204>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e002      	b.n	80025f4 <HAL_GPIO_Init+0x204>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_GPIO_Init+0x204>
 80025f2:	2300      	movs	r3, #0
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	f002 0203 	and.w	r2, r2, #3
 80025fa:	0092      	lsls	r2, r2, #2
 80025fc:	4093      	lsls	r3, r2
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002604:	4935      	ldr	r1, [pc, #212]	@ (80026dc <HAL_GPIO_Init+0x2ec>)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	3302      	adds	r3, #2
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002612:	4b38      	ldr	r3, [pc, #224]	@ (80026f4 <HAL_GPIO_Init+0x304>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002636:	4a2f      	ldr	r2, [pc, #188]	@ (80026f4 <HAL_GPIO_Init+0x304>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800263c:	4b2d      	ldr	r3, [pc, #180]	@ (80026f4 <HAL_GPIO_Init+0x304>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002660:	4a24      	ldr	r2, [pc, #144]	@ (80026f4 <HAL_GPIO_Init+0x304>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002666:	4b23      	ldr	r3, [pc, #140]	@ (80026f4 <HAL_GPIO_Init+0x304>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800268a:	4a1a      	ldr	r2, [pc, #104]	@ (80026f4 <HAL_GPIO_Init+0x304>)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002690:	4b18      	ldr	r3, [pc, #96]	@ (80026f4 <HAL_GPIO_Init+0x304>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026b4:	4a0f      	ldr	r2, [pc, #60]	@ (80026f4 <HAL_GPIO_Init+0x304>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3301      	adds	r3, #1
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b0f      	cmp	r3, #15
 80026c4:	f67f aea2 	bls.w	800240c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	3724      	adds	r7, #36	@ 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40013800 	.word	0x40013800
 80026e0:	40020000 	.word	0x40020000
 80026e4:	40020400 	.word	0x40020400
 80026e8:	40020800 	.word	0x40020800
 80026ec:	40020c00 	.word	0x40020c00
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40013c00 	.word	0x40013c00

080026f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e001      	b.n	800271a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
 8002734:	4613      	mov	r3, r2
 8002736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002738:	787b      	ldrb	r3, [r7, #1]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002744:	e003      	b.n	800274e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	041a      	lsls	r2, r3, #16
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	619a      	str	r2, [r3, #24]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800275a:	b480      	push	{r7}
 800275c:	b085      	sub	sp, #20
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	460b      	mov	r3, r1
 8002764:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800276c:	887a      	ldrh	r2, [r7, #2]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4013      	ands	r3, r2
 8002772:	041a      	lsls	r2, r3, #16
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	43d9      	mvns	r1, r3
 8002778:	887b      	ldrh	r3, [r7, #2]
 800277a:	400b      	ands	r3, r1
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	619a      	str	r2, [r3, #24]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800279a:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d006      	beq.n	80027b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027a6:	4a05      	ldr	r2, [pc, #20]	@ (80027bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe fa92 	bl	8000cd8 <HAL_GPIO_EXTI_Callback>
  }
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40013c00 	.word	0x40013c00

080027c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e267      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d075      	beq.n	80028ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027de:	4b88      	ldr	r3, [pc, #544]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d00c      	beq.n	8002804 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ea:	4b85      	ldr	r3, [pc, #532]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d112      	bne.n	800281c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f6:	4b82      	ldr	r3, [pc, #520]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002802:	d10b      	bne.n	800281c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002804:	4b7e      	ldr	r3, [pc, #504]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d05b      	beq.n	80028c8 <HAL_RCC_OscConfig+0x108>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d157      	bne.n	80028c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e242      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002824:	d106      	bne.n	8002834 <HAL_RCC_OscConfig+0x74>
 8002826:	4b76      	ldr	r3, [pc, #472]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a75      	ldr	r2, [pc, #468]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e01d      	b.n	8002870 <HAL_RCC_OscConfig+0xb0>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x98>
 800283e:	4b70      	ldr	r3, [pc, #448]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6f      	ldr	r2, [pc, #444]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002844:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a6c      	ldr	r2, [pc, #432]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0xb0>
 8002858:	4b69      	ldr	r3, [pc, #420]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a68      	ldr	r2, [pc, #416]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 800285e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b66      	ldr	r3, [pc, #408]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a65      	ldr	r2, [pc, #404]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 800286a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800286e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7ff fc46 	bl	8002108 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002880:	f7ff fc42 	bl	8002108 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	@ 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e207      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	4b5b      	ldr	r3, [pc, #364]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0xc0>
 800289e:	e014      	b.n	80028ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7ff fc32 	bl	8002108 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a8:	f7ff fc2e 	bl	8002108 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	@ 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e1f3      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	4b51      	ldr	r3, [pc, #324]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0xe8>
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d063      	beq.n	800299e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e2:	4b47      	ldr	r3, [pc, #284]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d11c      	bne.n	8002928 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ee:	4b44      	ldr	r3, [pc, #272]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d116      	bne.n	8002928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	4b41      	ldr	r3, [pc, #260]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_RCC_OscConfig+0x152>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e1c7      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	4b3b      	ldr	r3, [pc, #236]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4937      	ldr	r1, [pc, #220]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	e03a      	b.n	800299e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002930:	4b34      	ldr	r3, [pc, #208]	@ (8002a04 <HAL_RCC_OscConfig+0x244>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002936:	f7ff fbe7 	bl	8002108 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293e:	f7ff fbe3 	bl	8002108 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e1a8      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	4b2b      	ldr	r3, [pc, #172]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4b28      	ldr	r3, [pc, #160]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4925      	ldr	r1, [pc, #148]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]
 8002970:	e015      	b.n	800299e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002972:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <HAL_RCC_OscConfig+0x244>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7ff fbc6 	bl	8002108 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002980:	f7ff fbc2 	bl	8002108 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e187      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	4b1b      	ldr	r3, [pc, #108]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d036      	beq.n	8002a18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d016      	beq.n	80029e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b2:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <HAL_RCC_OscConfig+0x248>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7ff fba6 	bl	8002108 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c0:	f7ff fba2 	bl	8002108 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e167      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <HAL_RCC_OscConfig+0x240>)
 80029d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x200>
 80029de:	e01b      	b.n	8002a18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e0:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <HAL_RCC_OscConfig+0x248>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e6:	f7ff fb8f 	bl	8002108 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ec:	e00e      	b.n	8002a0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ee:	f7ff fb8b 	bl	8002108 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d907      	bls.n	8002a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e150      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
 8002a00:	40023800 	.word	0x40023800
 8002a04:	42470000 	.word	0x42470000
 8002a08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	4b88      	ldr	r3, [pc, #544]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ea      	bne.n	80029ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8097 	beq.w	8002b54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2a:	4b81      	ldr	r3, [pc, #516]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10f      	bne.n	8002a56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a46:	4b7a      	ldr	r3, [pc, #488]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	4b77      	ldr	r3, [pc, #476]	@ (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d118      	bne.n	8002a94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a62:	4b74      	ldr	r3, [pc, #464]	@ (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a73      	ldr	r2, [pc, #460]	@ (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6e:	f7ff fb4b 	bl	8002108 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7ff fb47 	bl	8002108 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e10c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	4b6a      	ldr	r3, [pc, #424]	@ (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x2ea>
 8002a9c:	4b64      	ldr	r3, [pc, #400]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa0:	4a63      	ldr	r2, [pc, #396]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x324>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x30c>
 8002ab2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	4a5e      	ldr	r2, [pc, #376]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002abe:	4b5c      	ldr	r3, [pc, #368]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac2:	4a5b      	ldr	r2, [pc, #364]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x324>
 8002acc:	4b58      	ldr	r3, [pc, #352]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	4a57      	ldr	r2, [pc, #348]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad8:	4b55      	ldr	r3, [pc, #340]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002adc:	4a54      	ldr	r2, [pc, #336]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ade:	f023 0304 	bic.w	r3, r3, #4
 8002ae2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d015      	beq.n	8002b18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7ff fb0c 	bl	8002108 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7ff fb08 	bl	8002108 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0cb      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0a:	4b49      	ldr	r3, [pc, #292]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0ee      	beq.n	8002af4 <HAL_RCC_OscConfig+0x334>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b18:	f7ff faf6 	bl	8002108 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7ff faf2 	bl	8002108 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e0b5      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b36:	4b3e      	ldr	r3, [pc, #248]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ee      	bne.n	8002b20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b48:	4b39      	ldr	r3, [pc, #228]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	4a38      	ldr	r2, [pc, #224]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80a1 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b5e:	4b34      	ldr	r3, [pc, #208]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d05c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d141      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	4b31      	ldr	r3, [pc, #196]	@ (8002c38 <HAL_RCC_OscConfig+0x478>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7ff fac6 	bl	8002108 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7ff fac2 	bl	8002108 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e087      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b92:	4b27      	ldr	r3, [pc, #156]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	019b      	lsls	r3, r3, #6
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	085b      	lsrs	r3, r3, #1
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	491b      	ldr	r1, [pc, #108]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c38 <HAL_RCC_OscConfig+0x478>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7ff fa9b 	bl	8002108 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7ff fa97 	bl	8002108 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e05c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be8:	4b11      	ldr	r3, [pc, #68]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x416>
 8002bf4:	e054      	b.n	8002ca0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <HAL_RCC_OscConfig+0x478>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7ff fa84 	bl	8002108 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c04:	f7ff fa80 	bl	8002108 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e045      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x444>
 8002c22:	e03d      	b.n	8002ca0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e038      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40007000 	.word	0x40007000
 8002c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <HAL_RCC_OscConfig+0x4ec>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d028      	beq.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d121      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d11a      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d111      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c82:	085b      	lsrs	r3, r3, #1
 8002c84:	3b01      	subs	r3, #1
 8002c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0cc      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b68      	ldr	r3, [pc, #416]	@ (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d90c      	bls.n	8002cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b65      	ldr	r3, [pc, #404]	@ (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b63      	ldr	r3, [pc, #396]	@ (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0b8      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d04:	4b59      	ldr	r3, [pc, #356]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4a58      	ldr	r2, [pc, #352]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d1c:	4b53      	ldr	r3, [pc, #332]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a52      	ldr	r2, [pc, #328]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d28:	4b50      	ldr	r3, [pc, #320]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	494d      	ldr	r1, [pc, #308]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d044      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4e:	4b47      	ldr	r3, [pc, #284]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d119      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e07f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d003      	beq.n	8002d6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e06f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e067      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8e:	4b37      	ldr	r3, [pc, #220]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f023 0203 	bic.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4934      	ldr	r1, [pc, #208]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da0:	f7ff f9b2 	bl	8002108 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da8:	f7ff f9ae 	bl	8002108 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e04f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 020c 	and.w	r2, r3, #12
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d1eb      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b25      	ldr	r3, [pc, #148]	@ (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d20c      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b22      	ldr	r3, [pc, #136]	@ (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b20      	ldr	r3, [pc, #128]	@ (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e032      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e04:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4916      	ldr	r1, [pc, #88]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e22:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	490e      	ldr	r1, [pc, #56]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e36:	f000 f821 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	490a      	ldr	r1, [pc, #40]	@ (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	5ccb      	ldrb	r3, [r1, r3]
 8002e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4e:	4a09      	ldr	r2, [pc, #36]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e52:	4b09      	ldr	r3, [pc, #36]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f912 	bl	8002080 <HAL_InitTick>

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023c00 	.word	0x40023c00
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	0800489c 	.word	0x0800489c
 8002e74:	200000d0 	.word	0x200000d0
 8002e78:	200000d4 	.word	0x200000d4

08002e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e80:	b090      	sub	sp, #64	@ 0x40
 8002e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e94:	4b59      	ldr	r3, [pc, #356]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d00d      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x40>
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	f200 80a1 	bhi.w	8002fe8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eae:	e09b      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eb0:	4b53      	ldr	r3, [pc, #332]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002eb4:	e09b      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb6:	4b53      	ldr	r3, [pc, #332]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x188>)
 8002eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002eba:	e098      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ebc:	4b4f      	ldr	r3, [pc, #316]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ec4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec6:	4b4d      	ldr	r3, [pc, #308]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d028      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	2200      	movs	r2, #0
 8002eda:	623b      	str	r3, [r7, #32]
 8002edc:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4b47      	ldr	r3, [pc, #284]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ee8:	fb03 f201 	mul.w	r2, r3, r1
 8002eec:	2300      	movs	r3, #0
 8002eee:	fb00 f303 	mul.w	r3, r0, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	4a43      	ldr	r2, [pc, #268]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ef6:	fba0 1202 	umull	r1, r2, r0, r2
 8002efa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002efc:	460a      	mov	r2, r1
 8002efe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f02:	4413      	add	r3, r2
 8002f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f08:	2200      	movs	r2, #0
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	61fa      	str	r2, [r7, #28]
 8002f0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f16:	f7fd f9b3 	bl	8000280 <__aeabi_uldivmod>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4613      	mov	r3, r2
 8002f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f22:	e053      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f24:	4b35      	ldr	r3, [pc, #212]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	617a      	str	r2, [r7, #20]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f36:	f04f 0b00 	mov.w	fp, #0
 8002f3a:	4652      	mov	r2, sl
 8002f3c:	465b      	mov	r3, fp
 8002f3e:	f04f 0000 	mov.w	r0, #0
 8002f42:	f04f 0100 	mov.w	r1, #0
 8002f46:	0159      	lsls	r1, r3, #5
 8002f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f4c:	0150      	lsls	r0, r2, #5
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	ebb2 080a 	subs.w	r8, r2, sl
 8002f56:	eb63 090b 	sbc.w	r9, r3, fp
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f6e:	ebb2 0408 	subs.w	r4, r2, r8
 8002f72:	eb63 0509 	sbc.w	r5, r3, r9
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	00eb      	lsls	r3, r5, #3
 8002f80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f84:	00e2      	lsls	r2, r4, #3
 8002f86:	4614      	mov	r4, r2
 8002f88:	461d      	mov	r5, r3
 8002f8a:	eb14 030a 	adds.w	r3, r4, sl
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	eb45 030b 	adc.w	r3, r5, fp
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	028b      	lsls	r3, r1, #10
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fac:	4621      	mov	r1, r4
 8002fae:	028a      	lsls	r2, r1, #10
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	60fa      	str	r2, [r7, #12]
 8002fbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fc0:	f7fd f95e 	bl	8000280 <__aeabi_uldivmod>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4613      	mov	r3, r2
 8002fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	0c1b      	lsrs	r3, r3, #16
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002fdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fe6:	e002      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fe8:	4b05      	ldr	r3, [pc, #20]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3740      	adds	r7, #64	@ 0x40
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	00f42400 	.word	0x00f42400
 8003004:	017d7840 	.word	0x017d7840

08003008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e041      	b.n	800309e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fe feae 	bl	8001d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f000 fb80 	bl	800374c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d001      	beq.n	80030c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e03c      	b.n	800313a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003148 <HAL_TIM_Base_Start+0xa0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d018      	beq.n	8003104 <HAL_TIM_Base_Start+0x5c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030da:	d013      	beq.n	8003104 <HAL_TIM_Base_Start+0x5c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1a      	ldr	r2, [pc, #104]	@ (800314c <HAL_TIM_Base_Start+0xa4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00e      	beq.n	8003104 <HAL_TIM_Base_Start+0x5c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a19      	ldr	r2, [pc, #100]	@ (8003150 <HAL_TIM_Base_Start+0xa8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d009      	beq.n	8003104 <HAL_TIM_Base_Start+0x5c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a17      	ldr	r2, [pc, #92]	@ (8003154 <HAL_TIM_Base_Start+0xac>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d004      	beq.n	8003104 <HAL_TIM_Base_Start+0x5c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a16      	ldr	r2, [pc, #88]	@ (8003158 <HAL_TIM_Base_Start+0xb0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d111      	bne.n	8003128 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b06      	cmp	r3, #6
 8003114:	d010      	beq.n	8003138 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003126:	e007      	b.n	8003138 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40010000 	.word	0x40010000
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800
 8003154:	40000c00 	.word	0x40000c00
 8003158:	40014000 	.word	0x40014000

0800315c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e041      	b.n	80031f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f839 	bl	80031fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	4619      	mov	r1, r3
 800319a:	4610      	mov	r0, r2
 800319c:	f000 fad6 	bl	800374c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_TIM_PWM_Start+0x24>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e022      	b.n	800327a <HAL_TIM_PWM_Start+0x6a>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b04      	cmp	r3, #4
 8003238:	d109      	bne.n	800324e <HAL_TIM_PWM_Start+0x3e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	bf14      	ite	ne
 8003246:	2301      	movne	r3, #1
 8003248:	2300      	moveq	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	e015      	b.n	800327a <HAL_TIM_PWM_Start+0x6a>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d109      	bne.n	8003268 <HAL_TIM_PWM_Start+0x58>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e008      	b.n	800327a <HAL_TIM_PWM_Start+0x6a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e068      	b.n	8003354 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d104      	bne.n	8003292 <HAL_TIM_PWM_Start+0x82>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003290:	e013      	b.n	80032ba <HAL_TIM_PWM_Start+0xaa>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d104      	bne.n	80032a2 <HAL_TIM_PWM_Start+0x92>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032a0:	e00b      	b.n	80032ba <HAL_TIM_PWM_Start+0xaa>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d104      	bne.n	80032b2 <HAL_TIM_PWM_Start+0xa2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032b0:	e003      	b.n	80032ba <HAL_TIM_PWM_Start+0xaa>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2202      	movs	r2, #2
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2201      	movs	r2, #1
 80032c0:	6839      	ldr	r1, [r7, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fcee 	bl	8003ca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a23      	ldr	r2, [pc, #140]	@ (800335c <HAL_TIM_PWM_Start+0x14c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d107      	bne.n	80032e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1d      	ldr	r2, [pc, #116]	@ (800335c <HAL_TIM_PWM_Start+0x14c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d018      	beq.n	800331e <HAL_TIM_PWM_Start+0x10e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f4:	d013      	beq.n	800331e <HAL_TIM_PWM_Start+0x10e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a19      	ldr	r2, [pc, #100]	@ (8003360 <HAL_TIM_PWM_Start+0x150>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00e      	beq.n	800331e <HAL_TIM_PWM_Start+0x10e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a17      	ldr	r2, [pc, #92]	@ (8003364 <HAL_TIM_PWM_Start+0x154>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d009      	beq.n	800331e <HAL_TIM_PWM_Start+0x10e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a16      	ldr	r2, [pc, #88]	@ (8003368 <HAL_TIM_PWM_Start+0x158>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_TIM_PWM_Start+0x10e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a14      	ldr	r2, [pc, #80]	@ (800336c <HAL_TIM_PWM_Start+0x15c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d111      	bne.n	8003342 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b06      	cmp	r3, #6
 800332e:	d010      	beq.n	8003352 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003340:	e007      	b.n	8003352 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40010000 	.word	0x40010000
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40000c00 	.word	0x40000c00
 800336c:	40014000 	.word	0x40014000

08003370 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	6839      	ldr	r1, [r7, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fc8e 	bl	8003ca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a29      	ldr	r2, [pc, #164]	@ (8003434 <HAL_TIM_PWM_Stop+0xc4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d117      	bne.n	80033c2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6a1a      	ldr	r2, [r3, #32]
 8003398:	f241 1311 	movw	r3, #4369	@ 0x1111
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10f      	bne.n	80033c2 <HAL_TIM_PWM_Stop+0x52>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	f240 4344 	movw	r3, #1092	@ 0x444
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d107      	bne.n	80033c2 <HAL_TIM_PWM_Stop+0x52>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a1a      	ldr	r2, [r3, #32]
 80033c8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <HAL_TIM_PWM_Stop+0x82>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	f240 4344 	movw	r3, #1092	@ 0x444
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d107      	bne.n	80033f2 <HAL_TIM_PWM_Stop+0x82>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_PWM_Stop+0x92>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003400:	e013      	b.n	800342a <HAL_TIM_PWM_Stop+0xba>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b04      	cmp	r3, #4
 8003406:	d104      	bne.n	8003412 <HAL_TIM_PWM_Stop+0xa2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003410:	e00b      	b.n	800342a <HAL_TIM_PWM_Stop+0xba>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d104      	bne.n	8003422 <HAL_TIM_PWM_Stop+0xb2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003420:	e003      	b.n	800342a <HAL_TIM_PWM_Stop+0xba>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40010000 	.word	0x40010000

08003438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003452:	2302      	movs	r3, #2
 8003454:	e0ae      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b0c      	cmp	r3, #12
 8003462:	f200 809f 	bhi.w	80035a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003466:	a201      	add	r2, pc, #4	@ (adr r2, 800346c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346c:	080034a1 	.word	0x080034a1
 8003470:	080035a5 	.word	0x080035a5
 8003474:	080035a5 	.word	0x080035a5
 8003478:	080035a5 	.word	0x080035a5
 800347c:	080034e1 	.word	0x080034e1
 8003480:	080035a5 	.word	0x080035a5
 8003484:	080035a5 	.word	0x080035a5
 8003488:	080035a5 	.word	0x080035a5
 800348c:	08003523 	.word	0x08003523
 8003490:	080035a5 	.word	0x080035a5
 8003494:	080035a5 	.word	0x080035a5
 8003498:	080035a5 	.word	0x080035a5
 800349c:	08003563 	.word	0x08003563
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f9d6 	bl	8003858 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0208 	orr.w	r2, r2, #8
 80034ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0204 	bic.w	r2, r2, #4
 80034ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6999      	ldr	r1, [r3, #24]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	619a      	str	r2, [r3, #24]
      break;
 80034de:	e064      	b.n	80035aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fa1c 	bl	8003924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800350a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6999      	ldr	r1, [r3, #24]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	021a      	lsls	r2, r3, #8
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	619a      	str	r2, [r3, #24]
      break;
 8003520:	e043      	b.n	80035aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fa67 	bl	80039fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69da      	ldr	r2, [r3, #28]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0208 	orr.w	r2, r2, #8
 800353c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0204 	bic.w	r2, r2, #4
 800354c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69d9      	ldr	r1, [r3, #28]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	61da      	str	r2, [r3, #28]
      break;
 8003560:	e023      	b.n	80035aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fab1 	bl	8003ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800357c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800358c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69d9      	ldr	r1, [r3, #28]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	021a      	lsls	r2, r3, #8
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	61da      	str	r2, [r3, #28]
      break;
 80035a2:	e002      	b.n	80035aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	75fb      	strb	r3, [r7, #23]
      break;
 80035a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_TIM_ConfigClockSource+0x1c>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e0b4      	b.n	8003742 <HAL_TIM_ConfigClockSource+0x186>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003610:	d03e      	beq.n	8003690 <HAL_TIM_ConfigClockSource+0xd4>
 8003612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003616:	f200 8087 	bhi.w	8003728 <HAL_TIM_ConfigClockSource+0x16c>
 800361a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800361e:	f000 8086 	beq.w	800372e <HAL_TIM_ConfigClockSource+0x172>
 8003622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003626:	d87f      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x16c>
 8003628:	2b70      	cmp	r3, #112	@ 0x70
 800362a:	d01a      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0xa6>
 800362c:	2b70      	cmp	r3, #112	@ 0x70
 800362e:	d87b      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x16c>
 8003630:	2b60      	cmp	r3, #96	@ 0x60
 8003632:	d050      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003634:	2b60      	cmp	r3, #96	@ 0x60
 8003636:	d877      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x16c>
 8003638:	2b50      	cmp	r3, #80	@ 0x50
 800363a:	d03c      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0xfa>
 800363c:	2b50      	cmp	r3, #80	@ 0x50
 800363e:	d873      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x16c>
 8003640:	2b40      	cmp	r3, #64	@ 0x40
 8003642:	d058      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003644:	2b40      	cmp	r3, #64	@ 0x40
 8003646:	d86f      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x16c>
 8003648:	2b30      	cmp	r3, #48	@ 0x30
 800364a:	d064      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x15a>
 800364c:	2b30      	cmp	r3, #48	@ 0x30
 800364e:	d86b      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x16c>
 8003650:	2b20      	cmp	r3, #32
 8003652:	d060      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x15a>
 8003654:	2b20      	cmp	r3, #32
 8003656:	d867      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x16c>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d05c      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x15a>
 800365c:	2b10      	cmp	r3, #16
 800365e:	d05a      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x15a>
 8003660:	e062      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003672:	f000 faf7 	bl	8003c64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	609a      	str	r2, [r3, #8]
      break;
 800368e:	e04f      	b.n	8003730 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036a0:	f000 fae0 	bl	8003c64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036b2:	609a      	str	r2, [r3, #8]
      break;
 80036b4:	e03c      	b.n	8003730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c2:	461a      	mov	r2, r3
 80036c4:	f000 fa54 	bl	8003b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2150      	movs	r1, #80	@ 0x50
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 faad 	bl	8003c2e <TIM_ITRx_SetConfig>
      break;
 80036d4:	e02c      	b.n	8003730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036e2:	461a      	mov	r2, r3
 80036e4:	f000 fa73 	bl	8003bce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2160      	movs	r1, #96	@ 0x60
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fa9d 	bl	8003c2e <TIM_ITRx_SetConfig>
      break;
 80036f4:	e01c      	b.n	8003730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003702:	461a      	mov	r2, r3
 8003704:	f000 fa34 	bl	8003b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2140      	movs	r1, #64	@ 0x40
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fa8d 	bl	8003c2e <TIM_ITRx_SetConfig>
      break;
 8003714:	e00c      	b.n	8003730 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4619      	mov	r1, r3
 8003720:	4610      	mov	r0, r2
 8003722:	f000 fa84 	bl	8003c2e <TIM_ITRx_SetConfig>
      break;
 8003726:	e003      	b.n	8003730 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      break;
 800372c:	e000      	b.n	8003730 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800372e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a37      	ldr	r2, [pc, #220]	@ (800383c <TIM_Base_SetConfig+0xf0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00f      	beq.n	8003784 <TIM_Base_SetConfig+0x38>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376a:	d00b      	beq.n	8003784 <TIM_Base_SetConfig+0x38>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a34      	ldr	r2, [pc, #208]	@ (8003840 <TIM_Base_SetConfig+0xf4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d007      	beq.n	8003784 <TIM_Base_SetConfig+0x38>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a33      	ldr	r2, [pc, #204]	@ (8003844 <TIM_Base_SetConfig+0xf8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d003      	beq.n	8003784 <TIM_Base_SetConfig+0x38>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a32      	ldr	r2, [pc, #200]	@ (8003848 <TIM_Base_SetConfig+0xfc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d108      	bne.n	8003796 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800378a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a28      	ldr	r2, [pc, #160]	@ (800383c <TIM_Base_SetConfig+0xf0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01b      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a4:	d017      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a25      	ldr	r2, [pc, #148]	@ (8003840 <TIM_Base_SetConfig+0xf4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a24      	ldr	r2, [pc, #144]	@ (8003844 <TIM_Base_SetConfig+0xf8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00f      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a23      	ldr	r2, [pc, #140]	@ (8003848 <TIM_Base_SetConfig+0xfc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a22      	ldr	r2, [pc, #136]	@ (800384c <TIM_Base_SetConfig+0x100>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a21      	ldr	r2, [pc, #132]	@ (8003850 <TIM_Base_SetConfig+0x104>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d003      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a20      	ldr	r2, [pc, #128]	@ (8003854 <TIM_Base_SetConfig+0x108>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d108      	bne.n	80037e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a0c      	ldr	r2, [pc, #48]	@ (800383c <TIM_Base_SetConfig+0xf0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d103      	bne.n	8003816 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f043 0204 	orr.w	r2, r3, #4
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	601a      	str	r2, [r3, #0]
}
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800
 8003848:	40000c00 	.word	0x40000c00
 800384c:	40014000 	.word	0x40014000
 8003850:	40014400 	.word	0x40014400
 8003854:	40014800 	.word	0x40014800

08003858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f023 0201 	bic.w	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0303 	bic.w	r3, r3, #3
 800388e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f023 0302 	bic.w	r3, r3, #2
 80038a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003920 <TIM_OC1_SetConfig+0xc8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d10c      	bne.n	80038ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 0308 	bic.w	r3, r3, #8
 80038ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f023 0304 	bic.w	r3, r3, #4
 80038cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a13      	ldr	r2, [pc, #76]	@ (8003920 <TIM_OC1_SetConfig+0xc8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d111      	bne.n	80038fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	621a      	str	r2, [r3, #32]
}
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40010000 	.word	0x40010000

08003924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	f023 0210 	bic.w	r2, r3, #16
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800395a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	021b      	lsls	r3, r3, #8
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0320 	bic.w	r3, r3, #32
 800396e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a1e      	ldr	r2, [pc, #120]	@ (80039f8 <TIM_OC2_SetConfig+0xd4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d10d      	bne.n	80039a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800398a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800399e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a15      	ldr	r2, [pc, #84]	@ (80039f8 <TIM_OC2_SetConfig+0xd4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d113      	bne.n	80039d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000

080039fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0303 	bic.w	r3, r3, #3
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a1d      	ldr	r2, [pc, #116]	@ (8003acc <TIM_OC3_SetConfig+0xd0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d10d      	bne.n	8003a76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a14      	ldr	r2, [pc, #80]	@ (8003acc <TIM_OC3_SetConfig+0xd0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d113      	bne.n	8003aa6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	621a      	str	r2, [r3, #32]
}
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40010000 	.word	0x40010000

08003ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	021b      	lsls	r3, r3, #8
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	031b      	lsls	r3, r3, #12
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a10      	ldr	r2, [pc, #64]	@ (8003b6c <TIM_OC4_SetConfig+0x9c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d109      	bne.n	8003b44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	019b      	lsls	r3, r3, #6
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40010000 	.word	0x40010000

08003b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	f023 0201 	bic.w	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f023 030a 	bic.w	r3, r3, #10
 8003bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	621a      	str	r2, [r3, #32]
}
 8003bc2:	bf00      	nop
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b087      	sub	sp, #28
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f023 0210 	bic.w	r2, r3, #16
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	031b      	lsls	r3, r3, #12
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	621a      	str	r2, [r3, #32]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b085      	sub	sp, #20
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f043 0307 	orr.w	r3, r3, #7
 8003c50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	609a      	str	r2, [r3, #8]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	021a      	lsls	r2, r3, #8
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	609a      	str	r2, [r3, #8]
}
 8003c98:	bf00      	nop
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a1a      	ldr	r2, [r3, #32]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a1a      	ldr	r2, [r3, #32]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e050      	b.n	8003daa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1c      	ldr	r2, [pc, #112]	@ (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d018      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d54:	d013      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a18      	ldr	r2, [pc, #96]	@ (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a16      	ldr	r2, [pc, #88]	@ (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d009      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a15      	ldr	r2, [pc, #84]	@ (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a13      	ldr	r2, [pc, #76]	@ (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10c      	bne.n	8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40010000 	.word	0x40010000
 8003dbc:	40000400 	.word	0x40000400
 8003dc0:	40000800 	.word	0x40000800
 8003dc4:	40000c00 	.word	0x40000c00
 8003dc8:	40014000 	.word	0x40014000

08003dcc <siprintf>:
 8003dcc:	b40e      	push	{r1, r2, r3}
 8003dce:	b510      	push	{r4, lr}
 8003dd0:	b09d      	sub	sp, #116	@ 0x74
 8003dd2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003dd4:	9002      	str	r0, [sp, #8]
 8003dd6:	9006      	str	r0, [sp, #24]
 8003dd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003ddc:	480a      	ldr	r0, [pc, #40]	@ (8003e08 <siprintf+0x3c>)
 8003dde:	9107      	str	r1, [sp, #28]
 8003de0:	9104      	str	r1, [sp, #16]
 8003de2:	490a      	ldr	r1, [pc, #40]	@ (8003e0c <siprintf+0x40>)
 8003de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003de8:	9105      	str	r1, [sp, #20]
 8003dea:	2400      	movs	r4, #0
 8003dec:	a902      	add	r1, sp, #8
 8003dee:	6800      	ldr	r0, [r0, #0]
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003df4:	f000 f9a2 	bl	800413c <_svfiprintf_r>
 8003df8:	9b02      	ldr	r3, [sp, #8]
 8003dfa:	701c      	strb	r4, [r3, #0]
 8003dfc:	b01d      	add	sp, #116	@ 0x74
 8003dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e02:	b003      	add	sp, #12
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	200000dc 	.word	0x200000dc
 8003e0c:	ffff0208 	.word	0xffff0208

08003e10 <memset>:
 8003e10:	4402      	add	r2, r0
 8003e12:	4603      	mov	r3, r0
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d100      	bne.n	8003e1a <memset+0xa>
 8003e18:	4770      	bx	lr
 8003e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e1e:	e7f9      	b.n	8003e14 <memset+0x4>

08003e20 <__errno>:
 8003e20:	4b01      	ldr	r3, [pc, #4]	@ (8003e28 <__errno+0x8>)
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	200000dc 	.word	0x200000dc

08003e2c <__libc_init_array>:
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e64 <__libc_init_array+0x38>)
 8003e30:	4c0d      	ldr	r4, [pc, #52]	@ (8003e68 <__libc_init_array+0x3c>)
 8003e32:	1b64      	subs	r4, r4, r5
 8003e34:	10a4      	asrs	r4, r4, #2
 8003e36:	2600      	movs	r6, #0
 8003e38:	42a6      	cmp	r6, r4
 8003e3a:	d109      	bne.n	8003e50 <__libc_init_array+0x24>
 8003e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8003e6c <__libc_init_array+0x40>)
 8003e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8003e70 <__libc_init_array+0x44>)
 8003e40:	f000 fc64 	bl	800470c <_init>
 8003e44:	1b64      	subs	r4, r4, r5
 8003e46:	10a4      	asrs	r4, r4, #2
 8003e48:	2600      	movs	r6, #0
 8003e4a:	42a6      	cmp	r6, r4
 8003e4c:	d105      	bne.n	8003e5a <__libc_init_array+0x2e>
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e54:	4798      	blx	r3
 8003e56:	3601      	adds	r6, #1
 8003e58:	e7ee      	b.n	8003e38 <__libc_init_array+0xc>
 8003e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5e:	4798      	blx	r3
 8003e60:	3601      	adds	r6, #1
 8003e62:	e7f2      	b.n	8003e4a <__libc_init_array+0x1e>
 8003e64:	080048e8 	.word	0x080048e8
 8003e68:	080048e8 	.word	0x080048e8
 8003e6c:	080048e8 	.word	0x080048e8
 8003e70:	080048ec 	.word	0x080048ec

08003e74 <__retarget_lock_acquire_recursive>:
 8003e74:	4770      	bx	lr

08003e76 <__retarget_lock_release_recursive>:
 8003e76:	4770      	bx	lr

08003e78 <memcpy>:
 8003e78:	440a      	add	r2, r1
 8003e7a:	4291      	cmp	r1, r2
 8003e7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e80:	d100      	bne.n	8003e84 <memcpy+0xc>
 8003e82:	4770      	bx	lr
 8003e84:	b510      	push	{r4, lr}
 8003e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e8e:	4291      	cmp	r1, r2
 8003e90:	d1f9      	bne.n	8003e86 <memcpy+0xe>
 8003e92:	bd10      	pop	{r4, pc}

08003e94 <_free_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4605      	mov	r5, r0
 8003e98:	2900      	cmp	r1, #0
 8003e9a:	d041      	beq.n	8003f20 <_free_r+0x8c>
 8003e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ea0:	1f0c      	subs	r4, r1, #4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	bfb8      	it	lt
 8003ea6:	18e4      	addlt	r4, r4, r3
 8003ea8:	f000 f8e0 	bl	800406c <__malloc_lock>
 8003eac:	4a1d      	ldr	r2, [pc, #116]	@ (8003f24 <_free_r+0x90>)
 8003eae:	6813      	ldr	r3, [r2, #0]
 8003eb0:	b933      	cbnz	r3, 8003ec0 <_free_r+0x2c>
 8003eb2:	6063      	str	r3, [r4, #4]
 8003eb4:	6014      	str	r4, [r2, #0]
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ebc:	f000 b8dc 	b.w	8004078 <__malloc_unlock>
 8003ec0:	42a3      	cmp	r3, r4
 8003ec2:	d908      	bls.n	8003ed6 <_free_r+0x42>
 8003ec4:	6820      	ldr	r0, [r4, #0]
 8003ec6:	1821      	adds	r1, r4, r0
 8003ec8:	428b      	cmp	r3, r1
 8003eca:	bf01      	itttt	eq
 8003ecc:	6819      	ldreq	r1, [r3, #0]
 8003ece:	685b      	ldreq	r3, [r3, #4]
 8003ed0:	1809      	addeq	r1, r1, r0
 8003ed2:	6021      	streq	r1, [r4, #0]
 8003ed4:	e7ed      	b.n	8003eb2 <_free_r+0x1e>
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	b10b      	cbz	r3, 8003ee0 <_free_r+0x4c>
 8003edc:	42a3      	cmp	r3, r4
 8003ede:	d9fa      	bls.n	8003ed6 <_free_r+0x42>
 8003ee0:	6811      	ldr	r1, [r2, #0]
 8003ee2:	1850      	adds	r0, r2, r1
 8003ee4:	42a0      	cmp	r0, r4
 8003ee6:	d10b      	bne.n	8003f00 <_free_r+0x6c>
 8003ee8:	6820      	ldr	r0, [r4, #0]
 8003eea:	4401      	add	r1, r0
 8003eec:	1850      	adds	r0, r2, r1
 8003eee:	4283      	cmp	r3, r0
 8003ef0:	6011      	str	r1, [r2, #0]
 8003ef2:	d1e0      	bne.n	8003eb6 <_free_r+0x22>
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	6053      	str	r3, [r2, #4]
 8003efa:	4408      	add	r0, r1
 8003efc:	6010      	str	r0, [r2, #0]
 8003efe:	e7da      	b.n	8003eb6 <_free_r+0x22>
 8003f00:	d902      	bls.n	8003f08 <_free_r+0x74>
 8003f02:	230c      	movs	r3, #12
 8003f04:	602b      	str	r3, [r5, #0]
 8003f06:	e7d6      	b.n	8003eb6 <_free_r+0x22>
 8003f08:	6820      	ldr	r0, [r4, #0]
 8003f0a:	1821      	adds	r1, r4, r0
 8003f0c:	428b      	cmp	r3, r1
 8003f0e:	bf04      	itt	eq
 8003f10:	6819      	ldreq	r1, [r3, #0]
 8003f12:	685b      	ldreq	r3, [r3, #4]
 8003f14:	6063      	str	r3, [r4, #4]
 8003f16:	bf04      	itt	eq
 8003f18:	1809      	addeq	r1, r1, r0
 8003f1a:	6021      	streq	r1, [r4, #0]
 8003f1c:	6054      	str	r4, [r2, #4]
 8003f1e:	e7ca      	b.n	8003eb6 <_free_r+0x22>
 8003f20:	bd38      	pop	{r3, r4, r5, pc}
 8003f22:	bf00      	nop
 8003f24:	20000524 	.word	0x20000524

08003f28 <sbrk_aligned>:
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	4e0f      	ldr	r6, [pc, #60]	@ (8003f68 <sbrk_aligned+0x40>)
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	6831      	ldr	r1, [r6, #0]
 8003f30:	4605      	mov	r5, r0
 8003f32:	b911      	cbnz	r1, 8003f3a <sbrk_aligned+0x12>
 8003f34:	f000 fba4 	bl	8004680 <_sbrk_r>
 8003f38:	6030      	str	r0, [r6, #0]
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	f000 fb9f 	bl	8004680 <_sbrk_r>
 8003f42:	1c43      	adds	r3, r0, #1
 8003f44:	d103      	bne.n	8003f4e <sbrk_aligned+0x26>
 8003f46:	f04f 34ff 	mov.w	r4, #4294967295
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	bd70      	pop	{r4, r5, r6, pc}
 8003f4e:	1cc4      	adds	r4, r0, #3
 8003f50:	f024 0403 	bic.w	r4, r4, #3
 8003f54:	42a0      	cmp	r0, r4
 8003f56:	d0f8      	beq.n	8003f4a <sbrk_aligned+0x22>
 8003f58:	1a21      	subs	r1, r4, r0
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f000 fb90 	bl	8004680 <_sbrk_r>
 8003f60:	3001      	adds	r0, #1
 8003f62:	d1f2      	bne.n	8003f4a <sbrk_aligned+0x22>
 8003f64:	e7ef      	b.n	8003f46 <sbrk_aligned+0x1e>
 8003f66:	bf00      	nop
 8003f68:	20000520 	.word	0x20000520

08003f6c <_malloc_r>:
 8003f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f70:	1ccd      	adds	r5, r1, #3
 8003f72:	f025 0503 	bic.w	r5, r5, #3
 8003f76:	3508      	adds	r5, #8
 8003f78:	2d0c      	cmp	r5, #12
 8003f7a:	bf38      	it	cc
 8003f7c:	250c      	movcc	r5, #12
 8003f7e:	2d00      	cmp	r5, #0
 8003f80:	4606      	mov	r6, r0
 8003f82:	db01      	blt.n	8003f88 <_malloc_r+0x1c>
 8003f84:	42a9      	cmp	r1, r5
 8003f86:	d904      	bls.n	8003f92 <_malloc_r+0x26>
 8003f88:	230c      	movs	r3, #12
 8003f8a:	6033      	str	r3, [r6, #0]
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004068 <_malloc_r+0xfc>
 8003f96:	f000 f869 	bl	800406c <__malloc_lock>
 8003f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f9e:	461c      	mov	r4, r3
 8003fa0:	bb44      	cbnz	r4, 8003ff4 <_malloc_r+0x88>
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	f7ff ffbf 	bl	8003f28 <sbrk_aligned>
 8003faa:	1c43      	adds	r3, r0, #1
 8003fac:	4604      	mov	r4, r0
 8003fae:	d158      	bne.n	8004062 <_malloc_r+0xf6>
 8003fb0:	f8d8 4000 	ldr.w	r4, [r8]
 8003fb4:	4627      	mov	r7, r4
 8003fb6:	2f00      	cmp	r7, #0
 8003fb8:	d143      	bne.n	8004042 <_malloc_r+0xd6>
 8003fba:	2c00      	cmp	r4, #0
 8003fbc:	d04b      	beq.n	8004056 <_malloc_r+0xea>
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	4639      	mov	r1, r7
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	eb04 0903 	add.w	r9, r4, r3
 8003fc8:	f000 fb5a 	bl	8004680 <_sbrk_r>
 8003fcc:	4581      	cmp	r9, r0
 8003fce:	d142      	bne.n	8004056 <_malloc_r+0xea>
 8003fd0:	6821      	ldr	r1, [r4, #0]
 8003fd2:	1a6d      	subs	r5, r5, r1
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	f7ff ffa6 	bl	8003f28 <sbrk_aligned>
 8003fdc:	3001      	adds	r0, #1
 8003fde:	d03a      	beq.n	8004056 <_malloc_r+0xea>
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	442b      	add	r3, r5
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	bb62      	cbnz	r2, 8004048 <_malloc_r+0xdc>
 8003fee:	f8c8 7000 	str.w	r7, [r8]
 8003ff2:	e00f      	b.n	8004014 <_malloc_r+0xa8>
 8003ff4:	6822      	ldr	r2, [r4, #0]
 8003ff6:	1b52      	subs	r2, r2, r5
 8003ff8:	d420      	bmi.n	800403c <_malloc_r+0xd0>
 8003ffa:	2a0b      	cmp	r2, #11
 8003ffc:	d917      	bls.n	800402e <_malloc_r+0xc2>
 8003ffe:	1961      	adds	r1, r4, r5
 8004000:	42a3      	cmp	r3, r4
 8004002:	6025      	str	r5, [r4, #0]
 8004004:	bf18      	it	ne
 8004006:	6059      	strne	r1, [r3, #4]
 8004008:	6863      	ldr	r3, [r4, #4]
 800400a:	bf08      	it	eq
 800400c:	f8c8 1000 	streq.w	r1, [r8]
 8004010:	5162      	str	r2, [r4, r5]
 8004012:	604b      	str	r3, [r1, #4]
 8004014:	4630      	mov	r0, r6
 8004016:	f000 f82f 	bl	8004078 <__malloc_unlock>
 800401a:	f104 000b 	add.w	r0, r4, #11
 800401e:	1d23      	adds	r3, r4, #4
 8004020:	f020 0007 	bic.w	r0, r0, #7
 8004024:	1ac2      	subs	r2, r0, r3
 8004026:	bf1c      	itt	ne
 8004028:	1a1b      	subne	r3, r3, r0
 800402a:	50a3      	strne	r3, [r4, r2]
 800402c:	e7af      	b.n	8003f8e <_malloc_r+0x22>
 800402e:	6862      	ldr	r2, [r4, #4]
 8004030:	42a3      	cmp	r3, r4
 8004032:	bf0c      	ite	eq
 8004034:	f8c8 2000 	streq.w	r2, [r8]
 8004038:	605a      	strne	r2, [r3, #4]
 800403a:	e7eb      	b.n	8004014 <_malloc_r+0xa8>
 800403c:	4623      	mov	r3, r4
 800403e:	6864      	ldr	r4, [r4, #4]
 8004040:	e7ae      	b.n	8003fa0 <_malloc_r+0x34>
 8004042:	463c      	mov	r4, r7
 8004044:	687f      	ldr	r7, [r7, #4]
 8004046:	e7b6      	b.n	8003fb6 <_malloc_r+0x4a>
 8004048:	461a      	mov	r2, r3
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	42a3      	cmp	r3, r4
 800404e:	d1fb      	bne.n	8004048 <_malloc_r+0xdc>
 8004050:	2300      	movs	r3, #0
 8004052:	6053      	str	r3, [r2, #4]
 8004054:	e7de      	b.n	8004014 <_malloc_r+0xa8>
 8004056:	230c      	movs	r3, #12
 8004058:	6033      	str	r3, [r6, #0]
 800405a:	4630      	mov	r0, r6
 800405c:	f000 f80c 	bl	8004078 <__malloc_unlock>
 8004060:	e794      	b.n	8003f8c <_malloc_r+0x20>
 8004062:	6005      	str	r5, [r0, #0]
 8004064:	e7d6      	b.n	8004014 <_malloc_r+0xa8>
 8004066:	bf00      	nop
 8004068:	20000524 	.word	0x20000524

0800406c <__malloc_lock>:
 800406c:	4801      	ldr	r0, [pc, #4]	@ (8004074 <__malloc_lock+0x8>)
 800406e:	f7ff bf01 	b.w	8003e74 <__retarget_lock_acquire_recursive>
 8004072:	bf00      	nop
 8004074:	2000051c 	.word	0x2000051c

08004078 <__malloc_unlock>:
 8004078:	4801      	ldr	r0, [pc, #4]	@ (8004080 <__malloc_unlock+0x8>)
 800407a:	f7ff befc 	b.w	8003e76 <__retarget_lock_release_recursive>
 800407e:	bf00      	nop
 8004080:	2000051c 	.word	0x2000051c

08004084 <__ssputs_r>:
 8004084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004088:	688e      	ldr	r6, [r1, #8]
 800408a:	461f      	mov	r7, r3
 800408c:	42be      	cmp	r6, r7
 800408e:	680b      	ldr	r3, [r1, #0]
 8004090:	4682      	mov	sl, r0
 8004092:	460c      	mov	r4, r1
 8004094:	4690      	mov	r8, r2
 8004096:	d82d      	bhi.n	80040f4 <__ssputs_r+0x70>
 8004098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800409c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80040a0:	d026      	beq.n	80040f0 <__ssputs_r+0x6c>
 80040a2:	6965      	ldr	r5, [r4, #20]
 80040a4:	6909      	ldr	r1, [r1, #16]
 80040a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040aa:	eba3 0901 	sub.w	r9, r3, r1
 80040ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040b2:	1c7b      	adds	r3, r7, #1
 80040b4:	444b      	add	r3, r9
 80040b6:	106d      	asrs	r5, r5, #1
 80040b8:	429d      	cmp	r5, r3
 80040ba:	bf38      	it	cc
 80040bc:	461d      	movcc	r5, r3
 80040be:	0553      	lsls	r3, r2, #21
 80040c0:	d527      	bpl.n	8004112 <__ssputs_r+0x8e>
 80040c2:	4629      	mov	r1, r5
 80040c4:	f7ff ff52 	bl	8003f6c <_malloc_r>
 80040c8:	4606      	mov	r6, r0
 80040ca:	b360      	cbz	r0, 8004126 <__ssputs_r+0xa2>
 80040cc:	6921      	ldr	r1, [r4, #16]
 80040ce:	464a      	mov	r2, r9
 80040d0:	f7ff fed2 	bl	8003e78 <memcpy>
 80040d4:	89a3      	ldrh	r3, [r4, #12]
 80040d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040de:	81a3      	strh	r3, [r4, #12]
 80040e0:	6126      	str	r6, [r4, #16]
 80040e2:	6165      	str	r5, [r4, #20]
 80040e4:	444e      	add	r6, r9
 80040e6:	eba5 0509 	sub.w	r5, r5, r9
 80040ea:	6026      	str	r6, [r4, #0]
 80040ec:	60a5      	str	r5, [r4, #8]
 80040ee:	463e      	mov	r6, r7
 80040f0:	42be      	cmp	r6, r7
 80040f2:	d900      	bls.n	80040f6 <__ssputs_r+0x72>
 80040f4:	463e      	mov	r6, r7
 80040f6:	6820      	ldr	r0, [r4, #0]
 80040f8:	4632      	mov	r2, r6
 80040fa:	4641      	mov	r1, r8
 80040fc:	f000 faa6 	bl	800464c <memmove>
 8004100:	68a3      	ldr	r3, [r4, #8]
 8004102:	1b9b      	subs	r3, r3, r6
 8004104:	60a3      	str	r3, [r4, #8]
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	4433      	add	r3, r6
 800410a:	6023      	str	r3, [r4, #0]
 800410c:	2000      	movs	r0, #0
 800410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004112:	462a      	mov	r2, r5
 8004114:	f000 fac4 	bl	80046a0 <_realloc_r>
 8004118:	4606      	mov	r6, r0
 800411a:	2800      	cmp	r0, #0
 800411c:	d1e0      	bne.n	80040e0 <__ssputs_r+0x5c>
 800411e:	6921      	ldr	r1, [r4, #16]
 8004120:	4650      	mov	r0, sl
 8004122:	f7ff feb7 	bl	8003e94 <_free_r>
 8004126:	230c      	movs	r3, #12
 8004128:	f8ca 3000 	str.w	r3, [sl]
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004132:	81a3      	strh	r3, [r4, #12]
 8004134:	f04f 30ff 	mov.w	r0, #4294967295
 8004138:	e7e9      	b.n	800410e <__ssputs_r+0x8a>
	...

0800413c <_svfiprintf_r>:
 800413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004140:	4698      	mov	r8, r3
 8004142:	898b      	ldrh	r3, [r1, #12]
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	b09d      	sub	sp, #116	@ 0x74
 8004148:	4607      	mov	r7, r0
 800414a:	460d      	mov	r5, r1
 800414c:	4614      	mov	r4, r2
 800414e:	d510      	bpl.n	8004172 <_svfiprintf_r+0x36>
 8004150:	690b      	ldr	r3, [r1, #16]
 8004152:	b973      	cbnz	r3, 8004172 <_svfiprintf_r+0x36>
 8004154:	2140      	movs	r1, #64	@ 0x40
 8004156:	f7ff ff09 	bl	8003f6c <_malloc_r>
 800415a:	6028      	str	r0, [r5, #0]
 800415c:	6128      	str	r0, [r5, #16]
 800415e:	b930      	cbnz	r0, 800416e <_svfiprintf_r+0x32>
 8004160:	230c      	movs	r3, #12
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	f04f 30ff 	mov.w	r0, #4294967295
 8004168:	b01d      	add	sp, #116	@ 0x74
 800416a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800416e:	2340      	movs	r3, #64	@ 0x40
 8004170:	616b      	str	r3, [r5, #20]
 8004172:	2300      	movs	r3, #0
 8004174:	9309      	str	r3, [sp, #36]	@ 0x24
 8004176:	2320      	movs	r3, #32
 8004178:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800417c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004180:	2330      	movs	r3, #48	@ 0x30
 8004182:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004320 <_svfiprintf_r+0x1e4>
 8004186:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800418a:	f04f 0901 	mov.w	r9, #1
 800418e:	4623      	mov	r3, r4
 8004190:	469a      	mov	sl, r3
 8004192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004196:	b10a      	cbz	r2, 800419c <_svfiprintf_r+0x60>
 8004198:	2a25      	cmp	r2, #37	@ 0x25
 800419a:	d1f9      	bne.n	8004190 <_svfiprintf_r+0x54>
 800419c:	ebba 0b04 	subs.w	fp, sl, r4
 80041a0:	d00b      	beq.n	80041ba <_svfiprintf_r+0x7e>
 80041a2:	465b      	mov	r3, fp
 80041a4:	4622      	mov	r2, r4
 80041a6:	4629      	mov	r1, r5
 80041a8:	4638      	mov	r0, r7
 80041aa:	f7ff ff6b 	bl	8004084 <__ssputs_r>
 80041ae:	3001      	adds	r0, #1
 80041b0:	f000 80a7 	beq.w	8004302 <_svfiprintf_r+0x1c6>
 80041b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041b6:	445a      	add	r2, fp
 80041b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80041ba:	f89a 3000 	ldrb.w	r3, [sl]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 809f 	beq.w	8004302 <_svfiprintf_r+0x1c6>
 80041c4:	2300      	movs	r3, #0
 80041c6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ce:	f10a 0a01 	add.w	sl, sl, #1
 80041d2:	9304      	str	r3, [sp, #16]
 80041d4:	9307      	str	r3, [sp, #28]
 80041d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041da:	931a      	str	r3, [sp, #104]	@ 0x68
 80041dc:	4654      	mov	r4, sl
 80041de:	2205      	movs	r2, #5
 80041e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041e4:	484e      	ldr	r0, [pc, #312]	@ (8004320 <_svfiprintf_r+0x1e4>)
 80041e6:	f7fb fffb 	bl	80001e0 <memchr>
 80041ea:	9a04      	ldr	r2, [sp, #16]
 80041ec:	b9d8      	cbnz	r0, 8004226 <_svfiprintf_r+0xea>
 80041ee:	06d0      	lsls	r0, r2, #27
 80041f0:	bf44      	itt	mi
 80041f2:	2320      	movmi	r3, #32
 80041f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041f8:	0711      	lsls	r1, r2, #28
 80041fa:	bf44      	itt	mi
 80041fc:	232b      	movmi	r3, #43	@ 0x2b
 80041fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004202:	f89a 3000 	ldrb.w	r3, [sl]
 8004206:	2b2a      	cmp	r3, #42	@ 0x2a
 8004208:	d015      	beq.n	8004236 <_svfiprintf_r+0xfa>
 800420a:	9a07      	ldr	r2, [sp, #28]
 800420c:	4654      	mov	r4, sl
 800420e:	2000      	movs	r0, #0
 8004210:	f04f 0c0a 	mov.w	ip, #10
 8004214:	4621      	mov	r1, r4
 8004216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800421a:	3b30      	subs	r3, #48	@ 0x30
 800421c:	2b09      	cmp	r3, #9
 800421e:	d94b      	bls.n	80042b8 <_svfiprintf_r+0x17c>
 8004220:	b1b0      	cbz	r0, 8004250 <_svfiprintf_r+0x114>
 8004222:	9207      	str	r2, [sp, #28]
 8004224:	e014      	b.n	8004250 <_svfiprintf_r+0x114>
 8004226:	eba0 0308 	sub.w	r3, r0, r8
 800422a:	fa09 f303 	lsl.w	r3, r9, r3
 800422e:	4313      	orrs	r3, r2
 8004230:	9304      	str	r3, [sp, #16]
 8004232:	46a2      	mov	sl, r4
 8004234:	e7d2      	b.n	80041dc <_svfiprintf_r+0xa0>
 8004236:	9b03      	ldr	r3, [sp, #12]
 8004238:	1d19      	adds	r1, r3, #4
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	9103      	str	r1, [sp, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	bfbb      	ittet	lt
 8004242:	425b      	neglt	r3, r3
 8004244:	f042 0202 	orrlt.w	r2, r2, #2
 8004248:	9307      	strge	r3, [sp, #28]
 800424a:	9307      	strlt	r3, [sp, #28]
 800424c:	bfb8      	it	lt
 800424e:	9204      	strlt	r2, [sp, #16]
 8004250:	7823      	ldrb	r3, [r4, #0]
 8004252:	2b2e      	cmp	r3, #46	@ 0x2e
 8004254:	d10a      	bne.n	800426c <_svfiprintf_r+0x130>
 8004256:	7863      	ldrb	r3, [r4, #1]
 8004258:	2b2a      	cmp	r3, #42	@ 0x2a
 800425a:	d132      	bne.n	80042c2 <_svfiprintf_r+0x186>
 800425c:	9b03      	ldr	r3, [sp, #12]
 800425e:	1d1a      	adds	r2, r3, #4
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	9203      	str	r2, [sp, #12]
 8004264:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004268:	3402      	adds	r4, #2
 800426a:	9305      	str	r3, [sp, #20]
 800426c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004330 <_svfiprintf_r+0x1f4>
 8004270:	7821      	ldrb	r1, [r4, #0]
 8004272:	2203      	movs	r2, #3
 8004274:	4650      	mov	r0, sl
 8004276:	f7fb ffb3 	bl	80001e0 <memchr>
 800427a:	b138      	cbz	r0, 800428c <_svfiprintf_r+0x150>
 800427c:	9b04      	ldr	r3, [sp, #16]
 800427e:	eba0 000a 	sub.w	r0, r0, sl
 8004282:	2240      	movs	r2, #64	@ 0x40
 8004284:	4082      	lsls	r2, r0
 8004286:	4313      	orrs	r3, r2
 8004288:	3401      	adds	r4, #1
 800428a:	9304      	str	r3, [sp, #16]
 800428c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004290:	4824      	ldr	r0, [pc, #144]	@ (8004324 <_svfiprintf_r+0x1e8>)
 8004292:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004296:	2206      	movs	r2, #6
 8004298:	f7fb ffa2 	bl	80001e0 <memchr>
 800429c:	2800      	cmp	r0, #0
 800429e:	d036      	beq.n	800430e <_svfiprintf_r+0x1d2>
 80042a0:	4b21      	ldr	r3, [pc, #132]	@ (8004328 <_svfiprintf_r+0x1ec>)
 80042a2:	bb1b      	cbnz	r3, 80042ec <_svfiprintf_r+0x1b0>
 80042a4:	9b03      	ldr	r3, [sp, #12]
 80042a6:	3307      	adds	r3, #7
 80042a8:	f023 0307 	bic.w	r3, r3, #7
 80042ac:	3308      	adds	r3, #8
 80042ae:	9303      	str	r3, [sp, #12]
 80042b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042b2:	4433      	add	r3, r6
 80042b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80042b6:	e76a      	b.n	800418e <_svfiprintf_r+0x52>
 80042b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80042bc:	460c      	mov	r4, r1
 80042be:	2001      	movs	r0, #1
 80042c0:	e7a8      	b.n	8004214 <_svfiprintf_r+0xd8>
 80042c2:	2300      	movs	r3, #0
 80042c4:	3401      	adds	r4, #1
 80042c6:	9305      	str	r3, [sp, #20]
 80042c8:	4619      	mov	r1, r3
 80042ca:	f04f 0c0a 	mov.w	ip, #10
 80042ce:	4620      	mov	r0, r4
 80042d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042d4:	3a30      	subs	r2, #48	@ 0x30
 80042d6:	2a09      	cmp	r2, #9
 80042d8:	d903      	bls.n	80042e2 <_svfiprintf_r+0x1a6>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0c6      	beq.n	800426c <_svfiprintf_r+0x130>
 80042de:	9105      	str	r1, [sp, #20]
 80042e0:	e7c4      	b.n	800426c <_svfiprintf_r+0x130>
 80042e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80042e6:	4604      	mov	r4, r0
 80042e8:	2301      	movs	r3, #1
 80042ea:	e7f0      	b.n	80042ce <_svfiprintf_r+0x192>
 80042ec:	ab03      	add	r3, sp, #12
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	462a      	mov	r2, r5
 80042f2:	4b0e      	ldr	r3, [pc, #56]	@ (800432c <_svfiprintf_r+0x1f0>)
 80042f4:	a904      	add	r1, sp, #16
 80042f6:	4638      	mov	r0, r7
 80042f8:	f3af 8000 	nop.w
 80042fc:	1c42      	adds	r2, r0, #1
 80042fe:	4606      	mov	r6, r0
 8004300:	d1d6      	bne.n	80042b0 <_svfiprintf_r+0x174>
 8004302:	89ab      	ldrh	r3, [r5, #12]
 8004304:	065b      	lsls	r3, r3, #25
 8004306:	f53f af2d 	bmi.w	8004164 <_svfiprintf_r+0x28>
 800430a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800430c:	e72c      	b.n	8004168 <_svfiprintf_r+0x2c>
 800430e:	ab03      	add	r3, sp, #12
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	462a      	mov	r2, r5
 8004314:	4b05      	ldr	r3, [pc, #20]	@ (800432c <_svfiprintf_r+0x1f0>)
 8004316:	a904      	add	r1, sp, #16
 8004318:	4638      	mov	r0, r7
 800431a:	f000 f879 	bl	8004410 <_printf_i>
 800431e:	e7ed      	b.n	80042fc <_svfiprintf_r+0x1c0>
 8004320:	080048ac 	.word	0x080048ac
 8004324:	080048b6 	.word	0x080048b6
 8004328:	00000000 	.word	0x00000000
 800432c:	08004085 	.word	0x08004085
 8004330:	080048b2 	.word	0x080048b2

08004334 <_printf_common>:
 8004334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004338:	4616      	mov	r6, r2
 800433a:	4698      	mov	r8, r3
 800433c:	688a      	ldr	r2, [r1, #8]
 800433e:	690b      	ldr	r3, [r1, #16]
 8004340:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004344:	4293      	cmp	r3, r2
 8004346:	bfb8      	it	lt
 8004348:	4613      	movlt	r3, r2
 800434a:	6033      	str	r3, [r6, #0]
 800434c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004350:	4607      	mov	r7, r0
 8004352:	460c      	mov	r4, r1
 8004354:	b10a      	cbz	r2, 800435a <_printf_common+0x26>
 8004356:	3301      	adds	r3, #1
 8004358:	6033      	str	r3, [r6, #0]
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	0699      	lsls	r1, r3, #26
 800435e:	bf42      	ittt	mi
 8004360:	6833      	ldrmi	r3, [r6, #0]
 8004362:	3302      	addmi	r3, #2
 8004364:	6033      	strmi	r3, [r6, #0]
 8004366:	6825      	ldr	r5, [r4, #0]
 8004368:	f015 0506 	ands.w	r5, r5, #6
 800436c:	d106      	bne.n	800437c <_printf_common+0x48>
 800436e:	f104 0a19 	add.w	sl, r4, #25
 8004372:	68e3      	ldr	r3, [r4, #12]
 8004374:	6832      	ldr	r2, [r6, #0]
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	42ab      	cmp	r3, r5
 800437a:	dc26      	bgt.n	80043ca <_printf_common+0x96>
 800437c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004380:	6822      	ldr	r2, [r4, #0]
 8004382:	3b00      	subs	r3, #0
 8004384:	bf18      	it	ne
 8004386:	2301      	movne	r3, #1
 8004388:	0692      	lsls	r2, r2, #26
 800438a:	d42b      	bmi.n	80043e4 <_printf_common+0xb0>
 800438c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004390:	4641      	mov	r1, r8
 8004392:	4638      	mov	r0, r7
 8004394:	47c8      	blx	r9
 8004396:	3001      	adds	r0, #1
 8004398:	d01e      	beq.n	80043d8 <_printf_common+0xa4>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	6922      	ldr	r2, [r4, #16]
 800439e:	f003 0306 	and.w	r3, r3, #6
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	bf02      	ittt	eq
 80043a6:	68e5      	ldreq	r5, [r4, #12]
 80043a8:	6833      	ldreq	r3, [r6, #0]
 80043aa:	1aed      	subeq	r5, r5, r3
 80043ac:	68a3      	ldr	r3, [r4, #8]
 80043ae:	bf0c      	ite	eq
 80043b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043b4:	2500      	movne	r5, #0
 80043b6:	4293      	cmp	r3, r2
 80043b8:	bfc4      	itt	gt
 80043ba:	1a9b      	subgt	r3, r3, r2
 80043bc:	18ed      	addgt	r5, r5, r3
 80043be:	2600      	movs	r6, #0
 80043c0:	341a      	adds	r4, #26
 80043c2:	42b5      	cmp	r5, r6
 80043c4:	d11a      	bne.n	80043fc <_printf_common+0xc8>
 80043c6:	2000      	movs	r0, #0
 80043c8:	e008      	b.n	80043dc <_printf_common+0xa8>
 80043ca:	2301      	movs	r3, #1
 80043cc:	4652      	mov	r2, sl
 80043ce:	4641      	mov	r1, r8
 80043d0:	4638      	mov	r0, r7
 80043d2:	47c8      	blx	r9
 80043d4:	3001      	adds	r0, #1
 80043d6:	d103      	bne.n	80043e0 <_printf_common+0xac>
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e0:	3501      	adds	r5, #1
 80043e2:	e7c6      	b.n	8004372 <_printf_common+0x3e>
 80043e4:	18e1      	adds	r1, r4, r3
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	2030      	movs	r0, #48	@ 0x30
 80043ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043ee:	4422      	add	r2, r4
 80043f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043f8:	3302      	adds	r3, #2
 80043fa:	e7c7      	b.n	800438c <_printf_common+0x58>
 80043fc:	2301      	movs	r3, #1
 80043fe:	4622      	mov	r2, r4
 8004400:	4641      	mov	r1, r8
 8004402:	4638      	mov	r0, r7
 8004404:	47c8      	blx	r9
 8004406:	3001      	adds	r0, #1
 8004408:	d0e6      	beq.n	80043d8 <_printf_common+0xa4>
 800440a:	3601      	adds	r6, #1
 800440c:	e7d9      	b.n	80043c2 <_printf_common+0x8e>
	...

08004410 <_printf_i>:
 8004410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	7e0f      	ldrb	r7, [r1, #24]
 8004416:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004418:	2f78      	cmp	r7, #120	@ 0x78
 800441a:	4691      	mov	r9, r2
 800441c:	4680      	mov	r8, r0
 800441e:	460c      	mov	r4, r1
 8004420:	469a      	mov	sl, r3
 8004422:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004426:	d807      	bhi.n	8004438 <_printf_i+0x28>
 8004428:	2f62      	cmp	r7, #98	@ 0x62
 800442a:	d80a      	bhi.n	8004442 <_printf_i+0x32>
 800442c:	2f00      	cmp	r7, #0
 800442e:	f000 80d1 	beq.w	80045d4 <_printf_i+0x1c4>
 8004432:	2f58      	cmp	r7, #88	@ 0x58
 8004434:	f000 80b8 	beq.w	80045a8 <_printf_i+0x198>
 8004438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800443c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004440:	e03a      	b.n	80044b8 <_printf_i+0xa8>
 8004442:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004446:	2b15      	cmp	r3, #21
 8004448:	d8f6      	bhi.n	8004438 <_printf_i+0x28>
 800444a:	a101      	add	r1, pc, #4	@ (adr r1, 8004450 <_printf_i+0x40>)
 800444c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004450:	080044a9 	.word	0x080044a9
 8004454:	080044bd 	.word	0x080044bd
 8004458:	08004439 	.word	0x08004439
 800445c:	08004439 	.word	0x08004439
 8004460:	08004439 	.word	0x08004439
 8004464:	08004439 	.word	0x08004439
 8004468:	080044bd 	.word	0x080044bd
 800446c:	08004439 	.word	0x08004439
 8004470:	08004439 	.word	0x08004439
 8004474:	08004439 	.word	0x08004439
 8004478:	08004439 	.word	0x08004439
 800447c:	080045bb 	.word	0x080045bb
 8004480:	080044e7 	.word	0x080044e7
 8004484:	08004575 	.word	0x08004575
 8004488:	08004439 	.word	0x08004439
 800448c:	08004439 	.word	0x08004439
 8004490:	080045dd 	.word	0x080045dd
 8004494:	08004439 	.word	0x08004439
 8004498:	080044e7 	.word	0x080044e7
 800449c:	08004439 	.word	0x08004439
 80044a0:	08004439 	.word	0x08004439
 80044a4:	0800457d 	.word	0x0800457d
 80044a8:	6833      	ldr	r3, [r6, #0]
 80044aa:	1d1a      	adds	r2, r3, #4
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6032      	str	r2, [r6, #0]
 80044b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044b8:	2301      	movs	r3, #1
 80044ba:	e09c      	b.n	80045f6 <_printf_i+0x1e6>
 80044bc:	6833      	ldr	r3, [r6, #0]
 80044be:	6820      	ldr	r0, [r4, #0]
 80044c0:	1d19      	adds	r1, r3, #4
 80044c2:	6031      	str	r1, [r6, #0]
 80044c4:	0606      	lsls	r6, r0, #24
 80044c6:	d501      	bpl.n	80044cc <_printf_i+0xbc>
 80044c8:	681d      	ldr	r5, [r3, #0]
 80044ca:	e003      	b.n	80044d4 <_printf_i+0xc4>
 80044cc:	0645      	lsls	r5, r0, #25
 80044ce:	d5fb      	bpl.n	80044c8 <_printf_i+0xb8>
 80044d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044d4:	2d00      	cmp	r5, #0
 80044d6:	da03      	bge.n	80044e0 <_printf_i+0xd0>
 80044d8:	232d      	movs	r3, #45	@ 0x2d
 80044da:	426d      	negs	r5, r5
 80044dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044e0:	4858      	ldr	r0, [pc, #352]	@ (8004644 <_printf_i+0x234>)
 80044e2:	230a      	movs	r3, #10
 80044e4:	e011      	b.n	800450a <_printf_i+0xfa>
 80044e6:	6821      	ldr	r1, [r4, #0]
 80044e8:	6833      	ldr	r3, [r6, #0]
 80044ea:	0608      	lsls	r0, r1, #24
 80044ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80044f0:	d402      	bmi.n	80044f8 <_printf_i+0xe8>
 80044f2:	0649      	lsls	r1, r1, #25
 80044f4:	bf48      	it	mi
 80044f6:	b2ad      	uxthmi	r5, r5
 80044f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80044fa:	4852      	ldr	r0, [pc, #328]	@ (8004644 <_printf_i+0x234>)
 80044fc:	6033      	str	r3, [r6, #0]
 80044fe:	bf14      	ite	ne
 8004500:	230a      	movne	r3, #10
 8004502:	2308      	moveq	r3, #8
 8004504:	2100      	movs	r1, #0
 8004506:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800450a:	6866      	ldr	r6, [r4, #4]
 800450c:	60a6      	str	r6, [r4, #8]
 800450e:	2e00      	cmp	r6, #0
 8004510:	db05      	blt.n	800451e <_printf_i+0x10e>
 8004512:	6821      	ldr	r1, [r4, #0]
 8004514:	432e      	orrs	r6, r5
 8004516:	f021 0104 	bic.w	r1, r1, #4
 800451a:	6021      	str	r1, [r4, #0]
 800451c:	d04b      	beq.n	80045b6 <_printf_i+0x1a6>
 800451e:	4616      	mov	r6, r2
 8004520:	fbb5 f1f3 	udiv	r1, r5, r3
 8004524:	fb03 5711 	mls	r7, r3, r1, r5
 8004528:	5dc7      	ldrb	r7, [r0, r7]
 800452a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800452e:	462f      	mov	r7, r5
 8004530:	42bb      	cmp	r3, r7
 8004532:	460d      	mov	r5, r1
 8004534:	d9f4      	bls.n	8004520 <_printf_i+0x110>
 8004536:	2b08      	cmp	r3, #8
 8004538:	d10b      	bne.n	8004552 <_printf_i+0x142>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	07df      	lsls	r7, r3, #31
 800453e:	d508      	bpl.n	8004552 <_printf_i+0x142>
 8004540:	6923      	ldr	r3, [r4, #16]
 8004542:	6861      	ldr	r1, [r4, #4]
 8004544:	4299      	cmp	r1, r3
 8004546:	bfde      	ittt	le
 8004548:	2330      	movle	r3, #48	@ 0x30
 800454a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800454e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004552:	1b92      	subs	r2, r2, r6
 8004554:	6122      	str	r2, [r4, #16]
 8004556:	f8cd a000 	str.w	sl, [sp]
 800455a:	464b      	mov	r3, r9
 800455c:	aa03      	add	r2, sp, #12
 800455e:	4621      	mov	r1, r4
 8004560:	4640      	mov	r0, r8
 8004562:	f7ff fee7 	bl	8004334 <_printf_common>
 8004566:	3001      	adds	r0, #1
 8004568:	d14a      	bne.n	8004600 <_printf_i+0x1f0>
 800456a:	f04f 30ff 	mov.w	r0, #4294967295
 800456e:	b004      	add	sp, #16
 8004570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	f043 0320 	orr.w	r3, r3, #32
 800457a:	6023      	str	r3, [r4, #0]
 800457c:	4832      	ldr	r0, [pc, #200]	@ (8004648 <_printf_i+0x238>)
 800457e:	2778      	movs	r7, #120	@ 0x78
 8004580:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	6831      	ldr	r1, [r6, #0]
 8004588:	061f      	lsls	r7, r3, #24
 800458a:	f851 5b04 	ldr.w	r5, [r1], #4
 800458e:	d402      	bmi.n	8004596 <_printf_i+0x186>
 8004590:	065f      	lsls	r7, r3, #25
 8004592:	bf48      	it	mi
 8004594:	b2ad      	uxthmi	r5, r5
 8004596:	6031      	str	r1, [r6, #0]
 8004598:	07d9      	lsls	r1, r3, #31
 800459a:	bf44      	itt	mi
 800459c:	f043 0320 	orrmi.w	r3, r3, #32
 80045a0:	6023      	strmi	r3, [r4, #0]
 80045a2:	b11d      	cbz	r5, 80045ac <_printf_i+0x19c>
 80045a4:	2310      	movs	r3, #16
 80045a6:	e7ad      	b.n	8004504 <_printf_i+0xf4>
 80045a8:	4826      	ldr	r0, [pc, #152]	@ (8004644 <_printf_i+0x234>)
 80045aa:	e7e9      	b.n	8004580 <_printf_i+0x170>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	f023 0320 	bic.w	r3, r3, #32
 80045b2:	6023      	str	r3, [r4, #0]
 80045b4:	e7f6      	b.n	80045a4 <_printf_i+0x194>
 80045b6:	4616      	mov	r6, r2
 80045b8:	e7bd      	b.n	8004536 <_printf_i+0x126>
 80045ba:	6833      	ldr	r3, [r6, #0]
 80045bc:	6825      	ldr	r5, [r4, #0]
 80045be:	6961      	ldr	r1, [r4, #20]
 80045c0:	1d18      	adds	r0, r3, #4
 80045c2:	6030      	str	r0, [r6, #0]
 80045c4:	062e      	lsls	r6, r5, #24
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	d501      	bpl.n	80045ce <_printf_i+0x1be>
 80045ca:	6019      	str	r1, [r3, #0]
 80045cc:	e002      	b.n	80045d4 <_printf_i+0x1c4>
 80045ce:	0668      	lsls	r0, r5, #25
 80045d0:	d5fb      	bpl.n	80045ca <_printf_i+0x1ba>
 80045d2:	8019      	strh	r1, [r3, #0]
 80045d4:	2300      	movs	r3, #0
 80045d6:	6123      	str	r3, [r4, #16]
 80045d8:	4616      	mov	r6, r2
 80045da:	e7bc      	b.n	8004556 <_printf_i+0x146>
 80045dc:	6833      	ldr	r3, [r6, #0]
 80045de:	1d1a      	adds	r2, r3, #4
 80045e0:	6032      	str	r2, [r6, #0]
 80045e2:	681e      	ldr	r6, [r3, #0]
 80045e4:	6862      	ldr	r2, [r4, #4]
 80045e6:	2100      	movs	r1, #0
 80045e8:	4630      	mov	r0, r6
 80045ea:	f7fb fdf9 	bl	80001e0 <memchr>
 80045ee:	b108      	cbz	r0, 80045f4 <_printf_i+0x1e4>
 80045f0:	1b80      	subs	r0, r0, r6
 80045f2:	6060      	str	r0, [r4, #4]
 80045f4:	6863      	ldr	r3, [r4, #4]
 80045f6:	6123      	str	r3, [r4, #16]
 80045f8:	2300      	movs	r3, #0
 80045fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045fe:	e7aa      	b.n	8004556 <_printf_i+0x146>
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	4632      	mov	r2, r6
 8004604:	4649      	mov	r1, r9
 8004606:	4640      	mov	r0, r8
 8004608:	47d0      	blx	sl
 800460a:	3001      	adds	r0, #1
 800460c:	d0ad      	beq.n	800456a <_printf_i+0x15a>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	079b      	lsls	r3, r3, #30
 8004612:	d413      	bmi.n	800463c <_printf_i+0x22c>
 8004614:	68e0      	ldr	r0, [r4, #12]
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	4298      	cmp	r0, r3
 800461a:	bfb8      	it	lt
 800461c:	4618      	movlt	r0, r3
 800461e:	e7a6      	b.n	800456e <_printf_i+0x15e>
 8004620:	2301      	movs	r3, #1
 8004622:	4632      	mov	r2, r6
 8004624:	4649      	mov	r1, r9
 8004626:	4640      	mov	r0, r8
 8004628:	47d0      	blx	sl
 800462a:	3001      	adds	r0, #1
 800462c:	d09d      	beq.n	800456a <_printf_i+0x15a>
 800462e:	3501      	adds	r5, #1
 8004630:	68e3      	ldr	r3, [r4, #12]
 8004632:	9903      	ldr	r1, [sp, #12]
 8004634:	1a5b      	subs	r3, r3, r1
 8004636:	42ab      	cmp	r3, r5
 8004638:	dcf2      	bgt.n	8004620 <_printf_i+0x210>
 800463a:	e7eb      	b.n	8004614 <_printf_i+0x204>
 800463c:	2500      	movs	r5, #0
 800463e:	f104 0619 	add.w	r6, r4, #25
 8004642:	e7f5      	b.n	8004630 <_printf_i+0x220>
 8004644:	080048bd 	.word	0x080048bd
 8004648:	080048ce 	.word	0x080048ce

0800464c <memmove>:
 800464c:	4288      	cmp	r0, r1
 800464e:	b510      	push	{r4, lr}
 8004650:	eb01 0402 	add.w	r4, r1, r2
 8004654:	d902      	bls.n	800465c <memmove+0x10>
 8004656:	4284      	cmp	r4, r0
 8004658:	4623      	mov	r3, r4
 800465a:	d807      	bhi.n	800466c <memmove+0x20>
 800465c:	1e43      	subs	r3, r0, #1
 800465e:	42a1      	cmp	r1, r4
 8004660:	d008      	beq.n	8004674 <memmove+0x28>
 8004662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800466a:	e7f8      	b.n	800465e <memmove+0x12>
 800466c:	4402      	add	r2, r0
 800466e:	4601      	mov	r1, r0
 8004670:	428a      	cmp	r2, r1
 8004672:	d100      	bne.n	8004676 <memmove+0x2a>
 8004674:	bd10      	pop	{r4, pc}
 8004676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800467a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800467e:	e7f7      	b.n	8004670 <memmove+0x24>

08004680 <_sbrk_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4d06      	ldr	r5, [pc, #24]	@ (800469c <_sbrk_r+0x1c>)
 8004684:	2300      	movs	r3, #0
 8004686:	4604      	mov	r4, r0
 8004688:	4608      	mov	r0, r1
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	f7fd fc64 	bl	8001f58 <_sbrk>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d102      	bne.n	800469a <_sbrk_r+0x1a>
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	b103      	cbz	r3, 800469a <_sbrk_r+0x1a>
 8004698:	6023      	str	r3, [r4, #0]
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	20000518 	.word	0x20000518

080046a0 <_realloc_r>:
 80046a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a4:	4607      	mov	r7, r0
 80046a6:	4614      	mov	r4, r2
 80046a8:	460d      	mov	r5, r1
 80046aa:	b921      	cbnz	r1, 80046b6 <_realloc_r+0x16>
 80046ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046b0:	4611      	mov	r1, r2
 80046b2:	f7ff bc5b 	b.w	8003f6c <_malloc_r>
 80046b6:	b92a      	cbnz	r2, 80046c4 <_realloc_r+0x24>
 80046b8:	f7ff fbec 	bl	8003e94 <_free_r>
 80046bc:	4625      	mov	r5, r4
 80046be:	4628      	mov	r0, r5
 80046c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c4:	f000 f81a 	bl	80046fc <_malloc_usable_size_r>
 80046c8:	4284      	cmp	r4, r0
 80046ca:	4606      	mov	r6, r0
 80046cc:	d802      	bhi.n	80046d4 <_realloc_r+0x34>
 80046ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046d2:	d8f4      	bhi.n	80046be <_realloc_r+0x1e>
 80046d4:	4621      	mov	r1, r4
 80046d6:	4638      	mov	r0, r7
 80046d8:	f7ff fc48 	bl	8003f6c <_malloc_r>
 80046dc:	4680      	mov	r8, r0
 80046de:	b908      	cbnz	r0, 80046e4 <_realloc_r+0x44>
 80046e0:	4645      	mov	r5, r8
 80046e2:	e7ec      	b.n	80046be <_realloc_r+0x1e>
 80046e4:	42b4      	cmp	r4, r6
 80046e6:	4622      	mov	r2, r4
 80046e8:	4629      	mov	r1, r5
 80046ea:	bf28      	it	cs
 80046ec:	4632      	movcs	r2, r6
 80046ee:	f7ff fbc3 	bl	8003e78 <memcpy>
 80046f2:	4629      	mov	r1, r5
 80046f4:	4638      	mov	r0, r7
 80046f6:	f7ff fbcd 	bl	8003e94 <_free_r>
 80046fa:	e7f1      	b.n	80046e0 <_realloc_r+0x40>

080046fc <_malloc_usable_size_r>:
 80046fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004700:	1f18      	subs	r0, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	bfbc      	itt	lt
 8004706:	580b      	ldrlt	r3, [r1, r0]
 8004708:	18c0      	addlt	r0, r0, r3
 800470a:	4770      	bx	lr

0800470c <_init>:
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	bf00      	nop
 8004710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004712:	bc08      	pop	{r3}
 8004714:	469e      	mov	lr, r3
 8004716:	4770      	bx	lr

08004718 <_fini>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	bf00      	nop
 800471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471e:	bc08      	pop	{r3}
 8004720:	469e      	mov	lr, r3
 8004722:	4770      	bx	lr
